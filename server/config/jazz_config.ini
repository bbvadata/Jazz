// This is the MAIN Jazz configuration file.
// -----------------------------------------

	// Edit with care (you are declaring 'key = value' pairs):

		//	1. Empty lines and anything to the right of (including) // is removed.
		//	2. Unquoted space is removed (a = My Nice Folder, collapses to a=MyNiceFolder).
		//	3. Quotes must be paired, the parser is dumb, don`t expect any escape magic. Still a = "My Nice Folder" works as you expect.
		//	4. Repeated keys are simply overriden, just the last definition counts.
		//	5. Keys could be defined with spaces "A hat" = "E(A)", but no such keys are used in Jazz.

// J_LOGGER path

LOGGER_PATH				= ./jazz_dbg.log	// Name of a file to (immediately) write logs to. Always appended, never erased.

// JazzHttpServer settings

HTTP_PORT				= 8899				// Port used by the JazzHttpServer

MHD_DEBUG				= 0					// Run in debug mode. If this flag is used, the library should print error messages and
											// warnings to stderr.
MHD_SSL					= 0					// Run in HTTPS-mode.
MHD_IPv6				= 0					// Run using the IPv6 protocol (otherwise, MHD will just support IPv4).
MHD_PEDANTIC_CHECKS		= 0					// Be pedantic about the protocol (as opposed to as tolerant as possible). Specifically,
											// at the moment, this flag causes MHD to reject HTTP 1.1 connections without a Host
											// header. This is required by the standard, but of course in violation of the“be as
											// liberal as possible in what you accept” norm. It is recommended to turn this ON if you
											// are testing clients against MHD, and OFF in production.
MHD_SUPPRESS_DATE		= 0					// Suppress (automatically) adding the ’Date:’ header to HTTP responses. This option
											// should ONLY be used on systems that do not have a clock and that DO provide other
											// mechanisms for cache control. See also RFC 2616, section 14.18 (exception 3).
MHD_USE_TCP_FASTOPEN	= 0					// Enable TCP_FASTOPEN on the listen socket. TCP_FASTOPEN is currently supported on
											// Linux >= 3.6. On other systems using this option with cause MHD_start_daemon to fail.
MHD_CONN_MEMORY_LIMIT	= 32768				// Maximum memory size per connection (in bytes). The default is 32 kB as defined by the
											// internal constant MHD_POOL_SIZE_DEFAULT. Values above 128k are unlikely to result in
											// much benefit, as half of the memory will be typically used for IO, and TCP buffers are
											// unlikely to support window sizes above 64k on most systems.
MHD_CONN_MEMORY_INCR	= 1024				// Increment to use for growing the read buffer (followed by a size_t). The default is
											// 1024 (bytes). Increasing this value will make MHD use memory for reading more
											// aggressively, which can reduce the number of recvfrom calls but may increase the
											// number of sendto calls. The value must fit within MHD_CONN_MEMORY_LIMIT.
MHD_CONN_LIMIT			= 0					// Leave 0 to keep the default value. Maximum number of concurrent connections to accept.
											// The default is FD_SETSIZE - 4 (the maximum number of file descriptors supported by
											// select minus four for stdin, stdout, stderr and the server socket). In other words,
											// the default is as large as possible.
MHD_CONN_TIMEOUT		= 0					// After how many seconds of inactivity should a connection automatically be timed out?
											// (followed by an unsigned int: use zero for no timeout). The default is 0 (no timeout).
MHD_PER_IP_CONN_LIMIT	= 0					// Limit on the number of (concurrent) connections made to the server from the same IP
											// address. Can be used to prevent one IP from taking over all the allowed connections.
											// If the same IP tries to establish more than the specified number of connections, they
											// will be immediately rejected. The option should be followed by an unsigned int.
											// The default is 0, which means no limit on the number of connections from the same IP.
MHD_THREAD_POOL_SIZE	= 16				// Number of threads in thread pool. Enable thread pooling by setting this value to to
											// something greater than 1. Currently, thread model must be MHD_USE_SELECT_INTERNALLY
											// if thread pooling is enabled.
MHD_THREAD_STACK_SIZE	= 0					// Maximum stack size for threads created by MHD. This must be followed by a size_t.
											// Not specifying this option or using a value of zero means using the system default
											// (which is likely to differ based on your platform).
MHD_LISTEN_ADDR_REUSE	= 0					// This option must be followed by a unsigned int argument. If this option is present and
											// true (nonzero) parameter is given, allow reusing the address:port of the listening
											// socket (using SO_REUSEPORT on most platforms, and SO_REUSEADDR on Windows). If a false
											// (zero) parameter is given, disallow reusing the the address:port of the listening
											// socket (this usually requires no special action, but SO_EXCLUSIVEADDRUSE is needed on
											// Windows). If this option is not present, default behaviour is undefined (currently,
											// SO_REUSEADDR is used on all platforms, which disallows address:port reusing with the

// JazzSource (LMDB) settings

MDB_PERSISTENCE_PATH	= ./jazz_dbg_mdb/	// Path to the local persistence (root directory). Each subdirectory in this is a source.
MDB_ENV_SET_MAPSIZE		= 8192				// Size in Mb of the memory buffer used by LMDB. Set the size of the memory map to use
											// for this environment. The size should be a multiple of the OS page size. The default
											// = 10485760 bytes. The size of the memory map is also the maximum size of the database.
											// The value should be chosen as large as possible, to accommodate future growth of the
											// database. This function should be called after mdb_env_create() and before
											// mdb_env_open(). It may be called at later times if no transactions are active in this
											// process. Note that the library does not check for this condition, the caller must
											// ensure it explicitly. The new size takes effect immediately for the current process
											// but will not be persisted to any others until a write transaction has been committed
											// by the current process. Also, only mapsize increases are persisted into the
											// environment. If the mapsize is increased by another process, and data has grown beyond
											// the range of the current mapsize, mdb_txn_begin() will return MDB_MAP_RESIZED. This
											// function may be called with a size of zero to adopt the new size. Any attempt to set a
											// size smaller than the space already consumed by the environment will be silently
											// changed to the current size of the used space.
MDB_ENV_SET_MAXREADERS	= 16				// Set the maximum number of threads/reader slots for the environment.
											// Typically == MHD_THREAD_POOL_SIZE
MDB_ENV_SET_MAXDBS		= 16				// Set the maximum number of named databases for the environment. This function is only
											// needed if multiple databases will be used in the environment. Simpler applications
											// that use the environment as a single unnamed database can ignore this option. This
											// function may only be called after mdb_env_create() and before mdb_env_open().
											// Currently a moderate number of slots are cheap but a huge number gets expensive:
											// 7-120 words per transaction, and every mdb_dbi_open() does a linear search of the
											// opened slots.
MDB_FIXEDMAP			= 0					// Use a fixed address for the mmap region. This flag must be specified when creating the
											// environment, and is stored persistently in the environment. If successful, the memory
											// map will always reside at the same virtual address and pointers used to reference data
											// items in the database will be constant across multiple invocations. This option may
											// not always work, depending on how the operating system has allocated memory to shared
											// libraries and other uses. The feature is highly experimental.
MDB_WRITEMAP			= 0					// Use a writeable memory map unless MDB_RDONLY is set. This uses fewer mallocs but loses
											// protection from application bugs like wild pointer writes and other bad updates into
											// the database. This may be slightly faster for DBs that fit entirely in RAM, but is
											// slower for DBs larger than RAM. Incompatible with nested transactions. Do not mix
											// processes with and without MDB_WRITEMAP on the same environment. This can defeat
											// durability (mdb_env_sync etc).
MDB_NOMETASYNC			= 1					// Flush system buffers to disk only once per transaction, omit the metadata flush. Defer
											// that until the system flushes files to disk, or next non-MDB_RDONLY commit or
											// mdb_env_sync(). This optimization maintains database integrity, but a system crash may
											// undo the last committed transaction. I.e. it preserves the ACI(atomicity, consistency,
											// isolation) but not D (durability) database property. This flag may be changed at any
											// time using mdb_env_set_flags().
MDB_NOSYNC				= 1					// Don`t flush system buffers to disk when committing a transaction. This optimization
											// means a system crash can corrupt the database or lose the last transactions if buffers
											// not yet flushed to disk. The risk is governed by how often the system flushes dirty
											// buffers to disk and how often mdb_env_sync() is called. However, if the filesystem
											// preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI
											// (atomicity, consistency, isolation) properties and only lose D (durability). I.e.
											// database integrity is maintained, but a system crash may undo the final transactions.
											// Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write
											// transactions to disk, unless mdb_env_sync() is called. (MDB_MAPASYNC | MDB_WRITEMAP)
											// may be preferable. This flag may be changed at any time using mdb_env_set_flags().
MDB_MAPASYNC			= 1					// When using MDB_WRITEMAP, use asynchronous flushes to disk. As with MDB_NOSYNC, a
											// system crash can then corrupt the database or lose the last transactions. Calling
											// mdb_env_sync() ensures on-disk database integrity until next commit. This flag may be
											// changed at any time using mdb_env_set_flags().
MDB_NOLOCK				= 1					// Don`t do any locking. If concurrent access is anticipated, the caller must manage all
											// concurrency itself. For proper operation the caller must enforce single-writer
											// semantics, and must ensure that no readers are using old transactions while a writer
											// is active. The simplest approach is to use an exclusive lock so that no readers may be
											// active at all when a writer begins.
MDB_NORDAHEAD			= 1					// Turn off readahead. Most operating systems perform readahead on read requests by
											// default. This option turns it off if the OS supports it. Turning it off may help
											// random read performance when the DB is larger than RAM and system RAM is full.
MDB_NOREADAHEAD			= 1					// Don`t initialize malloc`d memory before writing to unused spaces in the data file. By
											// default, memory for pages written to the data file is obtained using malloc. While
											// these pages may be reused in subsequent transactions, freshly malloc`d pages will be
											// initialized to zeroes before use. This avoids persisting leftover data from other code
											// (that used the heap and subsequently freed the memory) into the data file. Note that
											// many other system libraries may allocate and free memory from the heap for arbitrary
											// uses. E.g., stdio may use the heap for file I/O buffers. This initialization step has
											// a modest performance cost so some applications may want to disable it using this flag.
											// This option can be a problem for applications which handle sensitive data like
											// passwords, and it makes memory checkers like Valgrind noisy. This flag is not needed
											// with MDB_WRITEMAP, which writes directly to the mmap instead of using malloc for
											// pages. The initialization is also skipped if MDB_RESERVE is used: the caller is
											// expected to overwrite all of the memory that was reserved in that case. This flag may
											// be changed at any time using mdb_env_set_flags().

//EOF
