/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


using namespace jazz_elements;


// Instancing container, logger and config
// ---------------------------------------

ConfigFile	CONFIG(JAZZ_DEFAULT_CONFIG_PATH);
Logger		LOGGER(CONFIG, "LOGGER_PATH");
Container	CNT	  (&LOGGER, &CONFIG);


// Functions to support testing
// ----------------------------

class PseudoBuffer {
	public:

		inline void writer() {
			a[0] = (a[63]*16381 + 1) % 32749;
			for (int i = 1; i < 64; i++)
				a[i] = (a[i - 1]*16381 + 1) % 32749;

			b[0] = ((a[0] + b[63])*16381 + 3) % 32749;
			for (int i = 1; i < 64; i++)
				b[i] = (b[i - 1]*16381 + 1) % 32749;

			for (int i = 0; i < 64; i++)
				c[i] = a[i]*b[i];
		}

		inline int reader(int pid) {
			int i = pid % 64;

			return a[i]*b[i] - c[i];
		}

		Lock32 readers {0}, writers {0}, thread_errors {0}, reads_ok {0};

		int a[64] = {}, b[64] = {}, c[64] = {};
};

PseudoBuffer PSB;
Transaction  JBK;

static void *unsafe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 100; k++){
		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);
	}

	return (void *) 0;
}

static void *unsafe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		PSB.writer();
	}

	return (void *) 0;
}

static void *safe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 1000; k++){
		CNT.enter_read(&JBK);

		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);

		CNT.leave_read(&JBK);
	}

	return (void *) 0;
}

static void *safe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		CNT.enter_write(&JBK);

		PSB.writer();

		CNT.leave_write(&JBK);
	}

	return (void *) 0;
}

void check_and_finish(pBlock p_block, int set_has_NA = SET_HAS_NA_AUTO, bool set_hash = true, bool set_time = true)
{
	pStringBuffer psb = p_block->p_string_buffer();

	REQUIRE(p_block->total_bytes == sizeof(BlockHeader) +
									(uintptr_t) p_block->align_128bit((p_block->cell_type & 0xf)*p_block->size) +
									2*sizeof(int)*p_block->num_attributes +
									sizeof(StringBuffer) + psb->buffer_size);

	char *pt1 = (char *) &psb->buffer[psb->last_idx],
		 *pt2 = (char *) p_block + p_block->total_bytes;

	REQUIRE(pt2 > pt1);

	p_block->finish_creation(set_has_NA, set_hash, set_time);
}


void init_static_hea(StaticBlockHeader &hea, pBlock p_blk) {
	memcpy(&hea, p_blk, sizeof(StaticBlockHeader));

	p_blk->get_dimensions(& hea.range.dim[0]);
}


void check_text_block(pBlock p_block) {

	REQUIRE(p_block->cell_type	  == CELL_TYPE_BYTE);
	REQUIRE(p_block->size		   > 2);
	REQUIRE(p_block->rank		  == 1);
	REQUIRE(p_block->range.dim[0] == 1);

	REQUIRE(p_block->tensor.cell_byte[p_block->size - 1] == 0);

	switch (p_block->tensor.cell_byte[0]) {
	case '(':
		REQUIRE(p_block->tensor.cell_byte[p_block->size - 2] == ')');
		break;

	case '[':
		REQUIRE(p_block->tensor.cell_byte[p_block->size - 2] == ']');
		break;

	case '{':
		REQUIRE(p_block->tensor.cell_byte[p_block->size - 2] == '}');
		break;

	default:
		REQUIRE(strcmp("HALT:", "Wrong initial char.") == 0);
	}

	int n_lo = 0, n_hi = 0;
	for (int i = 0; i < p_block->size - 1; i++) {
		if (p_block->tensor.cell_byte[i] < 32)
			n_lo++;

		if (p_block->tensor.cell_byte[i] > 126)
			n_hi++;
	}
	REQUIRE(n_lo == 0);
	REQUIRE(n_hi == 0);
}


void compare_full_blocks(pBlock p_bl1, pBlock p_bl2, bool skip_value_check = false) {

	REQUIRE(p_bl1->cell_type == p_bl2->cell_type);
	REQUIRE(p_bl1->size == p_bl2->size);
	REQUIRE(p_bl1->rank == p_bl2->rank);

	for (int i = 0; i < p_bl1->rank; i++) {
		REQUIRE(p_bl1->range.dim[i] == p_bl2->range.dim[i]);
	}

	bool all_cells_equal = true;

	switch (p_bl1->cell_type) {
	case CELL_TYPE_BYTE:
	case CELL_TYPE_BYTE_BOOLEAN:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_byte[i] != p_bl2->tensor.cell_byte[i]) {
				all_cells_equal = false;

				break;
			}
		}
		break;

	case CELL_TYPE_INTEGER:
	case CELL_TYPE_FACTOR:
	case CELL_TYPE_GRADE:
	case CELL_TYPE_BOOLEAN:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_uint[i] != p_bl2->tensor.cell_uint[i]) {
				all_cells_equal = false;

				break;
			}
		}
		break;

	case CELL_TYPE_LONG_INTEGER:
	case CELL_TYPE_TIME:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_ulongint[i] != p_bl2->tensor.cell_ulongint[i]) {
				all_cells_equal = false;

				break;
			}
		}
		break;

	case CELL_TYPE_SINGLE:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_uint[i] == SINGLE_NA_UINT32) {
				if (p_bl2->tensor.cell_uint[i] != SINGLE_NA_UINT32)
					all_cells_equal = false;
			} else {
				if (p_bl2->tensor.cell_uint[i] == SINGLE_NA_UINT32)
					all_cells_equal = false;
				if (fabs(p_bl1->tensor.cell_single[i] - p_bl2->tensor.cell_single[i]) > 1e-5)
					all_cells_equal = false;
			}
		}
		break;

	case CELL_TYPE_DOUBLE:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_ulongint[i] == DOUBLE_NA_UINT64) {
				if (p_bl2->tensor.cell_ulongint[i] != DOUBLE_NA_UINT64)
					all_cells_equal = false;
			} else {
				if (p_bl2->tensor.cell_ulongint[i] == DOUBLE_NA_UINT64)
					all_cells_equal = false;
				if (fabs(p_bl1->tensor.cell_double[i] - p_bl2->tensor.cell_double[i]) > 1e-9)
					all_cells_equal = false;
			}
		}
		break;

	case CELL_TYPE_STRING:
		for (int i = 0; i < p_bl1->size; i++) {
			if (strcmp(p_bl1->get_string(i), p_bl2->get_string(i)) != 0) {
				all_cells_equal = false;

				break;
			}
		}
		break;

	case CELL_TYPE_KIND_ITEM:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_item[i].cell_type != p_bl2->tensor.cell_item[i].cell_type)
				all_cells_equal = false;

			if (p_bl1->tensor.cell_item[i].rank != p_bl2->tensor.cell_item[i].rank)
				all_cells_equal = false;

			if (strcmp(reinterpret_cast<pKind>(p_bl1)->item_name(i), reinterpret_cast<pKind>(p_bl2)->item_name(i)) != 0)
				all_cells_equal = false;

			for (int j = 0; j < p_bl1->tensor.cell_item[i].rank; j++) {
				int d1 = p_bl1->tensor.cell_item[i].dim[j];
				int d2 = p_bl2->tensor.cell_item[i].dim[j];

				if (d1 > 0) {
 					if (d2 != d1)
						all_cells_equal = false;
				} else if (d2 >= 0)
					all_cells_equal = false;
				else {
					pChar nd1 = (&p_bl1->p_string_buffer()->buffer[-d1]);
					pChar nd2 = (&p_bl2->p_string_buffer()->buffer[-d2]);

					if (strcmp(nd1, nd2) != 0)
						all_cells_equal = false;
				}
			}
		}
		break;

	case CELL_TYPE_TUPLE_ITEM:
		for (int i = 0; i < p_bl1->size; i++) {
			if (p_bl1->tensor.cell_item[i].cell_type != p_bl2->tensor.cell_item[i].cell_type)
				all_cells_equal = false;

			if (p_bl1->tensor.cell_item[i].rank != p_bl2->tensor.cell_item[i].rank)
				all_cells_equal = false;

			if (strcmp(reinterpret_cast<pKind>(p_bl1)->item_name(i), reinterpret_cast<pKind>(p_bl2)->item_name(i)) != 0)
				all_cells_equal = false;

			compare_full_blocks(reinterpret_cast<pTuple>(p_bl1)->get_block(i), reinterpret_cast<pTuple>(p_bl1)->get_block(i));
		}
		break;

	default:
		REQUIRE(strcmp("HALT:", "Wrong cell_type.") == 0);
	}

	if (!skip_value_check)
		REQUIRE(all_cells_equal);
}

// Tests
// -----

SCENARIO("Testing (container) structure sizes.") {

	REQUIRE(sizeof(Name)			  == 32);
	REQUIRE(sizeof(Lock32)			  == 4);
	REQUIRE(sizeof(Transaction)		  == 32);
	REQUIRE(sizeof(StoredTransaction) == 48);
}


SCENARIO("Testing threading functions") {
	WHEN("We check basic assumptions, we get expected results") {
		REQUIRE(JBK._lock_ == 0);

		int lock = JBK._lock_.fetch_add(1, std::memory_order_relaxed);

		REQUIRE(lock == 0);
		REQUIRE(JBK._lock_ == 1);

		JBK._lock_ = 0;

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 1);

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 2);

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 3);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 2);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 1);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 0);

		CNT.enter_write(&JBK);
		REQUIRE(JBK._lock_ == -LOCK_WEIGHT_OF_WRITE);

		CNT.leave_write(&JBK);
		REQUIRE(JBK._lock_ == 0);

		CNT.lock_container();
		REQUIRE(CNT._lock_ == 1);

		CNT.unlock_container();
		REQUIRE(CNT._lock_ == 0);
	}

	PSB.writer();

	for (int i = 0; i < 64; i++) {
		REQUIRE(PSB.reader(i) == 0);
	}

	WHEN("We run a 240x100 readers and 16x10 writers sequentially and no errors happen.") {
		for (int i = 0; i < 256; i++) {
			if ((i % 16) == 0)
				unsafe_writer(nullptr);
			else
				unsafe_reader(nullptr);
		}
		REQUIRE(PSB.writers == 16);
		REQUIRE(PSB.readers == 240);
		REQUIRE(PSB.reads_ok == 24000);
		REQUIRE(PSB.thread_errors == 0);
	}

// #define LONG_THREAD_TEST

#ifndef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a short thread test. Define LONG_THREAD_TEST for the long test.") {
		bool failed = false;

		pthread_t th_id[32];
		for (int i = 0; i < 32; i++) {
			if ((i % 16) == 0) {
				if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
					failed = true;
					break;
				}
			} else {
				if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}
		std::this_thread::yield();

		for (int i = 0; i < 32; i++) {
			if (pthread_join(th_id[i], nullptr) != 0){
				failed = true;
				break;
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 2);
		REQUIRE(PSB.readers == 30);
		REQUIRE(PSB.reads_ok == 30000);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif

#ifdef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	const int num_threads = 256,
			  num_times	  = 64;

	WHEN("We run a 240x100 readers 16x10 writers in parallel num_times times without control, errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, unsafe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, unsafe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}
			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok < 24000*num_times);
		REQUIRE(PSB.thread_errors > 0);
	}

	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a 240x1000 readers 16x10 writers in parallel num_times times with control and no errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}

			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0){
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok == 240000*num_times);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif
}


SCENARIO("Stress-testing new_transaction()/destroy_internal()") {
	pTransaction p_txn[20];

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	REQUIRE(CNT.destroy_container() == SERVICE_NO_ERROR);

	CNT.max_transactions = 1024;
	CNT.warn_alloc_bytes = 4096;
	CNT.fail_alloc_bytes = 8192;
	REQUIRE(CNT.new_container() == SERVICE_ERROR_NO_MEM);

	CNT.max_transactions  = 16;
	REQUIRE(CNT.new_container() == SERVICE_NO_ERROR);

	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 != nullptr);

	REQUIRE(CNT.new_transaction(p_txn[0]) == SERVICE_NO_ERROR);
	REQUIRE(p_txn[0] != nullptr);

	REQUIRE(p_txn[0]->p_block == nullptr);
	REQUIRE(p_txn[0]->p_route == nullptr);
	REQUIRE(p_txn[0]->_lock_  == 0);
	REQUIRE(p_txn[0]->status  == BLOCK_STATUS_EMPTY);
	REQUIRE(p_txn[0]->p_owner == &CNT);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_alloc != nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	REQUIRE(!CNT.alloc_warning_issued);
	p_txn[0]->p_block = (pBlock) CNT.malloc(5000);
	REQUIRE(p_txn[0]->p_block != nullptr);
	p_txn[0]->p_block->total_bytes = 5000;
	REQUIRE(!CNT.alloc_warning_issued);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction) + 5000);

	LOGGER.SkipLogOnce = true;
	REQUIRE(CNT.new_transaction(p_txn[1]) == SERVICE_NO_ERROR);
	REQUIRE(!LOGGER.SkipLogOnce);

	REQUIRE(p_txn[1] != nullptr);
	REQUIRE(CNT.alloc_warning_issued);

	CNT.destroy_internal(p_txn[1]);
	CNT.destroy_internal(p_txn[0]);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(CNT.p_free	!= nullptr);
	REQUIRE(CNT.new_transaction(p_txn[0]) == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_alloc != nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	p_txn[0]->p_block = (pBlock) CNT.malloc(50000);
	REQUIRE(p_txn[0]->p_block == nullptr);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));

	CNT.destroy_internal(p_txn[0]);
	REQUIRE(p_txn[0] == nullptr);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	for (int t = 1; t < 17; t++) {
		for (int i = 0; i < t; i++) {
			REQUIRE(CNT.new_transaction(p_txn[i]) == SERVICE_NO_ERROR);
			REQUIRE(p_txn[i] != nullptr);

			REQUIRE(p_txn[i]->p_block == nullptr);
			REQUIRE(p_txn[i]->p_route == nullptr);
			REQUIRE(p_txn[i]->_lock_  == 0);
			REQUIRE(p_txn[i]->status  == BLOCK_STATUS_EMPTY);
			REQUIRE(p_txn[i]->p_owner == &CNT);
		}
		if (t == 16)
			REQUIRE(CNT.p_free == nullptr);

		for (int i = 0; i < t; i++) {
			CNT.destroy_internal(p_txn[i]);
			REQUIRE(p_txn[i] == nullptr);
		}
		REQUIRE(CNT.p_alloc == nullptr);
		REQUIRE(CNT.p_free	!= nullptr);
	}

	for (int t = 1; t < 17; t++) {
		for (int i = 0; i < t; i++) {
			REQUIRE(CNT.new_transaction(p_txn[i]) == SERVICE_NO_ERROR);
			REQUIRE(p_txn[i] != nullptr);
		}
		if (t == 16)
			REQUIRE(CNT.p_free == nullptr);

		for (int i = t - 1; i >= 0; i--) {
			CNT.destroy_internal(p_txn[i]);
			REQUIRE(p_txn[i] == nullptr);
		}
		REQUIRE(CNT.p_alloc == nullptr);
		REQUIRE(CNT.p_free	!= nullptr);
	}

	for (int t = 3; t < 17; t++) {
		for (int i = 0; i < t; i++) {
			REQUIRE(CNT.new_transaction(p_txn[i]) == SERVICE_NO_ERROR);
			REQUIRE(p_txn[i] != nullptr);
		}
		if (t == 16)
			REQUIRE(CNT.p_free == nullptr);

		for (int i = t - 1; i >= 0; i--) {
			int j = 3 % t;

			while (p_txn[j] == nullptr)
				j = (j + 1) % t;

			CNT.destroy_internal(p_txn[j]);
			REQUIRE(p_txn[j] == nullptr);
		}
		REQUIRE(CNT.p_alloc == nullptr);
		REQUIRE(CNT.p_free	!= nullptr);
	}

	for (int i = 0; i < 16; i++) {
		REQUIRE(CNT.new_transaction(p_txn[i]) == SERVICE_NO_ERROR);
		REQUIRE(p_txn[i] != nullptr);
	}
	REQUIRE(CNT.p_free == nullptr);

	REQUIRE(CNT.new_transaction(p_txn[17]) == SERVICE_ERROR_NO_MEM);
	REQUIRE(CNT.p_free == nullptr);

	for (int i = 0; i < 16; i++) {
		CNT.destroy_internal(p_txn[i]);
		REQUIRE(p_txn[i] == nullptr);
	}
	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));

	TensorDim dim_t1 {{500, 10, 0}}, dim_t2 {{500, 1000, 0}};

	REQUIRE(CNT.new_block(p_txn[0], CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
	REQUIRE(p_txn[0] != nullptr);
	REQUIRE(p_txn[0]->p_block != nullptr);
	REQUIRE(p_txn[0]->status  == BLOCK_STATUS_READY);

	REQUIRE(CNT.new_block(p_txn[1], p_txn[0]->p_block, (pBlock) nullptr) == SERVICE_ERROR_NO_MEM);
	REQUIRE(p_txn[1] == nullptr);

	CNT.destroy(p_txn[0]);
	REQUIRE(p_txn[0] == nullptr);

	REQUIRE(CNT.new_block(p_txn[0], CELL_TYPE_BYTE, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_ERROR_NO_MEM);
	REQUIRE(p_txn[0] == nullptr);

	for (int i = 0; i < 15; i++) {
		REQUIRE(CNT.new_transaction(p_txn[i]) == SERVICE_NO_ERROR);
		REQUIRE(p_txn[i] != nullptr);
	}
	REQUIRE(CNT.new_block(p_txn[15], CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
	REQUIRE(p_txn[15] != nullptr);
	REQUIRE(p_txn[15]->p_block != nullptr);
	REQUIRE(p_txn[15]->status  == BLOCK_STATUS_READY);

	REQUIRE(CNT.p_free == nullptr);

	REQUIRE(CNT.new_block(p_txn[16], CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_ERROR_NO_MEM);
	REQUIRE(p_txn[16] == nullptr);

	REQUIRE(CNT.new_block(p_txn[16], p_txn[15]->p_block, (pBlock) nullptr) == SERVICE_ERROR_NO_MEM);
	REQUIRE(p_txn[16] == nullptr);

	for (int i = 0; i < 16; i++) {
		CNT.destroy_internal(p_txn[i]);
		REQUIRE(p_txn[i] == nullptr);
	}
	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(CNT.p_free	!= nullptr);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (1) Create a Tensor from raw data specifying everything from scratch.") {
	TensorDim dim_t1 {{7, 3, 5, 0}}, dim_t2 {{7, 2, 2, 2, 3, 2}}, dim_t3 {{97, 0}}, dim_t4 {{3, 2, 2, 0}};
	TensorDim dim_t5 {{120, 5, 4, 0}}, dim_t6 {{120, 0}}, dim_t7 {{7, 0}}, dim_read, dim_xx {{0}};

	pTransaction p_txn;

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	REQUIRE(CNT.new_transaction(p_txn) == SERVICE_NO_ERROR);
	REQUIRE(p_txn != nullptr);
	REQUIRE(p_txn->p_block == nullptr);
	REQUIRE(p_txn->status  == BLOCK_STATUS_EMPTY);
	REQUIRE(p_txn->_lock_  == 0);

	REQUIRE(CNT.p_alloc != nullptr);
	CNT.destroy_internal(p_txn);
	REQUIRE(CNT.p_alloc == nullptr);
	REQUIRE(p_txn		== nullptr);

	WHEN("I force all the possible error conditions, I get nullptr.") {
		char const *buffer	= "One Two Three Four Five Six Seven";
		char const *buffer6 = "One Two Three Four Five Six";
		bool filter[7];

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_NEW_DONT_FILL, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_NEW_WITH_ZERO, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_NEW_WITH_NA, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_BOOLEAN_FILTER, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_INTEGER_FILTER, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t1.dim, FILL_WITH_TEXTFILE, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t1.dim, FILL_WITH_TEXTFILE, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t1.dim, FILL_WITH_TEXTFILE, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_DOUBLE, dim_t1.dim, FILL_WITH_TEXTFILE, nullptr, 0, buffer)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_DOUBLE, nullptr) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 128, buffer, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status == BLOCK_STATUS_READY);
		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t7.dim, FILL_WITH_TEXTFILE, nullptr, 128, buffer, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status == BLOCK_STATUS_READY);
		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t7.dim, FILL_WITH_TEXTFILE, nullptr, 128, buffer6, ' ')
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, 0x201, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, 0x604, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, 0x308, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, 2, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t7.dim, FILL_BOOLEAN_FILTER, (bool *) &filter)
				== SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status == BLOCK_STATUS_READY);
		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t7.dim, FILL_BOOLEAN_FILTER, (bool *) &filter) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t7.dim, FILL_BOOLEAN_FILTER, (bool *) &filter)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t7.dim, FILL_BOOLEAN_FILTER, (bool *) &filter)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t1.dim, FILL_BOOLEAN_FILTER, (bool *) &filter)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t7.dim, FILL_BOOLEAN_FILTER) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t7.dim, FILL_INTEGER_FILTER, (bool *) &filter) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status == BLOCK_STATUS_READY);
		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t7.dim, FILL_INTEGER_FILTER, (bool *) &filter) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t7.dim, FILL_INTEGER_FILTER, (bool *) &filter)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t7.dim, FILL_INTEGER_FILTER, (bool *) &filter)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t1.dim, FILL_INTEGER_FILTER, (bool *) &filter) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t7.dim, FILL_INTEGER_FILTER) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t1.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status == BLOCK_STATUS_READY);
		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t1.dim, FILL_NEW_DONT_FILL - 1) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_INTEGER, dim_t1.dim, FILL_WITH_TEXTFILE + 1) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*7 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_byte[0] == 0);
		REQUIRE(p_txn->p_block->tensor.cell_byte[104] == 0);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*7 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*7 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_byte[0]   == BYTE_BOOLEAN_NA);
		REQUIRE(p_txn->p_block->tensor.cell_byte[104] == BYTE_BOOLEAN_NA);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*7 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i++) {
			REQUIRE(CNT.new_block(p_txn, cell_types[i], dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
			REQUIRE(p_txn != nullptr);
			REQUIRE(p_txn->p_block != nullptr);
			REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

			REQUIRE(p_txn->p_block->cell_type == cell_types[i]);
			REQUIRE(p_txn->p_block->rank == 3);

			memset(&dim_read, 1, sizeof(dim_read));

			p_txn->p_block->get_dimensions(dim_read.dim);

			REQUIRE(dim_read.dim[0] == 7);
			REQUIRE(dim_read.dim[1] == 3);
			REQUIRE(dim_read.dim[2] == 5);
			REQUIRE(dim_read.dim[3] == 0);
			REQUIRE(dim_read.dim[4] == 0);
			REQUIRE(dim_read.dim[5] == 0);

			REQUIRE(p_txn->p_block->size == 105);
			REQUIRE(p_txn->p_block->num_attributes == 1);
			REQUIRE(p_txn->p_block->total_bytes == 64 + 16*27 + 8 + 16);
			REQUIRE(p_txn->p_block->has_NA == true);
			REQUIRE(p_txn->p_block->tensor.cell_int[0]	== INTEGER_NA);
			REQUIRE(p_txn->p_block->tensor.cell_int[104] == INTEGER_NA);

			check_and_finish(p_txn->p_block);

			REQUIRE(p_txn != nullptr);

			REQUIRE(p_txn->p_block->has_NA == true);
			REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
			REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*27 + 8 + 16));

			REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
			REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
			REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

			CNT.destroy(p_txn);
			REQUIRE(p_txn == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_int[0]	== BOOLEAN_NA);
		REQUIRE(p_txn->p_block->tensor.cell_int[104] == BOOLEAN_NA);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*27 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_SINGLE, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_uint[0]   == reinterpret_cast<u_int*>(&SINGLE_NA)[0]);
		REQUIRE(p_txn->p_block->tensor.cell_uint[104] == reinterpret_cast<u_int*>(&SINGLE_NA)[0]);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*27 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_STRING") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_uint[0]   == STRING_NA);
		REQUIRE(p_txn->p_block->tensor.cell_uint[104] == STRING_NA);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*27 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_LONG_INTEGER, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_longint[0]	== LONG_INTEGER_NA);
		REQUIRE(p_txn->p_block->tensor.cell_longint[104] == LONG_INTEGER_NA);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*53 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_TIME") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_TIME, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TIME);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_longint[0]	== TIME_POINT_NA);
		REQUIRE(p_txn->p_block->tensor.cell_longint[104] == TIME_POINT_NA);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*53 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_DOUBLE, dim_t1.dim, FILL_NEW_WITH_NA) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_txn->p_block->rank == 3);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 3);
		REQUIRE(dim_read.dim[2] == 5);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 105);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_ulongint[0]   == reinterpret_cast<uint64_t*>(&DOUBLE_NA)[0]);
		REQUIRE(p_txn->p_block->tensor.cell_ulongint[104] == reinterpret_cast<uint64_t*>(&DOUBLE_NA)[0]);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*53 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*21 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_byte[0]   == 0);
		REQUIRE(p_txn->p_block->tensor.cell_byte[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*21 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*21 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_byte[0]   == 0);
		REQUIRE(p_txn->p_block->tensor.cell_byte[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*21 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i++) {
			REQUIRE(CNT.new_block(p_txn, cell_types[i], dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
			REQUIRE(p_txn != nullptr);
			REQUIRE(p_txn->p_block != nullptr);
			REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

			REQUIRE(p_txn->p_block->cell_type == cell_types[i]);
			REQUIRE(p_txn->p_block->rank == 6);

			memset(&dim_read, 1, sizeof(dim_read));

			p_txn->p_block->get_dimensions(dim_read.dim);

			REQUIRE(dim_read.dim[0] == 7);
			REQUIRE(dim_read.dim[1] == 2);
			REQUIRE(dim_read.dim[2] == 2);
			REQUIRE(dim_read.dim[3] == 2);
			REQUIRE(dim_read.dim[4] == 3);
			REQUIRE(dim_read.dim[5] == 2);

			REQUIRE(p_txn->p_block->size == 336);
			REQUIRE(p_txn->p_block->num_attributes == 1);
			REQUIRE(p_txn->p_block->total_bytes == 64 + 16*84 + 8 + 16);
			REQUIRE(p_txn->p_block->has_NA == false);
			REQUIRE(p_txn->p_block->tensor.cell_int[0]	  == 0);
			REQUIRE(p_txn->p_block->tensor.cell_int[335] == 0);

			check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

			REQUIRE(p_txn != nullptr);

			REQUIRE(p_txn->p_block->has_NA == true);
			REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
			REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*84 + 8 + 16));

			REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
			REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
			REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

			CNT.destroy(p_txn);
			REQUIRE(p_txn == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_int[0]	  == 0);
		REQUIRE(p_txn->p_block->tensor.cell_int[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*84 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_SINGLE, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_uint[0]   == 0);
		REQUIRE(p_txn->p_block->tensor.cell_uint[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*84 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_STRING") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_uint[0]   == 0);
		REQUIRE(p_txn->p_block->tensor.cell_uint[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*84 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_LONG_INTEGER, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_longint[0]	 == 0);
		REQUIRE(p_txn->p_block->tensor.cell_longint[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*168 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_TIME") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_TIME, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TIME);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(p_txn->p_block->tensor.cell_longint[0]	 == 0);
		REQUIRE(p_txn->p_block->tensor.cell_longint[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*168 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_DOUBLE, dim_t2.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_txn->p_block->rank == 6);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 7);
		REQUIRE(dim_read.dim[1] == 2);
		REQUIRE(dim_read.dim[2] == 2);
		REQUIRE(dim_read.dim[3] == 2);
		REQUIRE(dim_read.dim[4] == 3);
		REQUIRE(dim_read.dim[5] == 2);

		REQUIRE(p_txn->p_block->size == 336);
		REQUIRE(p_txn->p_block->num_attributes == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(p_txn->p_block->tensor.cell_ulongint[0]   == 0);
		REQUIRE(p_txn->p_block->tensor.cell_ulongint[335] == 0);

		check_and_finish(p_txn->p_block, SET_HAS_NA_TRUE);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*168 + 8 + 16));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) != nullptr);
		REQUIRE(strlen(p_txn->p_block->get_attribute(BLOCK_ATTRIB_EMPTY)) == 0);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	AttributeMap block_att;
	block_att [1357] = "Hello world!";
	block_att [468]	 = "Hi!";
	block_att [222]	 = "123.";

	GIVEN("A block of CELL_TYPE_BYTE") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_BYTE, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*7 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == false);

		for (int j = 0; j < 97; j++) p_txn->p_block->tensor.cell_byte[j] = j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*7 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_BYTE_BOOLEAN, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*7 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);
		for (int j = 0; j < 97; j++) p_txn->p_block->tensor.cell_byte[j] = j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*7 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i++) {
			REQUIRE(   CNT.new_block(p_txn,  cell_types[i], dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
					== SERVICE_NO_ERROR);

			REQUIRE(p_txn != nullptr);
			REQUIRE(p_txn->p_block != nullptr);
			REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

			REQUIRE(p_txn->p_block->cell_type == cell_types[i]);
			REQUIRE(p_txn->p_block->rank == 1);

			memset(&dim_read, 1, sizeof(dim_read));

			p_txn->p_block->get_dimensions(dim_read.dim);

			REQUIRE(dim_read.dim[0] == 97);
			REQUIRE(dim_read.dim[1] == 0);
			REQUIRE(dim_read.dim[2] == 0);
			REQUIRE(dim_read.dim[3] == 0);
			REQUIRE(dim_read.dim[4] == 0);
			REQUIRE(dim_read.dim[5] == 0);

			REQUIRE(p_txn->p_block->size == 97);
			REQUIRE(p_txn->p_block->num_attributes == 3);
			REQUIRE(p_txn->p_block->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
			REQUIRE(p_txn->p_block->has_NA == true);
			for (int j = 0; j < 97; j++) p_txn->p_block->tensor.cell_int[j] = j;

			check_and_finish(p_txn->p_block);

			REQUIRE(p_txn != nullptr);

			REQUIRE(p_txn->p_block->has_NA == false);
			REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
			REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*25 + 8*3 + 16 + 22));

			REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
			REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
			REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
			REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
			REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
			REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
			REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

			CNT.destroy(p_txn);
			REQUIRE(p_txn == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_BOOLEAN, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);

		for (int j = 0; j < 97; j++)
			p_txn->p_block->tensor.cell_int[j] = j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*25 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_SINGLE, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);

		for (int j = 0; j < 97; j++)
			p_txn->p_block->tensor.cell_single[j] = 0.123*j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*25 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	char const *monday = "Monday", *tuesday = "Tuesday", *nope = "";

	GIVEN("A block of CELL_TYPE_STRING") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 256, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*25 + 8*3 + 16 + 22 + 256);
		REQUIRE(p_txn->p_block->has_NA == true);
		for (int j = 0; j < 97; j++) {
			switch (j % 3) {
			case 1:
				p_txn->p_block->set_string(j, monday);
				break;
			case 2:
				p_txn->p_block->set_string(j, tuesday);
				break;
			default:
				p_txn->p_block->set_string(j, nope);
				break;
			}
		}

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*25 + 8*3 + 16 + 22 + 256));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		REQUIRE(!strcmp(p_txn->p_block->get_string( 0), ""));
		REQUIRE(!strcmp(p_txn->p_block->get_string( 1), "Monday"));
		REQUIRE(!strcmp(p_txn->p_block->get_string( 2), "Tuesday"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(94), "Monday"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(95), "Tuesday"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(96), ""));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_LONG_INTEGER, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);

		for (int j = 0; j < 97; j++)
			p_txn->p_block->tensor.cell_longint[j] = j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_TIME") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_TIME, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TIME);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);

		for (int j = 0; j < 97; j++)
			p_txn->p_block->tensor.cell_longint[j] = j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == true);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_DOUBLE, dim_t3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &block_att)
				== SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_txn->p_block->rank == 1);

		memset(&dim_read, 1, sizeof(dim_read));

		p_txn->p_block->get_dimensions(dim_read.dim);

		REQUIRE(dim_read.dim[0] == 97);
		REQUIRE(dim_read.dim[1] == 0);
		REQUIRE(dim_read.dim[2] == 0);
		REQUIRE(dim_read.dim[3] == 0);
		REQUIRE(dim_read.dim[4] == 0);
		REQUIRE(dim_read.dim[5] == 0);

		REQUIRE(p_txn->p_block->size == 97);
		REQUIRE(p_txn->p_block->num_attributes == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(p_txn->p_block->has_NA == true);

		for (int j = 0; j < 97; j++)
			p_txn->p_block->tensor.cell_double[j] = -0.1234567890123*j;

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);
		REQUIRE(elapsed_mu_sec(p_txn->p_block->created) < 3e6);
		REQUIRE(p_txn->p_block->hash64 == MurmurHash64A(&p_txn->p_block->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(p_txn->p_block->get_attribute(976555311) == nullptr);
		REQUIRE(p_txn->p_block->get_attribute(1357) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(1357), "Hello world!"));
		REQUIRE(p_txn->p_block->get_attribute(222) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(222), "123."));
		REQUIRE(p_txn->p_block->get_attribute(468) != nullptr);
		REQUIRE(!strcmp(p_txn->p_block->get_attribute(468), "Hi!"));

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	char const *text_file_0 = "",
			   *text_file_1 = "\n",
			   *text_file_2 = "\n\n\n",
			   *text_file_3 = "abc\ndef",
			   *text_file_4 = "abc\ndef\n",
			   *text_file_5 = "abc\ndef\n\n",
			   *text_file_6 = "This is a common\ntext file\n",
			   *text_file_7 = "\nThis is another\n\ncommon\ntext file.",
			   *text_file_8 = "January February March April May June July August September October November December",
			   *text_file_9 = "\n\n\nMon\n\nTue\nWed\n\n\n";

	GIVEN("A block of CELL_TYPE_STRING") {
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_NEW_DONT_FILL, nullptr, 0, text_file_0)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_NEW_WITH_ZERO, nullptr, 0, text_file_0)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_BOOLEAN_FILTER, nullptr, 0, text_file_0)
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_0) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 1);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == STRING_EMPTY);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 3);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "Q") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_1) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 1);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 1);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == STRING_EMPTY);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 3);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "#") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_2) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 3);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(2), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[2] == STRING_EMPTY);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 5);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "A") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_3) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 2);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 6 + 2);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), "abc"));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), "def"));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == 6);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 10);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "A") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_4) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 2);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 6 + 2);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), "abc"));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), "def"));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == 6);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 10);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "A") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_5) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 3);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 6 + 3);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), "abc"));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), "def"));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == 6);
		REQUIRE(!strcmp(p_txn->p_block->get_string(2), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[2] == STRING_EMPTY);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 11);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "A") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_6) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 2);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16 + 8 + 16 + 25 + 2);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), "This is a common"));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), "text file"));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == 19);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 29);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "A") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_7) == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 5);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*2 + 8 + 16 + 31 + 5);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), "This is another"));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == 3);
		REQUIRE(!strcmp(p_txn->p_block->get_string(2), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[2] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(3), "common"));
		REQUIRE(p_txn->p_block->tensor.cell_int[3] == 20);
		REQUIRE(!strcmp(p_txn->p_block->get_string(4), "text file."));
		REQUIRE(p_txn->p_block->tensor.cell_int[4] == 27);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 38);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "S") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		dim_xx.dim[0] = 11;
		dim_xx.dim[1] = 0;
		dim_xx.dim[2] = 0;
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, dim_xx.dim, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ')
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		dim_xx.dim[0] = 13;
		dim_xx.dim[1] = 0;
		dim_xx.dim[2] = 0;
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, dim_xx.dim, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ')
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		dim_xx.dim[0] = 5;
		dim_xx.dim[1] = 2;
		dim_xx.dim[2] = 0;
		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, dim_xx.dim, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ')
				== SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_txn == nullptr);

		dim_xx.dim[0] = 6;
		dim_xx.dim[1] = 2;
		dim_xx.dim[2] = 0;

		REQUIRE(   CNT.new_block(p_txn, CELL_TYPE_STRING, dim_xx.dim, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ')
				== SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 2);

		REQUIRE(p_txn->p_block->size == 12);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0),  "January"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(1),  "February"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(2),  "March"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(3),  "April"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(4),  "May"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(5),  "June"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(6),  "July"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(7),  "August"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(8),  "September"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(9),  "October"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(10), "November"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(11), "December"));

		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "-") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);


		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, dim_t4.dim, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 3);

		REQUIRE(p_txn->p_block->size == 12);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0),  "January"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(1),  "February"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(2),  "March"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(3),  "April"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(4),  "May"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(5),  "June"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(6),  "July"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(7),  "August"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(8),  "September"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(9),  "October"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(10), "November"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(11), "December"));

		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "@") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ') == SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 12);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0),  "January"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(1),  "February"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(2),  "March"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(3),  "April"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(4),  "May"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(5),  "June"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(6),  "July"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(7),  "August"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(8),  "September"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(9),  "October"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(10), "November"));
		REQUIRE(!strcmp(p_txn->p_block->get_string(11), "December"));

		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "T") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);

		REQUIRE(CNT.new_block(p_txn, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file_9) == SERVICE_NO_ERROR);

		REQUIRE(p_txn != nullptr);
		REQUIRE(p_txn->p_block != nullptr);
		REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

		REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
		REQUIRE(p_txn->p_block->rank == 1);

		REQUIRE(p_txn->p_block->size == 9);
		REQUIRE(p_txn->p_block->total_bytes == 64 + 16*3 + 8 + 16 + 9 + 9);
		REQUIRE(p_txn->p_block->has_NA == false);

		check_and_finish(p_txn->p_block);

		REQUIRE(p_txn != nullptr);

		REQUIRE(p_txn->p_block->has_NA == false);

		REQUIRE(!strcmp(p_txn->p_block->get_string(0), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[0] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(1), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[1] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(2), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[2] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(3), "Mon"));
		REQUIRE(p_txn->p_block->tensor.cell_int[3] == 5);
		REQUIRE(!strcmp(p_txn->p_block->get_string(4), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[4] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(5), "Tue"));
		REQUIRE(p_txn->p_block->tensor.cell_int[5] == 10);
		REQUIRE(!strcmp(p_txn->p_block->get_string(6), "Wed"));
		REQUIRE(p_txn->p_block->tensor.cell_int[6] == 14);
		REQUIRE(!strcmp(p_txn->p_block->get_string(7), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[7] == STRING_EMPTY);
		REQUIRE(!strcmp(p_txn->p_block->get_string(8), ""));
		REQUIRE(p_txn->p_block->tensor.cell_int[8] == STRING_EMPTY);

		REQUIRE(p_txn->p_block->p_string_buffer()->last_idx == 20);
		REQUIRE(!p_txn->p_block->p_string_buffer()->alloc_failed);
		REQUIRE(p_txn->p_block->get_string_offset(p_txn->p_block->p_string_buffer(), "p") == STRING_NA);
		REQUIRE(p_txn->p_block->p_string_buffer()->alloc_failed);

		CNT.destroy(p_txn);
		REQUIRE(p_txn == nullptr);
	}

	bool filter_v_z[120], filter_v_1[120], filter_v_n[120];

	for (int i = 0; i < 120; i++) {
		filter_v_z[i] = 0;
		filter_v_1[i] = true;
		filter_v_n[i] = (i % 7) == 2;
	}

	REQUIRE(CNT.new_block(p_txn, CELL_TYPE_DOUBLE, dim_t5.dim) == SERVICE_NO_ERROR);

	REQUIRE(p_txn != nullptr);
	REQUIRE(p_txn->p_block != nullptr);
	REQUIRE(p_txn->status  == BLOCK_STATUS_READY);

	REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
	REQUIRE(p_txn->p_block->rank == 3);
	REQUIRE(p_txn->p_block->size == 2400);

	pTransaction p_filter_kpr;

	GIVEN("A filter of boolean") {
		REQUIRE(CNT.new_block(p_filter_kpr, CELL_TYPE_BYTE_BOOLEAN, dim_t6.dim, FILL_BOOLEAN_FILTER) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_filter_kpr == nullptr);

		REQUIRE(   CNT.new_block(p_filter_kpr, CELL_TYPE_BYTE_BOOLEAN, dim_t6.dim, FILL_BOOLEAN_FILTER, (bool *) &filter_v_n)
				== SERVICE_NO_ERROR);

		REQUIRE(p_filter_kpr != nullptr);

		REQUIRE(p_filter_kpr->p_block->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(p_filter_kpr->p_block->rank == 1);
		REQUIRE(p_filter_kpr->p_block->size == 120);
		REQUIRE(p_filter_kpr->p_block->num_attributes == 1);
		REQUIRE(p_filter_kpr->p_block->total_bytes == 64 + 16*8 + 8 + 16);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		for (int j = 0; j < 120; j++)
			REQUIRE(p_filter_kpr->p_block->tensor.cell_byte[j] == filter_v_n[j]);

		check_and_finish(p_filter_kpr->p_block);

		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->filter_audit() == FILTER_TYPE_BOOLEAN);
		REQUIRE(p_filter_kpr->p_block->can_filter(p_txn->p_block));

		CNT.destroy(p_filter_kpr);
		REQUIRE(p_filter_kpr == nullptr);
	}

	GIVEN("Three filters of integer") {
		REQUIRE(CNT.new_block(p_filter_kpr, CELL_TYPE_INTEGER, dim_t6.dim, FILL_INTEGER_FILTER) == SERVICE_ERROR_NEW_BLOCK_ARGS);
		REQUIRE(p_filter_kpr == nullptr);

		REQUIRE(   CNT.new_block(p_filter_kpr, CELL_TYPE_INTEGER, dim_t6.dim, FILL_INTEGER_FILTER, (bool *) &filter_v_n)
				== SERVICE_NO_ERROR);

		REQUIRE(p_filter_kpr != nullptr);
		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->status  == BLOCK_STATUS_READY);

		REQUIRE(p_filter_kpr->p_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->rank == 1);
		REQUIRE(p_filter_kpr->p_block->size == 120);
		REQUIRE(p_filter_kpr->p_block->num_attributes == 1);
		REQUIRE(p_filter_kpr->p_block->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->range.filter.one == 1);
		REQUIRE(p_filter_kpr->p_block->range.filter.length == 17);
		for (int j = 0; j < p_filter_kpr->p_block->range.filter.length; j++)
			REQUIRE(p_filter_kpr->p_block->tensor.cell_int[j] == 7*j + 2);

		check_and_finish(p_filter_kpr->p_block);

		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->filter_audit() == FILTER_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->can_filter(p_txn->p_block));

		CNT.destroy(p_filter_kpr);
		REQUIRE(p_filter_kpr == nullptr);

		REQUIRE(CNT.new_block(p_filter_kpr, CELL_TYPE_INTEGER, dim_t6.dim, FILL_INTEGER_FILTER, (bool *) &filter_v_z) == SERVICE_NO_ERROR);

		REQUIRE(p_filter_kpr != nullptr);
		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->status  == BLOCK_STATUS_READY);

		REQUIRE(p_filter_kpr->p_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->rank == 1);
		REQUIRE(p_filter_kpr->p_block->size == 120);
		REQUIRE(p_filter_kpr->p_block->num_attributes == 1);
		REQUIRE(p_filter_kpr->p_block->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->range.filter.one == 1);
		REQUIRE(p_filter_kpr->p_block->range.filter.length == 0);

		check_and_finish(p_filter_kpr->p_block);

		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->filter_audit() == FILTER_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->can_filter(p_txn->p_block));

		CNT.destroy(p_filter_kpr);
		REQUIRE(p_filter_kpr == nullptr);

		REQUIRE(CNT.new_block(p_filter_kpr, CELL_TYPE_INTEGER, dim_t6.dim, FILL_INTEGER_FILTER, (bool *) &filter_v_1) == SERVICE_NO_ERROR);

		REQUIRE(p_filter_kpr != nullptr);
		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->status  == BLOCK_STATUS_READY);

		REQUIRE(p_filter_kpr->p_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->rank == 1);
		REQUIRE(p_filter_kpr->p_block->size == 120);
		REQUIRE(p_filter_kpr->p_block->num_attributes == 1);
		REQUIRE(p_filter_kpr->p_block->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->range.filter.one == 1);
		REQUIRE(p_filter_kpr->p_block->range.filter.length == 120);
		for (int j = 0; j < p_filter_kpr->p_block->range.filter.length; j++)
			REQUIRE(p_filter_kpr->p_block->tensor.cell_int[j] == j);

		check_and_finish(p_filter_kpr->p_block);

		REQUIRE(p_filter_kpr->p_block != nullptr);
		REQUIRE(p_filter_kpr->p_block->has_NA == false);
		REQUIRE(p_filter_kpr->p_block->filter_audit() == FILTER_TYPE_INTEGER);
		REQUIRE(p_filter_kpr->p_block->can_filter(p_txn->p_block));

		CNT.destroy(p_filter_kpr);
		REQUIRE(p_filter_kpr == nullptr);
	}

	CNT.destroy(p_txn);
	REQUIRE(p_txn == nullptr);

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (2) Create a Kind or Tuple") {

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	GIVEN("We have 5 multiple purpose blocks") {
		pTransaction p_tx1, p_tx2, p_tx3, p_tx4, p_tx5;

		TensorDim dim_t1 {{27, 7, 3}}, dim_t2 {{3, 5, 4, 2, 0}}, dim_t3 {{10, 3, 0}}, dim_t4 {{2, 2, 3, 3, 1, 1}};

		AttributeMap att_bl = {};
		att_bl[BLOCK_ATTRIB_MIMETYPE] = "block of bool";

		REQUIRE(CNT.new_block(p_tx1, CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_tx1 != nullptr);

		REQUIRE(   CNT.new_block(p_tx2, CELL_TYPE_BOOLEAN, dim_t2.dim, FILL_NEW_WITH_ZERO, nullptr, 0, nullptr, ' ', &att_bl)
				== SERVICE_NO_ERROR);
		REQUIRE(p_tx2 != nullptr);
		REQUIRE(p_tx2->p_block != nullptr);
		REQUIRE(p_tx2->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tx3, CELL_TYPE_TIME, dim_t3.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_tx3 != nullptr);
		REQUIRE(p_tx3->p_block != nullptr);
		REQUIRE(p_tx3->status  == BLOCK_STATUS_READY);

		struct tm junk = {0};
		struct tm *timeinfo = &junk;

		char buffer[20] = {"2021-08-01 12:13:14"};
		char fmt[20]	= {"%Y-%m-%d %H:%M:%S"};

		REQUIRE(strptime(buffer, fmt, timeinfo) != nullptr);

		REQUIRE(timeinfo->tm_mday == 1);

		for (int i = 0; i < 30; i++) {
			timeinfo->tm_mday =  1 + (3*i % 29);
			timeinfo->tm_hour =  7 + (5*i % 7);
			timeinfo->tm_min  = 13 + (7*i % 31);
			p_tx3->p_block->tensor.cell_time[i] = timegm(timeinfo);
		}

		REQUIRE(CNT.new_block(p_tx4, CELL_TYPE_SINGLE, dim_t4.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_tx4 != nullptr);
		REQUIRE(p_tx4->p_block != nullptr);
		REQUIRE(p_tx4->status  == BLOCK_STATUS_READY);

		char const *text_file = "January February March April May June July August September October November December";

		REQUIRE(CNT.new_block(p_tx5, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_tx5 != nullptr);
		REQUIRE(p_tx5->p_block != nullptr);
		REQUIRE(p_tx5->status  == BLOCK_STATUS_READY);

		WHEN("we use them in Kinds and Tuples") {
			pTransaction p_tx_knd1, p_tx_knd2, p_tx_knd3;
			pTransaction p_tx_tup1, p_tx_tup2, p_tx_tup3;

			AttributeMap dims = {};
			dims [-1] = "color";
			AttributeMap att = {};
			att[BLOCK_ATTRIB_URL] = "who.knows.where";

			StaticBlockHeader p_hea1[5], p_hea2[5], p_hea3[5];
			pBlock			  p_blk1[5], p_blk2[5], p_blk3[5];

			Name p_names1[] = {"time", "text", "bool", "float"};
			Name p_names2[] = {"byte", "bool"};
			Name p_names3[] = {"time"};

			init_static_hea(p_hea1[0], p_blk1[0] = p_tx3->p_block);
			init_static_hea(p_hea1[1], p_blk1[1] = p_tx5->p_block);
			init_static_hea(p_hea1[2], p_blk1[2] = p_tx2->p_block);
			init_static_hea(p_hea1[3], p_blk1[3] = p_tx4->p_block);
			init_static_hea(p_hea2[0], p_blk2[0] = p_tx1->p_block);
			init_static_hea(p_hea2[1], p_blk2[1] = p_tx2->p_block);
			init_static_hea(p_hea3[0], p_blk3[0] = p_tx3->p_block);

			REQUIRE(CNT.new_block(p_tx_tup1, 4, p_hea1, p_names1, p_blk1, nullptr, nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_tx_tup2, 2, p_hea2, p_names2, p_blk2, nullptr, &att) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_tx_tup3, 1, p_hea3, p_names3, p_blk3, nullptr, &att) == SERVICE_NO_ERROR);

			REQUIRE(p_tx_tup1->p_block != nullptr);
			REQUIRE(p_tx_tup1->status  == BLOCK_STATUS_READY);
			REQUIRE(p_tx_tup2->p_block != nullptr);
			REQUIRE(p_tx_tup2->status  == BLOCK_STATUS_READY);
			REQUIRE(p_tx_tup3->p_block != nullptr);
			REQUIRE(p_tx_tup3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_hea2[0].range.dim[0] == 27);
			REQUIRE(p_hea2[0].range.dim[1] ==  7);
			REQUIRE(p_hea2[0].range.dim[2] ==  3);
			p_hea2[0].range.dim[2] = -1;

			REQUIRE(p_hea2[1].range.dim[0] == 3);
			REQUIRE(p_hea2[1].range.dim[1] == 5);
			REQUIRE(p_hea2[1].range.dim[2] == 4);
			REQUIRE(p_hea2[1].range.dim[3] == 2);
			p_hea2[1].range.dim[0] = -1;

			REQUIRE(p_hea3[0].range.dim[0] == 10);
			REQUIRE(p_hea3[0].range.dim[1] ==  3);
			p_hea3[0].range.dim[1] = -1;

			REQUIRE(CNT.new_block(p_tx_knd1, 4, p_hea1, p_names1, nullptr, &dims,   nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_tx_knd2, 2, p_hea2, p_names2, nullptr, nullptr, nullptr) == SERVICE_ERROR_BAD_KIND_ADD);
			REQUIRE(CNT.new_block(p_tx_knd2, 2, p_hea2, p_names2, nullptr, &dims,   nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_tx_knd3, 1, p_hea3, p_names3, nullptr, nullptr, &att)	 == SERVICE_ERROR_BAD_KIND_ADD);
			REQUIRE(CNT.new_block(p_tx_knd3, 1, p_hea3, p_names3, nullptr, &dims,   &att)	 == SERVICE_NO_ERROR);

			REQUIRE(p_tx_knd1->p_block != nullptr);
			REQUIRE(p_tx_knd1->status  == BLOCK_STATUS_READY);
			REQUIRE(p_tx_knd2->p_block != nullptr);
			REQUIRE(p_tx_knd2->status  == BLOCK_STATUS_READY);
			REQUIRE(p_tx_knd3->p_block != nullptr);
			REQUIRE(p_tx_knd3->status  == BLOCK_STATUS_READY);

			THEN("we get the expected blocks") {
				REQUIRE(p_tx_tup1->p_block->cell_type	 == CELL_TYPE_TUPLE_ITEM);
				REQUIRE(p_tx_tup1->p_block->rank		 == 1);
				REQUIRE(p_tx_tup1->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_tup1->p_block->size		 == 4);
				REQUIRE(p_tx_tup1->p_block->has_NA		 == false);

				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_TIME);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[0].rank	  == 2);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[0].dim[0]	  == 10);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[0].dim[1]	  ==  3);

				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[1].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[1].rank	  ==  1);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[1].dim[0]	  == 12);

				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].cell_type == CELL_TYPE_BOOLEAN);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].rank	  == 4);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].dim[0]	  == 3);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].dim[1]	  == 5);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].dim[2]	  == 4);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[2].dim[3]	  == 2);

				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].cell_type == CELL_TYPE_SINGLE);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].rank	  == 6);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[0]	  == 2);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[1]	  == 2);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[2]	  == 3);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[3]	  == 3);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[4]	  == 1);
				REQUIRE(p_tx_tup1->p_block->tensor.cell_item[3].dim[5]	  == 1);

				pTuple p_tuple = (pTuple) p_tx_tup1->p_block;
				pBlock p_block;

				REQUIRE(!strcmp(p_tuple->item_name(0), "time"));
				REQUIRE(!strcmp(p_tuple->item_name(1), "text"));
				REQUIRE(!strcmp(p_tuple->item_name(2), "bool"));
				REQUIRE(!strcmp(p_tuple->item_name(3), "float"));

				p_block = p_tuple->get_block(0);

				REQUIRE(p_block->cell_type			  == p_tx3->p_block->cell_type);
				REQUIRE(p_block->rank				  == p_tx3->p_block->rank);
				REQUIRE(p_block->total_bytes		  == p_tx3->p_block->total_bytes);
				REQUIRE(p_block->tensor.cell_time[0]  == p_tx3->p_block->tensor.cell_time[0]);
				REQUIRE(p_block->tensor.cell_time[17] == p_tx3->p_block->tensor.cell_time[17]);
				REQUIRE(p_block->tensor.cell_time[29] == p_tx3->p_block->tensor.cell_time[29]);

				p_block = p_tuple->get_block(1);

				REQUIRE(p_block->cell_type			 == p_tx5->p_block->cell_type);
				REQUIRE(p_block->range.dim[0]		 == p_tx5->p_block->range.dim[0]);
				REQUIRE(p_block->total_bytes		 == p_tx5->p_block->total_bytes);
				REQUIRE(p_block->tensor.cell_int[0]	 == p_tx5->p_block->tensor.cell_int[0]);
				REQUIRE(p_block->tensor.cell_int[11] == p_tx5->p_block->tensor.cell_int[11]);

				REQUIRE(strcmp(p_block->get_string(0), "January") == 0);
				REQUIRE(strcmp(p_block->get_string(7), "August")  == 0);

				p_block = p_tuple->get_block(2);

				REQUIRE(p_block->cell_type	  == p_tx2->p_block->cell_type);
				REQUIRE(p_block->range.dim[0] == p_tx2->p_block->range.dim[0]);
				REQUIRE(p_block->range.dim[1] == p_tx2->p_block->range.dim[1]);
				REQUIRE(p_block->range.dim[2] == p_tx2->p_block->range.dim[2]);
				REQUIRE(p_block->range.dim[3] == p_tx2->p_block->range.dim[3]);
				REQUIRE(p_block->total_bytes  == p_tx2->p_block->total_bytes);

				REQUIRE(strcmp(p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE), "block of bool") == 0);

				p_block = p_tuple->get_block(3);

				REQUIRE(p_block->cell_type	  == p_tx4->p_block->cell_type);
				REQUIRE(p_block->rank		  == 6);
				REQUIRE(p_block->range.dim[0] == p_tx4->p_block->range.dim[0]);
				REQUIRE(p_block->range.dim[1] == p_tx4->p_block->range.dim[1]);
				REQUIRE(p_block->range.dim[2] == p_tx4->p_block->range.dim[2]);
				REQUIRE(p_block->range.dim[3] == p_tx4->p_block->range.dim[3]);
				REQUIRE(p_block->range.dim[4] == p_tx4->p_block->range.dim[4]);
				REQUIRE(p_block->range.dim[5] == p_tx4->p_block->range.dim[5]);
				REQUIRE(p_block->total_bytes  == p_tx4->p_block->total_bytes);

				REQUIRE(p_tuple->is_a((pKind) p_tx_knd1->p_block));

				REQUIRE(p_tuple->audit() == MIXED_TYPE_TUPLE);

				REQUIRE(p_tx_tup2->p_block->cell_type	 == CELL_TYPE_TUPLE_ITEM);
				REQUIRE(p_tx_tup2->p_block->rank		 == 1);
				REQUIRE(p_tx_tup2->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_tup2->p_block->size		 == 2);
				REQUIRE(p_tx_tup2->p_block->has_NA		 == false);

				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[0].rank	  ==  3);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[0].dim[0]	  == 27);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[0].dim[1]	  ==  7);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[0].dim[2]	  ==  3);

				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].cell_type == CELL_TYPE_BOOLEAN);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].rank	  ==  4);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].dim[0]	  ==  3);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].dim[1]	  ==  5);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].dim[2]	  ==  4);
				REQUIRE(p_tx_tup2->p_block->tensor.cell_item[1].dim[3]	  ==  2);

				p_tuple = (pTuple) p_tx_tup2->p_block;

				REQUIRE(!strcmp(p_tuple->item_name(0), "byte"));
				REQUIRE(!strcmp(p_tuple->item_name(1), "bool"));

				p_block = p_tuple->get_block(0);

				REQUIRE(p_block->cell_type			  == p_tx1->p_block->cell_type);
				REQUIRE(p_block->rank				  == p_tx1->p_block->rank);
				REQUIRE(p_block->total_bytes		  == p_tx1->p_block->total_bytes);
				REQUIRE(p_block->tensor.cell_byte[0]  == p_tx1->p_block->tensor.cell_byte[0]);

				p_block = p_tuple->get_block(1);

				REQUIRE(p_block->cell_type			  == p_tx2->p_block->cell_type);
				REQUIRE(p_block->range.dim[0]		  == p_tx2->p_block->range.dim[0]);
				REQUIRE(p_block->total_bytes		  == p_tx2->p_block->total_bytes);
				REQUIRE(p_block->tensor.cell_int[0]	  == p_tx2->p_block->tensor.cell_int[0]);

				REQUIRE(strcmp(p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE), "block of bool") == 0);

				REQUIRE(p_tuple->is_a((pKind) p_tx_knd2->p_block));

				REQUIRE(p_tuple->audit() == MIXED_TYPE_TUPLE);

				REQUIRE(p_tx_tup3->p_block->cell_type	 == CELL_TYPE_TUPLE_ITEM);
				REQUIRE(p_tx_tup3->p_block->rank		 == 1);
				REQUIRE(p_tx_tup3->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_tup3->p_block->size		 == 1);
				REQUIRE(p_tx_tup3->p_block->has_NA		 == false);

				REQUIRE(p_tx_tup3->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_TIME);
				REQUIRE(p_tx_tup3->p_block->tensor.cell_item[0].rank	  ==  2);
				REQUIRE(p_tx_tup3->p_block->tensor.cell_item[0].dim[0]	  == 10);
				REQUIRE(p_tx_tup3->p_block->tensor.cell_item[0].dim[1]	  ==  3);

				p_tuple = (pTuple) p_tx_tup3->p_block;

				REQUIRE(!strcmp(p_tuple->item_name(0), "time"));

				p_block = p_tuple->get_block(0);

				REQUIRE(p_block->cell_type			  == p_tx3->p_block->cell_type);
				REQUIRE(p_block->rank				  == p_tx3->p_block->rank);
				REQUIRE(p_block->total_bytes		  == p_tx3->p_block->total_bytes);
				REQUIRE(p_block->tensor.cell_time[0]  == p_tx3->p_block->tensor.cell_time[0]);
				REQUIRE(p_block->tensor.cell_time[17] == p_tx3->p_block->tensor.cell_time[17]);
				REQUIRE(p_block->tensor.cell_time[29] == p_tx3->p_block->tensor.cell_time[29]);

				REQUIRE(p_tuple->is_a((pKind) p_tx_knd3->p_block));

				REQUIRE(p_tuple->audit() == MIXED_TYPE_TUPLE);

				REQUIRE(p_tx_knd1->p_block->cell_type	 == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_tx_knd1->p_block->rank		 == 1);
				REQUIRE(p_tx_knd1->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_knd1->p_block->size		 == 4);
				REQUIRE(p_tx_knd1->p_block->has_NA		 == false);

				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_TIME);
				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[0].rank	  == 2);

				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[1].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[1].rank	  ==  1);
				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[1].dim[0]	  == 12);

				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[2].cell_type == CELL_TYPE_BOOLEAN);
				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[2].rank	  == 4);

				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[3].cell_type == CELL_TYPE_SINGLE);
				REQUIRE(p_tx_knd1->p_block->tensor.cell_item[3].rank	  == 6);

				pKind p_kind = (pKind) p_tx_knd1->p_block;
				Dimensions dim1 = {}, dim2 = {}, dim3 = {};

				REQUIRE(!strcmp(p_kind->item_name(0), "time"));
				REQUIRE(!strcmp(p_kind->item_name(1), "text"));
				REQUIRE(!strcmp(p_kind->item_name(2), "bool"));
				REQUIRE(!strcmp(p_kind->item_name(3), "float"));
				p_kind->dimensions(dim1);

				REQUIRE(dim1.size() == 0);

				REQUIRE(p_kind->audit() == MIXED_TYPE_KIND);

				REQUIRE(p_tx_knd2->p_block->cell_type	 == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_tx_knd2->p_block->rank		 == 1);
				REQUIRE(p_tx_knd2->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_knd2->p_block->size		 == 2);
				REQUIRE(p_tx_knd2->p_block->has_NA		 == false);

				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[0].rank	  ==  3);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[0].dim[0]	  == 27);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[0].dim[1]	  ==  7);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[0].dim[2]	   <  0);

				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].cell_type == CELL_TYPE_BOOLEAN);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].rank	  ==  4);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].dim[0]	   <  0);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].dim[1]	  ==  5);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].dim[2]	  ==  4);
				REQUIRE(p_tx_knd2->p_block->tensor.cell_item[1].dim[3]	  ==  2);

				p_kind = (pKind) p_tx_knd2->p_block;

				REQUIRE(!strcmp(p_kind->item_name(0), "byte"));
				REQUIRE(!strcmp(p_kind->item_name(1), "bool"));

				p_kind->dimensions(dim2);

				REQUIRE(dim2.size() == 1);

				REQUIRE(dim2.find("color") != dim2.end());

				REQUIRE(p_kind->audit() == MIXED_TYPE_KIND);

				REQUIRE(p_tx_knd3->p_block->cell_type	 == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_tx_knd3->p_block->rank		 == 1);
				REQUIRE(p_tx_knd3->p_block->range.dim[0] == 1);
				REQUIRE(p_tx_knd3->p_block->size		 == 1);
				REQUIRE(p_tx_knd3->p_block->has_NA		 == false);

				REQUIRE(p_tx_knd3->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_TIME);
				REQUIRE(p_tx_knd3->p_block->tensor.cell_item[0].rank	  ==  2);
				REQUIRE(p_tx_knd3->p_block->tensor.cell_item[0].dim[0]	  == 10);
				REQUIRE(p_tx_knd3->p_block->tensor.cell_item[0].dim[1]	   <  0);

				p_kind = (pKind) p_tx_knd3->p_block;

				REQUIRE(!strcmp(p_kind->item_name(0), "time"));

				p_kind->dimensions(dim3);

				REQUIRE(dim3.size() == 1);

				REQUIRE(dim3.find("color") != dim2.end());

				REQUIRE(p_kind->audit() == MIXED_TYPE_KIND);
			}

			CNT.destroy_internal(p_tx_knd1);
			CNT.destroy_internal(p_tx_knd2);
			CNT.destroy_internal(p_tx_knd3);
			CNT.destroy_internal(p_tx_tup1);
			CNT.destroy_internal(p_tx_tup2);
			CNT.destroy_internal(p_tx_tup3);
		}

		CNT.destroy_internal(p_tx1);
		CNT.destroy_internal(p_tx2);
		CNT.destroy_internal(p_tx3);
		CNT.destroy_internal(p_tx4);
		CNT.destroy_internal(p_tx5);
	}

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (3) Create a Tensor by selecting rows (filtering) from another Tensor.") {
	pTransaction p_db_r1, p_db_r3, p_db_r6, p_st_r1, p_st_r3, p_st_r6, p_by_r1, p_by_r3, p_by_r6;
	pTransaction p_if_r1, p_if_r3, p_if_r6, p_bf_r1, p_bf_r3, p_bf_r6;

	TensorDim dim_r1 {{107, 0}}, dim_r3 {{17, 9, 3, 0}}, dim_r6 {{2, 3, 2, 5, 2, 7}};

	AttributeMap old_str, new_str, no_str;

	old_str [256] = "Life's but a walking shadow";		// Both old_str and new_str have the same number of chars
	old_str [313] = "... a poor player";
	old_str [921] = "that struts and frets his hour";
	old_str [222] = "upon the stage and";
	old_str [321] = "then ...";

	new_str [921] = "is heard nomore ...";
	new_str [313] = "It's a tale..";
	new_str [358] = "told by an idiot..";
	new_str [222] = "full of sound and fury..";
	new_str [676] = "signifying ..";
	new_str [321] = "NULL";

	no_str [123] = (char *) nullptr;
	no_str [456] = "";

	const char *month[12] = {"January", "February", "March", "April", "May", "June", "July", "August",
							 "September", "October", "November", "December"};

	bool buff_1k[1024] = {false};

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	GIVEN("A set of 9 blocks of 3 types x 3 ranks") {
		REQUIRE(   CNT.new_block(p_db_r1, CELL_TYPE_DOUBLE, dim_r1.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &old_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_db_r1 != nullptr);
		REQUIRE(p_db_r1->p_block != nullptr);
		REQUIRE(p_db_r1->status  == BLOCK_STATUS_READY);

		REQUIRE(p_db_r1->p_block->size == 107);

		REQUIRE(   CNT.new_block(p_db_r3, CELL_TYPE_DOUBLE, dim_r3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n',  &no_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_db_r3 != nullptr);
		REQUIRE(p_db_r3->p_block != nullptr);
		REQUIRE(p_db_r3->status  == BLOCK_STATUS_READY);

		REQUIRE(p_db_r3->p_block->size == 459);

		REQUIRE(CNT.new_block(p_db_r6, CELL_TYPE_DOUBLE, dim_r6.dim) == SERVICE_NO_ERROR);

		REQUIRE(p_db_r6 != nullptr);
		REQUIRE(p_db_r6->p_block != nullptr);
		REQUIRE(p_db_r6->status  == BLOCK_STATUS_READY);

		REQUIRE(p_db_r6->p_block->size == 840);

		REQUIRE(   CNT.new_block(p_st_r1, CELL_TYPE_STRING, dim_r1.dim, FILL_NEW_DONT_FILL, nullptr, 256, nullptr, '\n', &no_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_st_r1 != nullptr);
		REQUIRE(p_st_r1->p_block != nullptr);
		REQUIRE(p_st_r1->status  == BLOCK_STATUS_READY);

		REQUIRE(p_st_r1->p_block->size == 107);

		REQUIRE(CNT.new_block(p_st_r3, CELL_TYPE_STRING, dim_r3.dim, FILL_NEW_DONT_FILL, nullptr, 256) == SERVICE_NO_ERROR);

		REQUIRE(p_st_r3 != nullptr);
		REQUIRE(p_st_r3->p_block != nullptr);
		REQUIRE(p_st_r3->status  == BLOCK_STATUS_READY);

		REQUIRE(p_st_r3->p_block->size == 459);

		REQUIRE(   CNT.new_block(p_st_r6, CELL_TYPE_STRING, dim_r6.dim, FILL_NEW_DONT_FILL, nullptr, 256, nullptr, '\n', &old_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_st_r6 != nullptr);
		REQUIRE(p_st_r6->p_block != nullptr);
		REQUIRE(p_st_r6->status  == BLOCK_STATUS_READY);

		REQUIRE(p_st_r6->p_block->size == 840);

		REQUIRE(CNT.new_block(p_by_r1, CELL_TYPE_BYTE, dim_r1.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);

		REQUIRE(p_by_r1 != nullptr);
		REQUIRE(p_by_r1->p_block != nullptr);
		REQUIRE(p_by_r1->status  == BLOCK_STATUS_READY);

		REQUIRE(p_by_r1->p_block->size == 107);

		REQUIRE(   CNT.new_block(p_by_r3, CELL_TYPE_BYTE, dim_r3.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &old_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_by_r3 != nullptr);
		REQUIRE(p_by_r3->p_block != nullptr);
		REQUIRE(p_by_r3->status  == BLOCK_STATUS_READY);

		REQUIRE(p_by_r3->p_block->size == 459);

		REQUIRE(   CNT.new_block(p_by_r6, CELL_TYPE_BYTE, dim_r6.dim, FILL_NEW_DONT_FILL, nullptr, 0, nullptr, '\n', &no_str)
				== SERVICE_NO_ERROR);

		REQUIRE(p_by_r6 != nullptr);
		REQUIRE(p_by_r6->p_block != nullptr);
		REQUIRE(p_by_r6->status  == BLOCK_STATUS_READY);

		REQUIRE(p_by_r6->p_block->size == 840);

		int index[6];

		for (int i = 0; i < 107; i++) {
			index[0] = i;

			p_db_r1->p_block->tensor.cell_double[p_db_r1->p_block->get_offset((int *) &index)] = i/10.0;
			p_by_r1->p_block->tensor.cell_byte  [p_by_r1->p_block->get_offset((int *) &index)] = 7 + 2*i;

			p_st_r1->p_block->set_string((int *) &index, month[i % 12]);
		}

		REQUIRE(p_db_r1->p_block->tensor.cell_double[33] == 3.3);
		REQUIRE(p_by_r1->p_block->tensor.cell_byte  [33] == 73);
		REQUIRE(!strcmp(p_st_r1->p_block->get_string(15), "April"));
		REQUIRE(!p_st_r1->p_block->p_string_buffer()->alloc_failed);

		check_and_finish(p_db_r1->p_block);
		check_and_finish(p_st_r1->p_block);
		check_and_finish(p_by_r1->p_block);

		for (int i = 0; i < 17; i++) {
			for (int j = 0; j < 9; j++) {
				for (int k = 0; k < 3; k++) {
					index[0] = i;
					index[1] = j;
					index[2] = k;

					p_db_r3->p_block->tensor.cell_double[p_db_r3->p_block->get_offset((int *) &index)] = 1e6*i + 1e3*j + k;
					p_by_r3->p_block->tensor.cell_byte  [p_by_r3->p_block->get_offset((int *) &index)] = 7*i + 5*j + 3*k;

					p_st_r3->p_block->set_string((int *) &index, month[(7*i + 5*j + 3*k) % 12]);
				}
			}
		}

		REQUIRE(p_db_r3->p_block->tensor.cell_double[334] == 12003001.0);
		REQUIRE(p_by_r3->p_block->tensor.cell_byte  [334] == 102);
		REQUIRE(!strcmp(p_st_r3->p_block->get_string(334), "July"));
		REQUIRE(!p_st_r3->p_block->p_string_buffer()->alloc_failed);

		check_and_finish(p_db_r3->p_block);
		check_and_finish(p_st_r3->p_block);
		check_and_finish(p_by_r3->p_block);

		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 3; j++) {
				for (int k = 0; k < 2; k++) {
					for (int u = 0; u < 5; u++) {
						for (int v = 0; v < 2; v++) {
							for (int w = 0; w < 7; w++) {
								index[0] = i;
								index[1] = j;
								index[2] = k;
								index[3] = u;
								index[4] = v;
								index[5] = w;

								p_db_r6->p_block->tensor.cell_double[p_db_r6->p_block->get_offset((int *) &index)]
									= 1e8*i + 1e7*j + 1e6*k + 100*u + 11*v - w;
								p_by_r6->p_block->tensor.cell_byte  [p_by_r6->p_block->get_offset((int *) &index)]
									= 45*i + 34*j + 23*k + 12*u + 6*v + 3*w;

								p_st_r6->p_block->set_string((int *) &index, month[(45*i + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]);
							}
						}
					}
				}
			}
		}

		REQUIRE(p_db_r6->p_block->tensor.cell_double[753] == 120000307.0);
		REQUIRE(p_by_r6->p_block->tensor.cell_byte  [753] == 167);
		REQUIRE(!strcmp(p_st_r6->p_block->get_string(753), "December"));
		REQUIRE(!p_st_r6->p_block->p_string_buffer()->alloc_failed);

		check_and_finish(p_db_r6->p_block);
		check_and_finish(p_st_r6->p_block);
		check_and_finish(p_by_r6->p_block);

		dim_r1.dim[1] = 0;
		dim_r3.dim[1] = 0;
		dim_r6.dim[1] = 0;

		REQUIRE(CNT.new_block(p_if_r1, CELL_TYPE_INTEGER, dim_r1.dim, FILL_INTEGER_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_if_r1 != nullptr);
		REQUIRE(p_if_r1->p_block != nullptr);
		REQUIRE(p_if_r1->status  == BLOCK_STATUS_READY);

		REQUIRE(p_if_r1->p_block->can_filter(p_db_r1->p_block));
		REQUIRE(p_if_r1->p_block->can_filter(p_st_r1->p_block));
		REQUIRE(p_if_r1->p_block->can_filter(p_by_r1->p_block));

		REQUIRE(CNT.new_block(p_if_r3, CELL_TYPE_INTEGER, dim_r3.dim, FILL_INTEGER_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_if_r3 != nullptr);
		REQUIRE(p_if_r3->p_block != nullptr);
		REQUIRE(p_if_r3->status  == BLOCK_STATUS_READY);

		REQUIRE(p_if_r3->p_block->can_filter(p_db_r3->p_block));
		REQUIRE(p_if_r3->p_block->can_filter(p_st_r3->p_block));
		REQUIRE(p_if_r3->p_block->can_filter(p_by_r3->p_block));

		REQUIRE(CNT.new_block(p_if_r6, CELL_TYPE_INTEGER, dim_r6.dim, FILL_INTEGER_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_if_r6 != nullptr);
		REQUIRE(p_if_r6->p_block != nullptr);
		REQUIRE(p_if_r6->status  == BLOCK_STATUS_READY);

		REQUIRE(p_if_r6->p_block->can_filter(p_db_r6->p_block));
		REQUIRE(p_if_r6->p_block->can_filter(p_st_r6->p_block));
		REQUIRE(p_if_r6->p_block->can_filter(p_by_r6->p_block));

		REQUIRE(CNT.new_block(p_bf_r1, CELL_TYPE_BYTE_BOOLEAN, dim_r1.dim, FILL_BOOLEAN_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_bf_r1 != nullptr);
		REQUIRE(p_bf_r1->p_block != nullptr);
		REQUIRE(p_bf_r1->status  == BLOCK_STATUS_READY);

		REQUIRE(p_bf_r1->p_block->can_filter(p_db_r1->p_block));
		REQUIRE(p_bf_r1->p_block->can_filter(p_st_r1->p_block));
		REQUIRE(p_bf_r1->p_block->can_filter(p_by_r1->p_block));

		REQUIRE(CNT.new_block(p_bf_r3, CELL_TYPE_BYTE_BOOLEAN, dim_r3.dim, FILL_BOOLEAN_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_bf_r3 != nullptr);
		REQUIRE(p_bf_r3->p_block != nullptr);
		REQUIRE(p_bf_r3->status  == BLOCK_STATUS_READY);

		REQUIRE(p_bf_r3->p_block->can_filter(p_db_r3->p_block));
		REQUIRE(p_bf_r3->p_block->can_filter(p_st_r3->p_block));
		REQUIRE(p_bf_r3->p_block->can_filter(p_by_r3->p_block));

		REQUIRE(CNT.new_block(p_bf_r6, CELL_TYPE_BYTE_BOOLEAN, dim_r6.dim, FILL_BOOLEAN_FILTER, (bool *) &buff_1k) == SERVICE_NO_ERROR);

		REQUIRE(p_bf_r6 != nullptr);
		REQUIRE(p_bf_r6->p_block != nullptr);
		REQUIRE(p_bf_r6->status  == BLOCK_STATUS_READY);

		REQUIRE(p_bf_r6->p_block->can_filter(p_db_r6->p_block));
		REQUIRE(p_bf_r6->p_block->can_filter(p_st_r6->p_block));
		REQUIRE(p_bf_r6->p_block->can_filter(p_by_r6->p_block));

		WHEN("I give wrong arguments, I get nullptr.") {
			pTransaction pcp;

			REQUIRE(CNT.new_block(pcp, (pBlock) nullptr, (pBlock) nullptr) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, p_bf_r3->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, p_bf_r6->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, p_if_r3->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, p_if_r6->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, p_bf_r1->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, p_bf_r6->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, p_if_r1->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, p_if_r6->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, p_bf_r1->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, p_bf_r3->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, p_if_r1->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, p_if_r3->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			AttributeMap all_att {};

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_db_r1->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_by_r3->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);

			REQUIRE(CNT.new_block(pcp, p_st_r6->p_block, (pBlock) nullptr, &all_att) == SERVICE_ERROR_NEW_BLOCK_ARGS);
			REQUIRE(pcp == nullptr);
		}

		WHEN("I create identical blocks") {
			pTransaction pcp_db_r1, pcp_db_r3, pcp_db_r6, pcp_st_r1, pcp_st_r3, pcp_st_r6, pcp_by_r1, pcp_by_r3, pcp_by_r6;

			REQUIRE(CNT.new_block(pcp_db_r1, p_db_r1->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r1 != nullptr);
			REQUIRE(pcp_db_r1->p_block != nullptr);
			REQUIRE(pcp_db_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_db_r3, p_db_r3->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r3 != nullptr);
			REQUIRE(pcp_db_r3->p_block != nullptr);
			REQUIRE(pcp_db_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_db_r6, p_db_r6->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r6 != nullptr);
			REQUIRE(pcp_db_r6->p_block != nullptr);
			REQUIRE(pcp_db_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r6->p_block->size == 840);

			REQUIRE(CNT.new_block(pcp_st_r1, p_st_r1->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r1 != nullptr);
			REQUIRE(pcp_st_r1->p_block != nullptr);
			REQUIRE(pcp_st_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_st_r3, p_st_r3->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r3 != nullptr);
			REQUIRE(pcp_st_r3->p_block != nullptr);
			REQUIRE(pcp_st_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_st_r6, p_st_r6->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r6 != nullptr);
			REQUIRE(pcp_st_r6->p_block != nullptr);
			REQUIRE(pcp_st_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r6->p_block->size == 840);

			REQUIRE(CNT.new_block(pcp_by_r1, p_by_r1->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r1 != nullptr);
			REQUIRE(pcp_by_r1->p_block != nullptr);
			REQUIRE(pcp_by_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_by_r3, p_by_r3->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r3 != nullptr);
			REQUIRE(pcp_by_r3->p_block != nullptr);
			REQUIRE(pcp_by_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_by_r6, p_by_r6->p_block, (pBlock) nullptr) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r6 != nullptr);
			REQUIRE(pcp_by_r6->p_block != nullptr);
			REQUIRE(pcp_by_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r6->p_block->size == 840);

			THEN("Their structure is as expected.") {
				REQUIRE(pcp_db_r1->p_block->cell_type	 == p_db_r1->p_block->cell_type);
				REQUIRE(pcp_st_r6->p_block->cell_type	 == p_st_r6->p_block->cell_type);
				REQUIRE(pcp_by_r3->p_block->rank		 == p_by_r3->p_block->rank);
				REQUIRE(pcp_db_r1->p_block->rank		 == p_db_r1->p_block->rank);
				REQUIRE(pcp_st_r6->p_block->range.dim[0] == p_st_r6->p_block->range.dim[0]);

				REQUIRE(pcp_by_r3->p_block->range.dim[2]   == p_by_r3->p_block->range.dim[2]);
				REQUIRE(pcp_db_r1->p_block->range.dim[3]   == p_db_r1->p_block->range.dim[3]);
				REQUIRE(pcp_st_r6->p_block->size		   == p_st_r6->p_block->size);
				REQUIRE(pcp_by_r3->p_block->size		   == p_by_r3->p_block->size);
				REQUIRE(pcp_db_r1->p_block->num_attributes == p_db_r1->p_block->num_attributes);

				REQUIRE(pcp_st_r6->p_block->num_attributes == p_st_r6->p_block->num_attributes);
				REQUIRE(pcp_by_r3->p_block->total_bytes	   == p_by_r3->p_block->total_bytes);
				REQUIRE(pcp_db_r1->p_block->total_bytes	   == p_db_r1->p_block->total_bytes);
				REQUIRE(pcp_st_r6->p_block->has_NA		   == p_st_r6->p_block->has_NA);
				REQUIRE(pcp_by_r3->p_block->has_NA		   == p_by_r3->p_block->has_NA);

				REQUIRE(pcp_db_r1->p_block->has_NA				   == p_db_r1->p_block->has_NA);
				REQUIRE(pcp_st_r6->p_block->tensor.cell_int [67]   == p_st_r6->p_block->tensor.cell_int [67]);
				REQUIRE(pcp_by_r3->p_block->tensor.cell_byte[13]   == p_by_r3->p_block->tensor.cell_byte[13]);
				REQUIRE(pcp_db_r1->p_block->tensor.cell_double[33] == p_db_r1->p_block->tensor.cell_double[33]);
				REQUIRE(pcp_st_r6->p_block->tensor.cell_int[27]	   == p_st_r6->p_block->tensor.cell_int[27]);

				REQUIRE(pcp_by_r3->p_block->p_attribute_keys()[0]				  == p_by_r3->p_block->p_attribute_keys()[0]);
				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->stop_check_4_match == p_db_r1->p_block->p_string_buffer()->stop_check_4_match);
				REQUIRE(pcp_st_r6->p_block->p_attribute_keys()[0]				  == p_st_r6->p_block->p_attribute_keys()[0]);
				REQUIRE(pcp_by_r3->p_block->p_string_buffer()->alloc_failed		  == p_by_r3->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->last_idx			  == p_db_r1->p_block->p_string_buffer()->last_idx);

				REQUIRE(pcp_st_r6->p_block->p_string_buffer()->last_idx		== p_st_r6->p_block->p_string_buffer()->last_idx);
				REQUIRE(pcp_by_r3->p_block->p_string_buffer()->last_idx		== p_by_r3->p_block->p_string_buffer()->last_idx);
				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->buffer_size	== p_db_r1->p_block->p_string_buffer()->buffer_size);
				REQUIRE(pcp_st_r6->p_block->p_string_buffer()->buffer_size	== p_st_r6->p_block->p_string_buffer()->buffer_size);
				REQUIRE(pcp_by_r3->p_block->p_string_buffer()->buffer[3]	== p_by_r3->p_block->p_string_buffer()->buffer[3]);

				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->buffer[4]  == p_db_r1->p_block->p_string_buffer()->buffer[4]);
				REQUIRE(pcp_st_r6->p_block->p_string_buffer()->buffer[20] == p_st_r6->p_block->p_string_buffer()->buffer[20]);

				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(256), "Life's but a walking shadow"));
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_attribute(313), "... a poor player"));
				REQUIRE(!strcmp(pcp_by_r3->p_block->get_attribute(921), "that struts and frets his hour"));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(222), "upon the stage and"));
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_attribute(321), "then ..."));
				REQUIRE(pcp_by_r3->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) == nullptr);
				REQUIRE(pcp_db_r1->p_block->get_attribute(9999) == nullptr);
				REQUIRE(pcp_st_r6->p_block->get_attribute(486)	 == nullptr);
				REQUIRE(pcp_by_r3->p_block->get_attribute(487)	 == nullptr);

				REQUIRE(!strcmp(pcp_db_r3->p_block->get_attribute(123), ""));
				REQUIRE(!strcmp(pcp_st_r1->p_block->get_attribute(456), ""));
				REQUIRE(!strcmp(pcp_by_r6->p_block->get_attribute(123), ""));
				REQUIRE(pcp_db_r3->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) == nullptr);
				REQUIRE(pcp_st_r1->p_block->get_attribute(9999) == nullptr);
				REQUIRE(pcp_by_r6->p_block->get_attribute(487)  == nullptr);

				REQUIRE(!strcmp(pcp_db_r6->p_block->get_attribute(BLOCK_ATTRIB_EMPTY), ""));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(BLOCK_ATTRIB_EMPTY), ""));
				REQUIRE(!strcmp(pcp_by_r1->p_block->get_attribute(BLOCK_ATTRIB_EMPTY), ""));
				REQUIRE(pcp_db_r6->p_block->get_attribute(9999) == nullptr);
				REQUIRE(pcp_st_r3->p_block->get_attribute(9999) == nullptr);
				REQUIRE(pcp_by_r1->p_block->get_attribute(487)	 == nullptr);

				REQUIRE(pcp_db_r1->p_block->tensor.cell_double[33] == 3.3);
				REQUIRE(pcp_by_r1->p_block->tensor.cell_byte  [33] == 73);
				REQUIRE(!strcmp(pcp_st_r1->p_block->get_string(15), "April"));
				REQUIRE(!pcp_st_r1->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(pcp_db_r1->p_block);
				check_and_finish(pcp_st_r1->p_block);
				check_and_finish(pcp_by_r1->p_block);

				REQUIRE(pcp_db_r3->p_block->tensor.cell_double[334] == 12003001.0);
				REQUIRE(pcp_by_r3->p_block->tensor.cell_byte  [334] == 102);
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_string(334), "July"));
				REQUIRE(!pcp_st_r3->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(pcp_db_r3->p_block);
				check_and_finish(pcp_st_r3->p_block);
				check_and_finish(pcp_by_r3->p_block);

				REQUIRE(pcp_db_r6->p_block->tensor.cell_double[753] == 120000307.0);
				REQUIRE(pcp_by_r6->p_block->tensor.cell_byte  [753] == 167);
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_string(753), "December"));
				REQUIRE(!pcp_st_r6->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(pcp_db_r6->p_block);
				check_and_finish(pcp_st_r6->p_block);
				check_and_finish(pcp_by_r6->p_block);
			}

			CNT.destroy(pcp_db_r1);
			REQUIRE(pcp_db_r1 == nullptr);

			CNT.destroy(pcp_db_r3);
			REQUIRE(pcp_db_r3 == nullptr);

			CNT.destroy(pcp_db_r6);
			REQUIRE(pcp_db_r6 == nullptr);

			CNT.destroy(pcp_st_r1);
			REQUIRE(pcp_st_r1 == nullptr);

			CNT.destroy(pcp_st_r3);
			REQUIRE(pcp_st_r3 == nullptr);

			CNT.destroy(pcp_st_r6);
			REQUIRE(pcp_st_r6 == nullptr);

			CNT.destroy(pcp_by_r1);
			REQUIRE(pcp_by_r1 == nullptr);

			CNT.destroy(pcp_by_r3);
			REQUIRE(pcp_by_r3 == nullptr);

			CNT.destroy(pcp_by_r6);
			REQUIRE(pcp_by_r6 == nullptr);
		}

		WHEN("I create identical blocks with different attributes") {
			pTransaction pcp_db_r1, pcp_db_r3, pcp_db_r6, pcp_st_r1, pcp_st_r3, pcp_st_r6, pcp_by_r1, pcp_by_r3, pcp_by_r6;

			REQUIRE(CNT.new_block(pcp_db_r1, p_db_r1->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r1 != nullptr);
			REQUIRE(pcp_db_r1->p_block != nullptr);
			REQUIRE(pcp_db_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_db_r3, p_db_r3->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r3 != nullptr);
			REQUIRE(pcp_db_r3->p_block != nullptr);
			REQUIRE(pcp_db_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_db_r6, p_db_r6->p_block, (pBlock) nullptr, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_db_r6 != nullptr);
			REQUIRE(pcp_db_r6->p_block != nullptr);
			REQUIRE(pcp_db_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_db_r6->p_block->size == 840);

			REQUIRE(CNT.new_block(pcp_st_r1, p_st_r1->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r1 != nullptr);
			REQUIRE(pcp_st_r1->p_block != nullptr);
			REQUIRE(pcp_st_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_st_r3, p_st_r3->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r3 != nullptr);
			REQUIRE(pcp_st_r3->p_block != nullptr);
			REQUIRE(pcp_st_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_st_r6, p_st_r6->p_block, (pBlock) nullptr, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_st_r6 != nullptr);
			REQUIRE(pcp_st_r6->p_block != nullptr);
			REQUIRE(pcp_st_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_st_r6->p_block->size == 840);

			REQUIRE(CNT.new_block(pcp_by_r1, p_by_r1->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r1 != nullptr);
			REQUIRE(pcp_by_r1->p_block != nullptr);
			REQUIRE(pcp_by_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(pcp_by_r3, p_by_r3->p_block, (pBlock) nullptr, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r3 != nullptr);
			REQUIRE(pcp_by_r3->p_block != nullptr);
			REQUIRE(pcp_by_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(pcp_by_r6, p_by_r6->p_block, (pBlock) nullptr, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(pcp_by_r6 != nullptr);
			REQUIRE(pcp_by_r6->p_block != nullptr);
			REQUIRE(pcp_by_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(pcp_by_r6->p_block->size == 840);

			THEN("Their structure is as expected.") {
				REQUIRE(pcp_db_r1->p_block->cell_type	 == p_db_r1->p_block->cell_type);
				REQUIRE(pcp_st_r6->p_block->cell_type	 == p_st_r6->p_block->cell_type);
				REQUIRE(pcp_by_r3->p_block->rank		 == p_by_r3->p_block->rank);
				REQUIRE(pcp_db_r1->p_block->rank		 == p_db_r1->p_block->rank);
				REQUIRE(pcp_st_r6->p_block->range.dim[0] == p_st_r6->p_block->range.dim[0]);

				REQUIRE(pcp_by_r3->p_block->range.dim[2]   == p_by_r3->p_block->range.dim[2]);
				REQUIRE(pcp_db_r1->p_block->range.dim[3]   == p_db_r1->p_block->range.dim[3]);
				REQUIRE(pcp_st_r6->p_block->size		   == p_st_r6->p_block->size);
				REQUIRE(pcp_by_r3->p_block->size		   == p_by_r3->p_block->size);
				REQUIRE(pcp_db_r1->p_block->num_attributes == 6);

				REQUIRE(pcp_st_r6->p_block->num_attributes == 2);
				REQUIRE(pcp_by_r3->p_block->total_bytes	   == p_by_r3->p_block->total_bytes);
				REQUIRE(pcp_db_r1->p_block->total_bytes	   == p_db_r1->p_block->total_bytes);	// Same number of chars in old and new
				REQUIRE(pcp_st_r6->p_block->has_NA		   == p_st_r6->p_block->has_NA);
				REQUIRE(pcp_by_r3->p_block->has_NA		   == p_by_r3->p_block->has_NA);

				REQUIRE(pcp_db_r1->p_block->has_NA				   == p_db_r1->p_block->has_NA);
				REQUIRE(pcp_st_r6->p_block->tensor.cell_int [67]   == p_st_r6->p_block->tensor.cell_int [67]);
				REQUIRE(pcp_by_r3->p_block->tensor.cell_byte[13]   == p_by_r3->p_block->tensor.cell_byte[13]);
				REQUIRE(pcp_db_r1->p_block->tensor.cell_double[33] == p_db_r1->p_block->tensor.cell_double[33]);
				REQUIRE(pcp_st_r6->p_block->tensor.cell_int[27]	   == p_st_r6->p_block->tensor.cell_int[27]);

				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->stop_check_4_match == p_db_r1->p_block->p_string_buffer()->stop_check_4_match);
				REQUIRE(pcp_by_r3->p_block->p_string_buffer()->alloc_failed		  == p_by_r3->p_block->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_st_r1->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_by_r1->p_block->get_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_db_r3->p_block->get_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(676), "signifying .."));
				REQUIRE(pcp_by_r3->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) == nullptr);
				REQUIRE(pcp_db_r1->p_block->get_attribute(9999) == nullptr);
				REQUIRE(pcp_st_r1->p_block->get_attribute(486)	 == nullptr);
				REQUIRE(pcp_by_r1->p_block->get_attribute(487)	 == nullptr);
				REQUIRE(!strcmp(pcp_db_r3->p_block->get_attribute(321), "NULL"));

				REQUIRE(!strcmp(pcp_st_r6->p_block->get_attribute(456), ""));
				REQUIRE(!strcmp(pcp_by_r6->p_block->get_attribute(123), ""));
				REQUIRE(pcp_db_r6->p_block->get_attribute(BLOCK_ATTRIB_EMPTY) == nullptr);
				REQUIRE(pcp_st_r6->p_block->get_attribute(9999) == nullptr);

				REQUIRE(pcp_db_r1->p_block->tensor.cell_double[33] == 3.3);
				REQUIRE(pcp_by_r1->p_block->tensor.cell_byte  [33] == 73);
				REQUIRE(!strcmp(pcp_st_r1->p_block->get_string(15), "April"));
				REQUIRE(!pcp_st_r1->p_block->p_string_buffer()->alloc_failed);

				// Not a string, from old_str to new_str:
				REQUIRE(pcp_db_r1->p_block->total_bytes					   == p_db_r1->p_block->total_bytes);
				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->buffer_size == p_db_r1->p_block->p_string_buffer()->buffer_size - 8);
				REQUIRE(pcp_db_r1->p_block->p_string_buffer()->last_idx	   == p_db_r1->p_block->p_string_buffer()->last_idx - 8);

				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(676), "signifying .."));
				REQUIRE(!strcmp(pcp_db_r1->p_block->get_attribute(321), "NULL"));

				// Not a string, from nullptr to new_str:
				REQUIRE(pcp_by_r1->p_block->total_bytes					   == p_by_r1->p_block->total_bytes + 8*5 + 97);
				REQUIRE(pcp_by_r1->p_block->p_string_buffer()->buffer_size == pcp_db_r1->p_block->p_string_buffer()->buffer_size);
				REQUIRE(pcp_by_r1->p_block->p_string_buffer()->last_idx	   == pcp_db_r1->p_block->p_string_buffer()->last_idx);

				// String, from no_str to new_str:
				REQUIRE(pcp_st_r1->p_block->total_bytes	   == p_st_r1->p_block->total_bytes + 8*4 + 97);
				REQUIRE(pcp_st_r1->p_block->num_attributes == p_st_r1->p_block->num_attributes + 4);

				REQUIRE(pcp_st_r1->p_block->p_string_buffer()->buffer_size == p_st_r1->p_block->p_string_buffer()->buffer_size + 97);

				// String, from nullptr to new_str:
				REQUIRE(pcp_st_r3->p_block->total_bytes					   == p_st_r3->p_block->total_bytes + 8*5 + 97);
				REQUIRE(pcp_st_r3->p_block->p_string_buffer()->buffer_size == p_st_r3->p_block->p_string_buffer()->buffer_size + 97);

				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(676), "signifying .."));
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_attribute(321), "NULL"));

				// String, from old_str to no_str:
				REQUIRE(pcp_st_r6->p_block->total_bytes					   == p_st_r6->p_block->total_bytes - 8*3);
				REQUIRE(pcp_st_r6->p_block->p_string_buffer()->buffer_size == p_st_r6->p_block->p_string_buffer()->buffer_size);
				REQUIRE(pcp_st_r6->p_block->p_string_buffer()->last_idx	   == p_st_r6->p_block->p_string_buffer()->last_idx);
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_attribute(456), ""));
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_attribute(123), ""));
				REQUIRE(pcp_st_r6->p_block->get_attribute(654) == nullptr);

				for (int i = 0; i < 10; i++) {
					REQUIRE(pcp_st_r1->p_block->tensor.cell_int[i] == p_st_r1->p_block->tensor.cell_int[i]);
					REQUIRE(pcp_st_r3->p_block->tensor.cell_int[i] == p_st_r3->p_block->tensor.cell_int[i]);
					REQUIRE(pcp_st_r6->p_block->tensor.cell_int[i] == p_st_r6->p_block->tensor.cell_int[i]);
				}

				check_and_finish(pcp_db_r1->p_block);
				check_and_finish(pcp_st_r1->p_block);
				check_and_finish(pcp_by_r1->p_block);

				REQUIRE(pcp_db_r3->p_block->tensor.cell_double[334] == 12003001.0);
				REQUIRE(pcp_by_r3->p_block->tensor.cell_byte  [334] == 102);
				REQUIRE(!strcmp(pcp_st_r3->p_block->get_string(334), "July"));
				REQUIRE(!pcp_st_r3->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(pcp_db_r3->p_block);
				check_and_finish(pcp_st_r3->p_block);
				check_and_finish(pcp_by_r3->p_block);

				REQUIRE(pcp_db_r6->p_block->tensor.cell_double[753] == 120000307.0);
				REQUIRE(pcp_by_r6->p_block->tensor.cell_byte  [753] == 167);
				REQUIRE(!strcmp(pcp_st_r6->p_block->get_string(753), "December"));
				REQUIRE(!pcp_st_r6->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(pcp_db_r6->p_block);
				check_and_finish(pcp_st_r6->p_block);
				check_and_finish(pcp_by_r6->p_block);
			}

			CNT.destroy(pcp_db_r1);
			REQUIRE(pcp_db_r1 == nullptr);

			CNT.destroy(pcp_db_r3);
			REQUIRE(pcp_db_r3 == nullptr);

			CNT.destroy(pcp_db_r6);
			REQUIRE(pcp_db_r6 == nullptr);

			CNT.destroy(pcp_st_r1);
			REQUIRE(pcp_st_r1 == nullptr);

			CNT.destroy(pcp_st_r3);
			REQUIRE(pcp_st_r3 == nullptr);

			CNT.destroy(pcp_st_r6);
			REQUIRE(pcp_st_r6 == nullptr);

			CNT.destroy(pcp_by_r1);
			REQUIRE(pcp_by_r1 == nullptr);

			CNT.destroy(pcp_by_r3);
			REQUIRE(pcp_by_r3 == nullptr);

			CNT.destroy(pcp_by_r6);
			REQUIRE(pcp_by_r6 == nullptr);
		}

		WHEN("I filter with all combinations of blocks an filters") {
			pTransaction p_pa_db_r1, p_pa_db_r3, p_pa_db_r6, p_pa_st_r1, p_pa_st_r3, p_pa_st_r6, p_pa_by_r1, p_pa_by_r3, p_pa_by_r6,
						 p_pb_db_r1, p_pb_db_r3, p_pb_db_r6, p_pb_st_r1, p_pb_st_r3, p_pb_st_r6, p_pb_by_r1, p_pb_by_r3, p_pb_by_r6;

			// Select all elements with binary, correct, and integer fitting dimension properly
			for (int i = 0; i < p_if_r1->p_block->size; i++) {
				p_if_r1->p_block->tensor.cell_int[i]  = i;
				p_bf_r1->p_block->tensor.cell_bool[i] = true;
			}
			p_if_r1->p_block->range.filter.length = p_if_r1->p_block->size;

			for (int i = 0; i < p_if_r3->p_block->size; i++) {
				p_if_r3->p_block->tensor.cell_int[i]  = 0;
				p_bf_r3->p_block->tensor.cell_bool[i] = true;
			}
			p_if_r3->p_block->range.filter.length = p_if_r3->p_block->size;

			for (int i = 0; i < p_if_r6->p_block->size; i++) {
				p_if_r6->p_block->tensor.cell_int[i]  = -i;
				p_bf_r6->p_block->tensor.cell_bool[i] = true;
			}
			p_if_r6->p_block->range.filter.length = p_if_r6->p_block->size;

			REQUIRE(CNT.new_block(p_pa_db_r1, p_db_r1->p_block, p_if_r1->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_db_r1 != nullptr);
			REQUIRE(p_pa_db_r1->p_block != nullptr);
			REQUIRE(p_pa_db_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_db_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(p_pa_db_r3, p_db_r3->p_block, p_if_r3->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_db_r3 != nullptr);
			REQUIRE(p_pa_db_r3->p_block != nullptr);
			REQUIRE(p_pa_db_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_db_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(p_pa_db_r6, p_db_r6->p_block, p_if_r6->p_block, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_db_r6 != nullptr);
			REQUIRE(p_pa_db_r6->p_block != nullptr);
			REQUIRE(p_pa_db_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_db_r6->p_block->size == 840);

			REQUIRE(CNT.new_block(p_pa_st_r1, p_st_r1->p_block, p_bf_r1->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_st_r1 != nullptr);
			REQUIRE(p_pa_st_r1->p_block != nullptr);
			REQUIRE(p_pa_st_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_st_r1->p_block->size == 107);

			REQUIRE(CNT.new_block(p_pa_st_r3, p_st_r3->p_block, p_bf_r3->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_st_r3 != nullptr);
			REQUIRE(p_pa_st_r3->p_block != nullptr);
			REQUIRE(p_pa_st_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_st_r3->p_block->size == 459);

			REQUIRE(CNT.new_block(p_pa_st_r6, p_st_r6->p_block, p_bf_r6->p_block, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_st_r6 != nullptr);
			REQUIRE(p_pa_st_r6->p_block != nullptr);
			REQUIRE(p_pa_st_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_st_r6->p_block->size == 840);

			// Select no elements with binary and integer
			for (int i = 0; i < p_if_r1->p_block->size; i++) {
				p_bf_r1->p_block->tensor.cell_bool[i] = false;
			}
			p_if_r1->p_block->range.filter.length = 0;

			for (int i = 0; i < p_if_r3->p_block->size; i++) {
				p_bf_r3->p_block->tensor.cell_bool[i] = false;
			}
			p_if_r3->p_block->range.filter.length = 0;

			for (int i = 0; i < p_if_r6->p_block->size; i++) {
				p_bf_r6->p_block->tensor.cell_bool[i] = false;
			}
			p_if_r6->p_block->range.filter.length = 0;

			REQUIRE(CNT.new_block(p_pa_by_r1, p_by_r1->p_block, p_if_r1->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_by_r1 != nullptr);
			REQUIRE(p_pa_by_r1->p_block != nullptr);
			REQUIRE(p_pa_by_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_by_r1->p_block->size == 0);
			REQUIRE(p_pa_by_r1->p_block->rank == 1);

			REQUIRE(CNT.new_block(p_pa_by_r3, p_by_r3->p_block, p_if_r3->p_block, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_by_r3 != nullptr);
			REQUIRE(p_pa_by_r3->p_block != nullptr);
			REQUIRE(p_pa_by_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_by_r3->p_block->size == 0);
			REQUIRE(p_pa_by_r3->p_block->rank == 3);

			REQUIRE(CNT.new_block(p_pa_by_r6, p_by_r6->p_block, p_if_r6->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pa_by_r6 != nullptr);
			REQUIRE(p_pa_by_r6->p_block != nullptr);
			REQUIRE(p_pa_by_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pa_by_r6->p_block->size == 0);
			REQUIRE(p_pa_by_r6->p_block->rank == 6);

			REQUIRE(CNT.new_block(p_pb_db_r1, p_db_r1->p_block, p_bf_r1->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_db_r1 != nullptr);
			REQUIRE(p_pb_db_r1->p_block != nullptr);
			REQUIRE(p_pb_db_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_db_r1->p_block->size == 0);
			REQUIRE(p_pb_db_r1->p_block->rank == 1);

			REQUIRE(CNT.new_block(p_pb_db_r3, p_db_r3->p_block, p_bf_r3->p_block, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_db_r3 != nullptr);
			REQUIRE(p_pb_db_r3->p_block != nullptr);
			REQUIRE(p_pb_db_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_db_r3->p_block->size == 0);
			REQUIRE(p_pb_db_r3->p_block->rank == 3);

			REQUIRE(CNT.new_block(p_pb_db_r6, p_db_r6->p_block, p_bf_r6->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_db_r6 != nullptr);
			REQUIRE(p_pb_db_r6->p_block != nullptr);
			REQUIRE(p_pb_db_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_db_r6->p_block->size == 0);
			REQUIRE(p_pb_db_r6->p_block->rank == 6);

			// Select some elements with binary and integer	 - dim_r1 {{107, 0}}, dim_r3 {{17, 9, 3, 0}}, dim_r6 {{2, 3, 2, 5, 2, 7}};
			for (int i = 0; i < p_if_r1->p_block->size; i++) {
				p_if_r1->p_block->tensor.cell_int[i]  = 3*i + 4;
				p_bf_r1->p_block->tensor.cell_bool[i] = i % 3 == 2;
			}
			p_if_r1->p_block->range.filter.length = 17;

			for (int i = 0; i < p_if_r3->p_block->size; i++) {
				p_if_r3->p_block->tensor.cell_int[i]  = i;
				p_bf_r3->p_block->tensor.cell_bool[i] = i % 4 == 2;
			}
			p_if_r3->p_block->range.filter.length = 7;

			for (int i = 0; i < p_if_r6->p_block->size; i++) {
				p_if_r6->p_block->tensor.cell_int[i]  = 1;
				p_bf_r6->p_block->tensor.cell_bool[i] = i == 0;
			}
			p_if_r6->p_block->range.filter.length = 1;

			REQUIRE(CNT.new_block(p_pb_st_r1, p_st_r1->p_block, p_if_r1->p_block, &no_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_st_r1 != nullptr);
			REQUIRE(p_pb_st_r1->p_block != nullptr);
			REQUIRE(p_pb_st_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_st_r1->p_block->size == 17);

			REQUIRE(CNT.new_block(p_pb_st_r3, p_st_r3->p_block, p_if_r3->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_st_r3 != nullptr);
			REQUIRE(p_pb_st_r3->p_block != nullptr);
			REQUIRE(p_pb_st_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_st_r3->p_block->size == 189);

			REQUIRE(CNT.new_block(p_pb_st_r6, p_st_r6->p_block, p_if_r6->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_st_r6 != nullptr);
			REQUIRE(p_pb_st_r6->p_block != nullptr);
			REQUIRE(p_pb_st_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_st_r6->p_block->size == 420);

			REQUIRE(CNT.new_block(p_pb_by_r1, p_by_r1->p_block, p_bf_r1->p_block, &new_str) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_by_r1 != nullptr);
			REQUIRE(p_pb_by_r1->p_block != nullptr);
			REQUIRE(p_pb_by_r1->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_by_r1->p_block->size == 35);

			REQUIRE(CNT.new_block(p_pb_by_r3, p_by_r3->p_block, p_bf_r3->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_by_r3 != nullptr);
			REQUIRE(p_pb_by_r3->p_block != nullptr);
			REQUIRE(p_pb_by_r3->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_by_r3->p_block->size == 108);

			REQUIRE(CNT.new_block(p_pb_by_r6, p_by_r6->p_block, p_bf_r6->p_block) == SERVICE_NO_ERROR);

			REQUIRE(p_pb_by_r6 != nullptr);
			REQUIRE(p_pb_by_r6->p_block != nullptr);
			REQUIRE(p_pb_by_r6->status  == BLOCK_STATUS_READY);

			REQUIRE(p_pb_by_r6->p_block->size == 420);

			THEN("Their structure is as expected.") {
				REQUIRE(p_pa_db_r1->p_block->cell_type	  == p_db_r1->p_block->cell_type);
				REQUIRE(p_pa_st_r6->p_block->cell_type	  == p_st_r6->p_block->cell_type);
				REQUIRE(p_pa_db_r3->p_block->rank		  == p_db_r3->p_block->rank);
				REQUIRE(p_pa_db_r1->p_block->rank		  == p_db_r1->p_block->rank);
				REQUIRE(p_pa_st_r6->p_block->range.dim[0] == p_st_r6->p_block->range.dim[0]);

				REQUIRE(p_pa_db_r3->p_block->range.dim[2]   == p_db_r3->p_block->range.dim[2]);
				REQUIRE(p_pa_st_r1->p_block->range.dim[3]   == p_st_r1->p_block->range.dim[3]);
				REQUIRE(p_pa_st_r6->p_block->size		    == p_st_r6->p_block->size);
				REQUIRE(p_pa_db_r3->p_block->size		    == p_db_r3->p_block->size);
				REQUIRE(p_pa_db_r1->p_block->num_attributes == p_db_r1->p_block->num_attributes);

				REQUIRE(p_pa_st_r6->p_block->num_attributes	== 6);
				REQUIRE(p_pa_st_r3->p_block->total_bytes	== p_st_r3->p_block->total_bytes);
				REQUIRE(p_pa_db_r1->p_block->total_bytes	== p_db_r1->p_block->total_bytes);
				REQUIRE(p_pa_st_r6->p_block->has_NA			== p_st_r6->p_block->has_NA);
				REQUIRE(p_pa_db_r3->p_block->has_NA			== p_db_r3->p_block->has_NA);

				REQUIRE(p_pa_db_r1->p_block->has_NA					== p_db_r1->p_block->has_NA);
				REQUIRE(p_pa_st_r6->p_block->tensor.cell_int [67]	== p_st_r6->p_block->tensor.cell_int [67]);
				REQUIRE(p_pa_db_r3->p_block->tensor.cell_byte[13]	== p_db_r3->p_block->tensor.cell_byte[13]);
				REQUIRE(p_pa_db_r1->p_block->tensor.cell_double[33]	== p_db_r1->p_block->tensor.cell_double[33]);
				REQUIRE(p_pa_st_r6->p_block->tensor.cell_int[27]	== p_st_r6->p_block->tensor.cell_int[27]);

				REQUIRE(p_pa_db_r3->p_block->p_attribute_keys()[0]				   == p_db_r3->p_block->p_attribute_keys()[0]);
				REQUIRE(p_pa_db_r1->p_block->p_string_buffer()->stop_check_4_match == p_db_r1->p_block->p_string_buffer()->stop_check_4_match);
				REQUIRE(p_pa_db_r1->p_block->p_string_buffer()->last_idx		   == p_db_r1->p_block->p_string_buffer()->last_idx);
				REQUIRE(p_pa_db_r3->p_block->p_string_buffer()->last_idx		   == p_db_r3->p_block->p_string_buffer()->last_idx);
				REQUIRE(p_pa_db_r1->p_block->p_string_buffer()->buffer_size		   == p_db_r1->p_block->p_string_buffer()->buffer_size);
				REQUIRE(p_pa_db_r3->p_block->p_string_buffer()->buffer[3]		   == p_db_r3->p_block->p_string_buffer()->buffer[3]);
				REQUIRE(p_pa_db_r1->p_block->p_string_buffer()->buffer[4]		   == p_db_r1->p_block->p_string_buffer()->buffer[4]);

				REQUIRE(!strcmp(p_pa_db_r1->p_block->get_attribute(256), "Life's but a walking shadow"));
				REQUIRE(!strcmp(p_pa_db_r3->p_block->get_attribute(123), ""));
				REQUIRE(!strcmp(p_pa_db_r6->p_block->get_attribute(456), ""));

				REQUIRE(p_pa_st_r1->p_block->get_attribute(9999) == nullptr);
				REQUIRE(!strcmp(p_pa_st_r3->p_block->get_attribute(BLOCK_ATTRIB_EMPTY), ""));

				REQUIRE(!strcmp(p_pa_st_r6->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(p_pa_st_r6->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(p_pa_st_r6->p_block->get_attribute(358), "told by an idiot.."));

				REQUIRE(p_pa_db_r1->p_block->tensor.cell_double[33] == 3.3);
				REQUIRE(!strcmp(p_pa_st_r1->p_block->get_string(15), "April"));
				REQUIRE(!p_pa_st_r1->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(p_pa_db_r1->p_block);
				check_and_finish(p_pa_st_r1->p_block);

				REQUIRE(p_pa_db_r3->p_block->tensor.cell_double[334] == 12003001.0);
				REQUIRE(!strcmp(p_pa_st_r3->p_block->get_string(334), "July"));
				REQUIRE(!p_pa_st_r3->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(p_pa_db_r3->p_block);
				check_and_finish(p_pa_st_r3->p_block);

				REQUIRE(p_pa_db_r6->p_block->tensor.cell_double[753] == 120000307.0);
				REQUIRE(!strcmp(p_pa_st_r6->p_block->get_string(753), "December"));
				REQUIRE(!p_pa_st_r6->p_block->p_string_buffer()->alloc_failed);

				check_and_finish(p_pa_db_r6->p_block);
				check_and_finish(p_pa_st_r6->p_block);

				int index[6];

				for (int i = 0; i < 107; i++) {
					index[0] = i;

					REQUIRE(p_pa_db_r1->p_block->tensor.cell_double[p_pa_db_r1->p_block->get_offset((int *) &index)] == i/10.0);

					REQUIRE(!strcmp(p_pa_st_r1->p_block->get_string((int *) &index), month[i % 12]));
					REQUIRE(   p_pa_st_r1->p_block->tensor.cell_int[p_pa_st_r1->p_block->get_offset((int *) &index)]
							== p_st_r1->p_block->tensor.cell_int[p_st_r1->p_block->get_offset((int *) &index)]);
				}

				for (int i = 0; i < 17; i++) {
					for (int j = 0; j < 9; j++) {
						for (int k = 0; k < 3; k++) {
							index[0] = i;
							index[1] = j;
							index[2] = k;

							REQUIRE(p_pa_db_r3->p_block->tensor.cell_double[p_pa_db_r3->p_block->get_offset((int *) &index)] == 1e6*i + 1e3*j + k);

							REQUIRE(!strcmp(p_pa_st_r3->p_block->get_string((int *) &index), month[(7*i + 5*j + 3*k) % 12]));
							REQUIRE(   p_pa_st_r3->p_block->tensor.cell_int[p_pa_st_r3->p_block->get_offset((int *) &index)]
									== p_st_r3->p_block->tensor.cell_int[p_st_r3->p_block->get_offset((int *) &index)]);
						}
					}
				}

				for (int i = 0; i < 2; i++) {
					for (int j = 0; j < 3; j++) {
						for (int k = 0; k < 2; k++) {
							for (int u = 0; u < 5; u++) {
								for (int v = 0; v < 2; v++) {
									for (int w = 0; w < 7; w++) {
										index[0] = i;
										index[1] = j;
										index[2] = k;
										index[3] = u;
										index[4] = v;
										index[5] = w;

										REQUIRE(   p_pa_db_r6->p_block->tensor.cell_double[p_pa_db_r6->p_block->get_offset((int *) &index)]
												== 1e8*i + 1e7*j + 1e6*k + 100*u + 11*v - w);

										REQUIRE(!strcmp(p_pa_st_r6->p_block->get_string((int *) &index),
														month[(45*i + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]));
										REQUIRE(   p_pa_st_r6->p_block->tensor.cell_int[p_pa_st_r6->p_block->get_offset((int *) &index)]
												== p_st_r6->p_block->tensor.cell_int[p_st_r6->p_block->get_offset((int *) &index)]);
									}
								}
							}
						}
					}
				}

				REQUIRE(p_pa_by_r1->p_block->cell_type		== p_by_r1->p_block->cell_type);
				REQUIRE(p_pb_db_r6->p_block->cell_type		== p_db_r6->p_block->cell_type);
				REQUIRE(p_pa_by_r3->p_block->rank			== p_by_r3->p_block->rank);
				REQUIRE(p_pb_db_r1->p_block->rank			== p_db_r1->p_block->rank);
				REQUIRE(p_pa_by_r6->p_block->range.dim[0]	== p_by_r6->p_block->range.dim[0]);
				REQUIRE(p_pa_by_r3->p_block->range.dim[2]	== p_by_r3->p_block->range.dim[2]);
				REQUIRE(p_pb_db_r1->p_block->range.dim[3]	== p_db_r1->p_block->range.dim[3]);
				REQUIRE(p_pb_db_r6->p_block->size			== 0);
				REQUIRE(p_pa_by_r3->p_block->size			== 0);
				REQUIRE(p_pb_db_r1->p_block->num_attributes == p_db_r1->p_block->num_attributes);
				REQUIRE(p_pa_by_r6->p_block->num_attributes == p_by_r6->p_block->num_attributes);

				REQUIRE(   p_pa_by_r1->p_block->total_bytes
						== p_by_r1->p_block->total_bytes - (uintptr_t) p_pa_by_r1->p_block->align_128bit(p_by_r1->p_block->size));
				REQUIRE(   p_pa_by_r3->p_block->total_bytes
						== p_by_r3->p_block->total_bytes - (uintptr_t) p_pa_by_r3->p_block->align_128bit(p_by_r3->p_block->size));
				REQUIRE(   p_pa_by_r6->p_block->total_bytes
						== p_by_r6->p_block->total_bytes - (uintptr_t) p_pa_by_r6->p_block->align_128bit(p_by_r6->p_block->size));
				REQUIRE(   p_pb_db_r1->p_block->total_bytes
						== p_db_r1->p_block->total_bytes - (uintptr_t) p_pb_db_r1->p_block->align_128bit(8*p_db_r1->p_block->size));
				REQUIRE(   p_pb_db_r3->p_block->total_bytes
						== p_db_r3->p_block->total_bytes - (uintptr_t) p_pb_db_r3->p_block->align_128bit(8*p_db_r3->p_block->size));
				REQUIRE(   p_pb_db_r6->p_block->total_bytes
						== p_db_r6->p_block->total_bytes - (uintptr_t) p_pb_db_r6->p_block->align_128bit(8*p_db_r6->p_block->size));

				REQUIRE(!p_pa_by_r1->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pa_by_r3->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pa_by_r6->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_db_r1->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_db_r3->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_db_r6->p_block->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(p_pb_db_r3->p_block->get_attribute(123), ""));
				REQUIRE(!strcmp(p_pb_db_r3->p_block->get_attribute(456), ""));

				REQUIRE(!strcmp(p_pa_by_r3->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(p_pa_by_r3->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(p_pa_by_r3->p_block->get_attribute(358), "told by an idiot.."));

				check_and_finish(p_pb_db_r1->p_block);
				check_and_finish(p_pa_by_r1->p_block);

				check_and_finish(p_pb_db_r3->p_block);
				check_and_finish(p_pa_by_r3->p_block);

				check_and_finish(p_pb_db_r6->p_block);
				check_and_finish(p_pa_by_r6->p_block);

				REQUIRE(p_pb_by_r1->p_block->cell_type == p_by_r1->p_block->cell_type);
				REQUIRE(p_pb_st_r6->p_block->cell_type == p_st_r6->p_block->cell_type);
				REQUIRE(p_pb_by_r3->p_block->rank	   == p_by_r3->p_block->rank);
				REQUIRE(p_pb_st_r1->p_block->rank	   == p_st_r1->p_block->rank);

				REQUIRE(p_pb_st_r6->p_block->range.dim[0] == p_st_r6->p_block->range.dim[0]);
				REQUIRE(p_pb_by_r3->p_block->range.dim[2] == p_by_r3->p_block->range.dim[2]);
				REQUIRE(p_pb_st_r1->p_block->range.dim[3] == p_st_r1->p_block->range.dim[3]);

				REQUIRE(p_pb_st_r1->p_block->num_attributes == 2);
				REQUIRE(p_pb_st_r3->p_block->num_attributes == p_st_r3->p_block->num_attributes);
				REQUIRE(p_pb_st_r6->p_block->num_attributes == p_st_r6->p_block->num_attributes);
				REQUIRE(p_pb_by_r1->p_block->num_attributes == 6);
				REQUIRE(p_pb_by_r3->p_block->num_attributes == p_by_r3->p_block->num_attributes);
				REQUIRE(p_pb_by_r6->p_block->num_attributes == p_by_r6->p_block->num_attributes);

				REQUIRE(p_pb_st_r1->p_block->total_bytes ==
						p_st_r1->p_block->total_bytes
						- (uintptr_t) p_pb_st_r1->p_block->align_128bit(4*(p_st_r1->p_block->size))
						+ (uintptr_t) p_pb_st_r1->p_block->align_128bit(4*(p_pb_st_r1->p_block->size)));
				REQUIRE(p_pb_st_r3->p_block->total_bytes ==
						p_st_r3->p_block->total_bytes
						- (uintptr_t) p_pb_st_r3->p_block->align_128bit(4*(p_st_r3->p_block->size))
						+ (uintptr_t) p_pb_st_r3->p_block->align_128bit(4*(p_pb_st_r3->p_block->size)));
				REQUIRE(p_pb_st_r6->p_block->total_bytes ==
						p_st_r6->p_block->total_bytes
						- (uintptr_t) p_pb_st_r6->p_block->align_128bit(4*(p_st_r6->p_block->size))
						+ (uintptr_t) p_pb_st_r6->p_block->align_128bit(4*(p_pb_st_r6->p_block->size)));
				REQUIRE(p_pb_by_r1->p_block->total_bytes ==
						p_by_r1->p_block->total_bytes + p_pb_by_r1->p_block->p_string_buffer()->buffer_size - 4 + 2*(6 -1)*sizeof(int)
						- (uintptr_t) p_pb_by_r1->p_block->align_128bit(p_by_r1->p_block->size)
						+ (uintptr_t) p_pb_by_r1->p_block->align_128bit(p_pb_by_r1->p_block->size));
				REQUIRE(p_pb_by_r3->p_block->total_bytes ==
						p_by_r3->p_block->total_bytes
						- (uintptr_t) p_pb_by_r3->p_block->align_128bit(p_by_r3->p_block->size)
						+ (uintptr_t) p_pb_by_r3->p_block->align_128bit(p_pb_by_r3->p_block->size));
				REQUIRE(p_pb_by_r6->p_block->total_bytes ==
						p_by_r6->p_block->total_bytes
						- (uintptr_t) p_pb_by_r6->p_block->align_128bit(p_by_r6->p_block->size)
						+ (uintptr_t) p_pb_by_r6->p_block->align_128bit(p_pb_by_r6->p_block->size));

				REQUIRE(!p_pb_by_r1->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_by_r3->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_by_r6->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_st_r1->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_st_r3->p_block->p_string_buffer()->alloc_failed);
				REQUIRE(!p_pb_st_r6->p_block->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(p_pb_st_r1->p_block->get_attribute(123), ""));
				REQUIRE(!strcmp(p_pb_st_r1->p_block->get_attribute(456), ""));

				REQUIRE(!strcmp(p_pb_by_r1->p_block->get_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(p_pb_by_r1->p_block->get_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(p_pb_by_r1->p_block->get_attribute(358), "told by an idiot.."));

				check_and_finish(p_pb_st_r1->p_block);
				check_and_finish(p_pb_by_r1->p_block);

				check_and_finish(p_pb_st_r3->p_block);
				check_and_finish(p_pb_by_r3->p_block);

				check_and_finish(p_pb_st_r6->p_block);
				check_and_finish(p_pb_by_r6->p_block);

				int index_o[6];
				int i_i = 0, i_b = 0;

				for (int i_o = 0; i_o < 107; i_o++) {
					if (p_bf_r1->p_block->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						REQUIRE(p_pb_by_r1->p_block->tensor.cell_byte[p_pb_by_r1->p_block->get_offset((int *) &index)] == 7 + 2*i_o);

						i_b++;
					}
					if (i_i < p_if_r1->p_block->range.filter.length && p_if_r1->p_block->tensor.cell_int[i_i] == i_o) {
						index[0]   = i_i;
						index_o[0] = i_o;

						REQUIRE(!strcmp(p_pb_st_r1->p_block->get_string((int *) &index), month[i_o % 12]));
						REQUIRE(p_pb_st_r1->p_block->tensor.cell_int[p_pb_st_r1->p_block->get_offset((int *) &index)] ==
								p_st_r1->p_block->tensor.cell_int[p_st_r1->p_block->get_offset((int *) &index_o)]);

						i_i++;
					}
				}

				i_i = 0, i_b = 0;
				for (int i_o = 0; i_o < 17; i_o++) {
					index_o[0] = i_o;
					if (p_bf_r3->p_block->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						for (int j = 0; j < 9; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 3; k++) {
								index[2] = index_o[2] = k;

								REQUIRE(   p_pb_by_r3->p_block->tensor.cell_byte[p_pb_by_r3->p_block->get_offset((int *) &index)]
										== 7*i_o + 5*j + 3*k);
							}
						}

						i_b++;
					}
					if (i_i < p_if_r3->p_block->range.filter.length && p_if_r3->p_block->tensor.cell_int[i_i] == i_o) {
						index[0] = i_i;

						for (int j = 0; j < 9; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 3; k++) {
								index[2] = index_o[2] = k;

								REQUIRE(!strcmp(p_pb_st_r3->p_block->get_string((int *) &index), month[(7*i_o + 5*j + 3*k) % 12]));
								REQUIRE(   p_pb_st_r3->p_block->tensor.cell_int[p_pb_st_r3->p_block->get_offset((int *) &index)]
										== p_st_r3->p_block->tensor.cell_int[p_st_r3->p_block->get_offset((int *) &index_o)]);
							}
						}

						i_i++;
					}
				}

				i_i = 0, i_b = 0;
				for (int i_o = 0; i_o < 2; i_o++) {
					index_o[0] = i_o;
					if (p_bf_r6->p_block->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						for (int j = 0; j < 3; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 2; k++) {
								index[2] = index_o[2] = k;
								for (int u = 0; u < 5; u++) {
									index[3] = index_o[3] = u;
									for (int v = 0; v < 2; v++) {
										index[4] = index_o[4] = v;
										for (int w = 0; w < 7; w++) {
											index[5] = index_o[5] = w;

											REQUIRE(   p_pb_by_r6->p_block->tensor.cell_byte[p_pb_by_r6->p_block->get_offset((int *) &index)]
													== 45*i_o + 34*j + 23*k + 12*u + 6*v + 3*w);
										}
									}
								}
							}
						}

						i_b++;
					}
					if (i_i < p_if_r6->p_block->range.filter.length && p_if_r6->p_block->tensor.cell_int[i_i] == i_o) {
						index[0] = i_i;

						for (int j = 0; j < 3; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 2; k++) {
								index[2] = index_o[2] = k;
								for (int u = 0; u < 5; u++) {
									index[3] = index_o[3] = u;
									for (int v = 0; v < 2; v++) {
										index[4] = index_o[4] = v;
										for (int w = 0; w < 7; w++) {
											index[5] = index_o[5] = w;

											REQUIRE(!strcmp(p_pb_st_r6->p_block->get_string((int *) &index),
															month[(45*i_o + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]));
											REQUIRE(   p_pb_st_r6->p_block->tensor.cell_int[p_pb_st_r6->p_block->get_offset((int *) &index)]
													== p_st_r6->p_block->tensor.cell_int[p_st_r6->p_block->get_offset((int *) &index_o)]);
										}
									}
								}
							}
						}
						i_i++;
					}
				}
			}

			CNT.destroy(p_pa_db_r1);
			REQUIRE(p_pa_db_r1 == nullptr);

			CNT.destroy(p_pa_db_r3);
			REQUIRE(p_pa_db_r3 == nullptr);

			CNT.destroy(p_pa_db_r6);
			REQUIRE(p_pa_db_r6 == nullptr);

			CNT.destroy(p_pa_st_r1);
			REQUIRE(p_pa_st_r1 == nullptr);

			CNT.destroy(p_pa_st_r3);
			REQUIRE(p_pa_st_r3 == nullptr);

			CNT.destroy(p_pa_st_r6);
			REQUIRE(p_pa_st_r6 == nullptr);

			CNT.destroy(p_pa_by_r1);
			REQUIRE(p_pa_by_r1 == nullptr);

			CNT.destroy(p_pa_by_r3);
			REQUIRE(p_pa_by_r3 == nullptr);

			CNT.destroy(p_pa_by_r6);
			REQUIRE(p_pa_by_r6 == nullptr);

			CNT.destroy(p_pb_db_r1);
			REQUIRE(p_pb_db_r1 == nullptr);

			CNT.destroy(p_pb_db_r3);
			REQUIRE(p_pb_db_r3 == nullptr);

			CNT.destroy(p_pb_db_r6);
			REQUIRE(p_pb_db_r6 == nullptr);

			CNT.destroy(p_pb_st_r1);
			REQUIRE(p_pb_st_r1 == nullptr);

			CNT.destroy(p_pb_st_r3);
			REQUIRE(p_pb_st_r3 == nullptr);

			CNT.destroy(p_pb_st_r6);
			REQUIRE(p_pb_st_r6 == nullptr);

			CNT.destroy(p_pb_by_r1);
			REQUIRE(p_pb_by_r1 == nullptr);

			CNT.destroy(p_pb_by_r3);
			REQUIRE(p_pb_by_r3 == nullptr);

			CNT.destroy(p_pb_by_r6);
			REQUIRE(p_pb_by_r6 == nullptr);
		}

		CNT.destroy(p_if_r1);
		REQUIRE(p_if_r1 == nullptr);

		CNT.destroy(p_if_r3);
		REQUIRE(p_if_r3 == nullptr);

		CNT.destroy(p_if_r6);
		REQUIRE(p_if_r6 == nullptr);

		CNT.destroy(p_bf_r1);
		REQUIRE(p_bf_r1 == nullptr);

		CNT.destroy(p_bf_r3);
		REQUIRE(p_bf_r3 == nullptr);

		CNT.destroy(p_bf_r6);
		REQUIRE(p_bf_r6 == nullptr);

		CNT.destroy(p_db_r1);
		REQUIRE(p_db_r1 == nullptr);

		CNT.destroy(p_db_r3);
		REQUIRE(p_db_r3 == nullptr);

		CNT.destroy(p_db_r6);
		REQUIRE(p_db_r6 == nullptr);

		CNT.destroy(p_st_r1);
		REQUIRE(p_st_r1 == nullptr);

		CNT.destroy(p_st_r3);
		REQUIRE(p_st_r3 == nullptr);

		CNT.destroy(p_st_r6);
		REQUIRE(p_st_r6 == nullptr);

		CNT.destroy(p_by_r1);
		REQUIRE(p_by_r1 == nullptr);

		CNT.destroy(p_by_r3);
		REQUIRE(p_by_r3 == nullptr);

		CNT.destroy(p_by_r6);
		REQUIRE(p_by_r6 == nullptr);
	}

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (4) Create a Tensor by selecting an item from a Tuple.") {

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	GIVEN("We have 5 multiple purpose blocks and three tuples") {
		pTransaction p_tx1, p_tx2, p_tx3, p_tx4, p_tx5;

		TensorDim dim_t1 {{27, 7, 3}}, dim_t2 {{3, 5, 4, 2, 0}}, dim_t3 {{10, 3, 0}}, dim_t4 {{2, 2, 3, 3, 1, 1}};

		AttributeMap att_bl = {};
		att_bl[BLOCK_ATTRIB_MIMETYPE] = "block of bool";

		REQUIRE(CNT.new_block(p_tx1, CELL_TYPE_BYTE, dim_t1.dim, FILL_NEW_WITH_ZERO) == SERVICE_NO_ERROR);
		REQUIRE(p_tx1 != nullptr);
		REQUIRE(p_tx1->p_block != nullptr);
		REQUIRE(p_tx1->status  == BLOCK_STATUS_READY);

		REQUIRE(   CNT.new_block(p_tx2, CELL_TYPE_BOOLEAN, dim_t2.dim, FILL_NEW_WITH_ZERO, nullptr, 0, nullptr, ' ', &att_bl)
				== SERVICE_NO_ERROR);
		REQUIRE(p_tx2 != nullptr);
		REQUIRE(p_tx2->p_block != nullptr);
		REQUIRE(p_tx2->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tx3, CELL_TYPE_TIME, dim_t3.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_tx3 != nullptr);
		REQUIRE(p_tx3->p_block != nullptr);
		REQUIRE(p_tx3->status  == BLOCK_STATUS_READY);

		struct tm junk = {0};
		struct tm *timeinfo = &junk;

		char buffer[20] = {"2021-08-01 12:13:14"};
		char fmt[20]	= {"%Y-%m-%d %H:%M:%S"};

		REQUIRE(strptime(buffer, fmt, timeinfo) != nullptr);

		REQUIRE(timeinfo->tm_mday == 1);

		for (int i = 0; i < 30; i++) {
			timeinfo->tm_mday =  1 + (3*i % 29);
			timeinfo->tm_hour =  7 + (5*i % 7);
			timeinfo->tm_min  = 13 + (7*i % 31);
			p_tx3->p_block->tensor.cell_time[i] = timegm(timeinfo);
		}

		REQUIRE(CNT.new_block(p_tx4, CELL_TYPE_SINGLE, dim_t4.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_tx4 != nullptr);
		REQUIRE(p_tx4->p_block != nullptr);
		REQUIRE(p_tx4->status  == BLOCK_STATUS_READY);

		char const *text_file = "January February March April May June July August September October November December";

		REQUIRE(CNT.new_block(p_tx5, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_file, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_tx5 != nullptr);
		REQUIRE(p_tx5->p_block != nullptr);
		REQUIRE(p_tx5->status  == BLOCK_STATUS_READY);

		pTransaction p_tx_tup1, p_tx_tup2, p_tx_tup3;

		AttributeMap att = {};
		att[BLOCK_ATTRIB_URL] = "who.knows.where";

		StaticBlockHeader p_hea1[5], p_hea2[5], p_hea3[5];
		pBlock			  p_blk1[5], p_blk2[5], p_blk3[5];

		Name p_names1[] = {"time", "text", "bool", "float"};
		Name p_names2[] = {"byte", "bool"};
		Name p_names3[] = {"time"};

		init_static_hea(p_hea1[0], p_blk1[0] = p_tx3->p_block);
		init_static_hea(p_hea1[1], p_blk1[1] = p_tx5->p_block);
		init_static_hea(p_hea1[2], p_blk1[2] = p_tx2->p_block);
		init_static_hea(p_hea1[3], p_blk1[3] = p_tx4->p_block);
		init_static_hea(p_hea2[0], p_blk2[0] = p_tx1->p_block);
		init_static_hea(p_hea2[1], p_blk2[1] = p_tx2->p_block);
		init_static_hea(p_hea3[0], p_blk3[0] = p_tx3->p_block);

		REQUIRE(CNT.new_block(p_tx_tup1, 4, p_hea1, p_names1, p_blk1, nullptr, nullptr) == SERVICE_NO_ERROR);
		REQUIRE(CNT.new_block(p_tx_tup2, 2, p_hea2, p_names2, p_blk2, nullptr, &att) == SERVICE_NO_ERROR);
		REQUIRE(CNT.new_block(p_tx_tup3, 1, p_hea3, p_names3, p_blk3, nullptr, &att) == SERVICE_NO_ERROR);
		REQUIRE(p_tx_tup1->p_block != nullptr);
		REQUIRE(p_tx_tup1->status  == BLOCK_STATUS_READY);
		REQUIRE(p_tx_tup2->p_block != nullptr);
		REQUIRE(p_tx_tup2->status  == BLOCK_STATUS_READY);
		REQUIRE(p_tx_tup3->p_block != nullptr);
		REQUIRE(p_tx_tup3->status  == BLOCK_STATUS_READY);

		WHEN("we create some blocks extracting from the tuple") {

			pTransaction p_xbl11, p_xbl12, p_xbl13, p_xbl14, p_xbl21, p_xbl22, p_xbl31;
			pTuple p_tup1 = (pTuple) p_tx_tup1->p_block;
			pTuple p_tup2 = (pTuple) p_tx_tup2->p_block;
			pTuple p_tup3 = (pTuple) p_tx_tup3->p_block;

			AttributeMap att_new = {};
			att_new[BLOCK_ATTRIB_LANGUAGE] = "c/c++";

			REQUIRE(CNT.new_block(p_xbl11, (pTuple) p_tx3->p_block, p_names2[0], nullptr) == SERVICE_ERROR_WRONG_TYPE);
			REQUIRE(CNT.new_block(p_xbl11, p_tup1, p_names2[0], nullptr) == SERVICE_ERROR_WRONG_NAME);
			REQUIRE(CNT.new_block(p_xbl11, p_tup1, p_names1[0], nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_xbl12, p_tup1, p_names1[1], nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_xbl13, p_tup1, p_names1[2], nullptr) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_xbl14, p_tup1, p_names1[3], nullptr) == SERVICE_NO_ERROR);

			REQUIRE(p_xbl11->p_block != nullptr);
			REQUIRE(p_xbl11->status  == BLOCK_STATUS_READY);
			REQUIRE(p_xbl12->p_block != nullptr);
			REQUIRE(p_xbl12->status  == BLOCK_STATUS_READY);
			REQUIRE(p_xbl13->p_block != nullptr);
			REQUIRE(p_xbl13->status  == BLOCK_STATUS_READY);
			REQUIRE(p_xbl14->p_block != nullptr);
			REQUIRE(p_xbl14->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(p_xbl21, p_tup2, p_names2[0], &att_new) == SERVICE_NO_ERROR);
			REQUIRE(CNT.new_block(p_xbl22, p_tup2, p_names2[1], &att_new) == SERVICE_NO_ERROR);

			REQUIRE(p_xbl21->p_block != nullptr);
			REQUIRE(p_xbl21->status  == BLOCK_STATUS_READY);
			REQUIRE(p_xbl22->p_block != nullptr);
			REQUIRE(p_xbl22->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(p_xbl31, p_tup3, p_names3[0], &att_new) == SERVICE_NO_ERROR);

			REQUIRE(p_xbl31->p_block != nullptr);
			REQUIRE(p_xbl31->status  == BLOCK_STATUS_READY);

			THEN("we get the expected blocks") {
				REQUIRE(p_xbl11->p_block->cell_type			   == p_tx3->p_block->cell_type);
				REQUIRE(p_xbl11->p_block->rank				   == p_tx3->p_block->rank);
				REQUIRE(p_xbl11->p_block->total_bytes		   == p_tx3->p_block->total_bytes);
				REQUIRE(p_xbl11->p_block->tensor.cell_time[0]  == p_tx3->p_block->tensor.cell_time[0]);
				REQUIRE(p_xbl11->p_block->tensor.cell_time[17] == p_tx3->p_block->tensor.cell_time[17]);
				REQUIRE(p_xbl11->p_block->tensor.cell_time[29] == p_tx3->p_block->tensor.cell_time[29]);

				REQUIRE(p_xbl11->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(p_xbl11->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);
				REQUIRE(p_xbl11->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);

				REQUIRE(p_xbl12->p_block->cell_type			  == p_tx5->p_block->cell_type);
				REQUIRE(p_xbl12->p_block->range.dim[0]		  == p_tx5->p_block->range.dim[0]);
				REQUIRE(p_xbl12->p_block->total_bytes		  == p_tx5->p_block->total_bytes);
				REQUIRE(p_xbl12->p_block->tensor.cell_int[0]  == p_tx5->p_block->tensor.cell_int[0]);
				REQUIRE(p_xbl12->p_block->tensor.cell_int[11] == p_tx5->p_block->tensor.cell_int[11]);

				REQUIRE(strcmp(p_xbl12->p_block->get_string(0), "January") == 0);
				REQUIRE(strcmp(p_xbl12->p_block->get_string(7), "August")  == 0);

				REQUIRE(p_xbl12->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(p_xbl12->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);
				REQUIRE(p_xbl12->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);

				REQUIRE(p_xbl13->p_block->cell_type	   == p_tx2->p_block->cell_type);
				REQUIRE(p_xbl13->p_block->range.dim[0] == p_tx2->p_block->range.dim[0]);
				REQUIRE(p_xbl13->p_block->range.dim[1] == p_tx2->p_block->range.dim[1]);
				REQUIRE(p_xbl13->p_block->range.dim[2] == p_tx2->p_block->range.dim[2]);
				REQUIRE(p_xbl13->p_block->range.dim[3] == p_tx2->p_block->range.dim[3]);
				REQUIRE(p_xbl13->p_block->total_bytes  == p_tx2->p_block->total_bytes);

				REQUIRE(p_xbl13->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(p_xbl13->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);
				REQUIRE(strcmp(p_xbl13->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE), "block of bool") == 0);

				REQUIRE(p_xbl14->p_block->cell_type	   == p_tx4->p_block->cell_type);
				REQUIRE(p_xbl14->p_block->rank		   == 6);
				REQUIRE(p_xbl14->p_block->range.dim[0] == p_tx4->p_block->range.dim[0]);
				REQUIRE(p_xbl14->p_block->range.dim[1] == p_tx4->p_block->range.dim[1]);
				REQUIRE(p_xbl14->p_block->range.dim[2] == p_tx4->p_block->range.dim[2]);
				REQUIRE(p_xbl14->p_block->range.dim[3] == p_tx4->p_block->range.dim[3]);
				REQUIRE(p_xbl14->p_block->range.dim[4] == p_tx4->p_block->range.dim[4]);
				REQUIRE(p_xbl14->p_block->range.dim[5] == p_tx4->p_block->range.dim[5]);
				REQUIRE(p_xbl14->p_block->total_bytes  == p_tx4->p_block->total_bytes);

				REQUIRE(p_xbl14->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(p_xbl14->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);
				REQUIRE(p_xbl14->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);

				REQUIRE(p_xbl21->p_block->cell_type			  == p_tx1->p_block->cell_type);
				REQUIRE(p_xbl21->p_block->rank				  == p_tx1->p_block->rank);
				REQUIRE(p_xbl21->p_block->total_bytes		   > p_tx1->p_block->total_bytes);
				REQUIRE(p_xbl21->p_block->tensor.cell_byte[0] == p_tx1->p_block->tensor.cell_byte[0]);

				REQUIRE(p_xbl21->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(strcmp(p_xbl21->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE), "c/c++") == 0);
				REQUIRE(p_xbl21->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);

				REQUIRE(p_xbl22->p_block->cell_type			 == p_tx2->p_block->cell_type);
				REQUIRE(p_xbl22->p_block->range.dim[0]		 == p_tx2->p_block->range.dim[0]);
				REQUIRE(p_xbl22->p_block->tensor.cell_int[0] == p_tx2->p_block->tensor.cell_int[0]);

				REQUIRE(p_xbl22->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(strcmp(p_xbl22->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE), "c/c++") == 0);
				REQUIRE(p_xbl22->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);

				REQUIRE(p_xbl31->p_block->cell_type			   == p_tx3->p_block->cell_type);
				REQUIRE(p_xbl31->p_block->rank				   == p_tx3->p_block->rank);
				REQUIRE(p_xbl31->p_block->tensor.cell_time[0]  == p_tx3->p_block->tensor.cell_time[0]);
				REQUIRE(p_xbl31->p_block->tensor.cell_time[17] == p_tx3->p_block->tensor.cell_time[17]);
				REQUIRE(p_xbl31->p_block->tensor.cell_time[29] == p_tx3->p_block->tensor.cell_time[29]);

				REQUIRE(p_xbl31->p_block->get_attribute(BLOCK_ATTRIB_URL)		== nullptr);
				REQUIRE(strcmp(p_xbl31->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE), "c/c++") == 0);
				REQUIRE(p_xbl31->p_block->get_attribute(BLOCK_ATTRIB_MIMETYPE) == nullptr);
			}

			CNT.destroy_internal(p_xbl31);
			CNT.destroy_internal(p_xbl22);
			CNT.destroy_internal(p_xbl21);
			CNT.destroy_internal(p_xbl14);
			CNT.destroy_internal(p_xbl13);
			CNT.destroy_internal(p_xbl12);
			CNT.destroy_internal(p_xbl11);
		}

		CNT.destroy_internal(p_tx_tup1);
		CNT.destroy_internal(p_tx_tup2);
		CNT.destroy_internal(p_tx_tup3);
		CNT.destroy_internal(p_tx1);
		CNT.destroy_internal(p_tx2);
		CNT.destroy_internal(p_tx3);
		CNT.destroy_internal(p_tx4);
		CNT.destroy_internal(p_tx5);
	}

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (5) & (6) Serializing/parsing every possible thing.") {

	REQUIRE(2*MAX_TENSOR_RANK + 3 < MAX_SIZE_OF_CELL_AS_TEXT);

	long long now64;
	jazz_elements::TimePoint big_bang;
	time_t nowXX;

	REQUIRE(sizeof(now64)	 == 8);
	REQUIRE(sizeof(big_bang) == 8);
	REQUIRE(sizeof(nowXX)	 == 8);

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	GIVEN("We have 16 multiple purpose blocks, kinds and tuples") {
		pTransaction p_byt, p_bbo, p_int, p_fac, p_gra, p_boo, p_sin, p_st1, p_st2, p_lin, p_tim, p_dou, p_ki1, p_ki2, p_tp1, p_tp2;
		TensorDim dim_r1 {25}, dim_r2 {17, 5}, dim_r3 {10, 3, 2}, dim_r4 {6, 5, 3, 3}, dim_r5 {4, 3, 2, 7, 2}, dim_r6 {2, 1, 3, 2, 1, 2};

		REQUIRE(CNT.new_block(p_byt, CELL_TYPE_BYTE, dim_r3.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_byt != nullptr);
		REQUIRE(p_byt->p_block != nullptr);
		REQUIRE(p_byt->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_byt->p_block->size; i++)
			p_byt->p_block->tensor.cell_byte[i] = (997*i + 17) % 211;

		REQUIRE(CNT.new_block(p_bbo, CELL_TYPE_BYTE_BOOLEAN, dim_r6.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_bbo != nullptr);
		REQUIRE(p_bbo->p_block != nullptr);
		REQUIRE(p_bbo->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_bbo->p_block->size; i++) {
			int jj = (997*i + 17) % 211;
			int bl = jj < 99 ? 1 : 0;
			p_bbo->p_block->tensor.cell_byte[i] = bl;

			if (jj > 200)
				p_bbo->p_block->tensor.cell_byte[i] = BYTE_BOOLEAN_NA;
		}

		REQUIRE(CNT.new_block(p_int, CELL_TYPE_INTEGER, dim_r4.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_int != nullptr);
		REQUIRE(p_int->p_block != nullptr);
		REQUIRE(p_int->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_int->p_block->size; i++) {
			p_int->p_block->tensor.cell_int[i] = (5485867*i + 17) % 15485867 - 9000000;
			if (p_int->p_block->tensor.cell_int[i] % 55 == 7)
				p_int->p_block->tensor.cell_int[i] = INTEGER_NA;
		}

		REQUIRE(CNT.new_block(p_fac, CELL_TYPE_FACTOR, dim_r2.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_fac != nullptr);
		REQUIRE(p_fac->p_block != nullptr);
		REQUIRE(p_fac->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_fac->p_block->size; i++)
			p_fac->p_block->tensor.cell_uint[i] = (5485867*i + 17) % 15485867;

		REQUIRE(CNT.new_block(p_gra, CELL_TYPE_GRADE, dim_r5.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_gra != nullptr);
		REQUIRE(p_gra->p_block != nullptr);
		REQUIRE(p_gra->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_gra->p_block->size; i++)
			p_gra->p_block->tensor.cell_uint[i] = (5485867*i + 641) % 15485867;

		REQUIRE(CNT.new_block(p_boo, CELL_TYPE_BOOLEAN, dim_r3.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_boo != nullptr);
		REQUIRE(p_boo->p_block != nullptr);
		REQUIRE(p_boo->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_boo->p_block->size; i++) {
			int jj = (997*i + 17) % 211;
			int bl = jj < 99 ? 1 : 0;
			p_boo->p_block->tensor.cell_int[i] = bl;

			if (jj > 200)
				p_boo->p_block->tensor.cell_int[i] = BYTE_BOOLEAN_NA;
		}

		REQUIRE(CNT.new_block(p_sin, CELL_TYPE_SINGLE, dim_r5.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_sin != nullptr);
		REQUIRE(p_sin->p_block != nullptr);
		REQUIRE(p_sin->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_sin->p_block->size; i++) {
			double r = (997*i + 17) % 211, d = (779*i + 37) % 211 + 11;
			p_sin->p_block->tensor.cell_single[i] = r/d - 1;
			if ((p_sin->p_block->tensor.cell_int[i] & 0x3f) == 7)
				p_sin->p_block->tensor.cell_single[i] = SINGLE_NA;
		}

		REQUIRE(CNT.new_block(p_dou, CELL_TYPE_DOUBLE, dim_r4.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_dou != nullptr);
		REQUIRE(p_dou->p_block != nullptr);
		REQUIRE(p_dou->status  == BLOCK_STATUS_READY);

		for (int i = 0; i < p_dou->p_block->size; i++) {
			double r = (997*i + 641) % 211, d = (779*i + 33) % 211 + 11;
			p_dou->p_block->tensor.cell_double[i] = r/d - 1;
			if ((p_dou->p_block->tensor.cell_ulongint[i] & 0x3f) == 7)
				p_dou->p_block->tensor.cell_double[i] = DOUBLE_NA;
		}

		REQUIRE(CNT.new_block(p_lin, CELL_TYPE_LONG_INTEGER, dim_r1.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_lin != nullptr);
		REQUIRE(p_lin->p_block != nullptr);
		REQUIRE(p_lin->status  == BLOCK_STATUS_READY);

		for (long long i = 0; i < p_lin->p_block->size; i++) {
			p_lin->p_block->tensor.cell_longint[i] = (99715485867*i + 17) % 9715485867 - 39715485867;
			if ((p_lin->p_block->tensor.cell_longint[i] % 7) == -6)
				p_lin->p_block->tensor.cell_longint[i] = LONG_INTEGER_NA;
		}

		REQUIRE(CNT.new_block(p_tim, CELL_TYPE_TIME, dim_r1.dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);
		REQUIRE(p_tim != nullptr);
		REQUIRE(p_tim->p_block != nullptr);
		REQUIRE(p_tim->status  == BLOCK_STATUS_READY);

		struct tm junk = {0};
		struct tm *timeinfo = &junk;

		char buffer[20] = {"2021-08-01 12:13:14"};
		char fmt[20]	= {"%Y-%m-%d %H:%M:%S"};

		REQUIRE(strptime(buffer, fmt, timeinfo) != nullptr);

		REQUIRE(timeinfo->tm_mday == 1);

		for (int i = 0; i < p_tim->p_block->size; i++) {
			timeinfo->tm_mday =  1 + (3*i % 29);
			timeinfo->tm_hour =  7 + (5*i % 7);
			timeinfo->tm_min  = 13 + (7*i % 31);
			p_tim->p_block->tensor.cell_time[i] = timegm(timeinfo);

			if (i % 11 == 2)
				p_tim->p_block->tensor.cell_time[i] = TIME_POINT_NA;
		}

		char const *text_1 = "January\n1917 \"February\" March Apr\\l May June July August Sep\ttember October November December";

		REQUIRE(CNT.new_block(p_st1, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_1, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_st1 != nullptr);
		REQUIRE(p_st1->p_block != nullptr);
		REQUIRE(p_st1->status  == BLOCK_STATUS_READY);

		char const *text_2 = "This is neat!\n\n\na: \a b: \bf: \f r: \r\nThis too!\náéíóú\nÄËÏÖÜ\n\n読み\nYomi\nThis is.\n\n\" a b \\ c \n";

		REQUIRE(CNT.new_block(p_st2, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, text_2, ' ') == SERVICE_NO_ERROR);
		REQUIRE(p_st2 != nullptr);
		REQUIRE(p_st2->p_block != nullptr);
		REQUIRE(p_st2->status  == BLOCK_STATUS_READY);

		p_st2->p_block->tensor.cell_int[2] = STRING_NA;

		StaticBlockHeader p_hea1[2], p_hea2[7];
		pBlock			  p_blk1[2], p_blk2[7];

		Name p_names1[] = {"int", "string2"};
		Name p_names2[] = {"byte", "time", "string1", "float", "bool", "long", "grade"};

		init_static_hea(p_hea1[0], p_blk1[0] = p_int->p_block);
		init_static_hea(p_hea1[1], p_blk1[1] = p_st2->p_block);

		init_static_hea(p_hea2[0], p_blk2[0] = p_byt->p_block);
		init_static_hea(p_hea2[1], p_blk2[1] = p_tim->p_block);
		init_static_hea(p_hea2[2], p_blk2[2] = p_st1->p_block);
		init_static_hea(p_hea2[3], p_blk2[3] = p_sin->p_block);
		init_static_hea(p_hea2[4], p_blk2[4] = p_boo->p_block);
		init_static_hea(p_hea2[5], p_blk2[5] = p_lin->p_block);
		init_static_hea(p_hea2[6], p_blk2[6] = p_gra->p_block);

 		REQUIRE(CNT.new_block(p_tp1, 2, p_hea1, p_names1, p_blk1) == SERVICE_NO_ERROR);
		REQUIRE(p_tp1->p_block != nullptr);
		REQUIRE(p_tp1->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tp2, 7, p_hea2, p_names2, p_blk2) == SERVICE_NO_ERROR);
		REQUIRE(p_tp2->p_block != nullptr);
		REQUIRE(p_tp2->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_ki1, 2, p_hea1, p_names1, nullptr) == SERVICE_NO_ERROR);
		REQUIRE(p_ki1->p_block != nullptr);
		REQUIRE(p_ki1->status  == BLOCK_STATUS_READY);

		AttributeMap dims = {};
		dims [-1] = "color";
		dims [-2] = "mode";

		REQUIRE(p_hea2[0].range.dim[0] == 10);
		REQUIRE(p_hea2[0].range.dim[1] ==  3);
		REQUIRE(p_hea2[0].range.dim[2] ==  2);

		REQUIRE(p_hea2[4].range.dim[0] == 10);
		REQUIRE(p_hea2[4].range.dim[1] ==  3);
		REQUIRE(p_hea2[4].range.dim[2] ==  2);

		REQUIRE(p_hea2[3].range.dim[0] ==  4);
		REQUIRE(p_hea2[3].range.dim[1] ==  3);
		REQUIRE(p_hea2[3].range.dim[2] ==  2);
		REQUIRE(p_hea2[3].range.dim[3] ==  7);
		REQUIRE(p_hea2[3].range.dim[4] ==  2);

		REQUIRE(p_hea2[6].range.dim[0] ==  4);
		REQUIRE(p_hea2[6].range.dim[1] ==  3);
		REQUIRE(p_hea2[6].range.dim[2] ==  2);
		REQUIRE(p_hea2[6].range.dim[3] ==  7);
		REQUIRE(p_hea2[6].range.dim[4] ==  2);

		p_hea2[0].range.dim[1] = -1;
		p_hea2[4].range.dim[1] = -1;
		p_hea2[3].range.dim[1] = -1;
		p_hea2[6].range.dim[1] = -1;

		p_hea2[0].range.dim[2] = -2;
		p_hea2[4].range.dim[2] = -2;
		p_hea2[3].range.dim[2] = -2;
		p_hea2[6].range.dim[2] = -2;

		REQUIRE(CNT.new_block(p_ki2, 7, p_hea2, p_names2, nullptr, &dims) == SERVICE_NO_ERROR);
		REQUIRE(p_ki2->p_block != nullptr);
		REQUIRE(p_ki2->status  == BLOCK_STATUS_READY);

		REQUIRE(reinterpret_cast<pTuple>(p_tp1->p_block)->is_a((pKind) p_ki1->p_block));
		REQUIRE(reinterpret_cast<pTuple>(p_tp2->p_block)->is_a((pKind) p_ki2->p_block));

		WHEN("we serialize everything") {
			AttributeMap att = {};
			att[BLOCK_ATTRIB_LANGUAGE] = "bop";

			pTransaction s_byt, s_bbo, s_int, s_fac, s_gra, s_boo, s_sin, s_st1, s_st2, s_lin, s_tim, s_dou, s_ki1, s_ki2, s_tp1, s_tp2;

			REQUIRE(CNT.new_block(s_byt, p_byt->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_byt->p_block != nullptr);
			REQUIRE(s_byt->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_bbo, p_bbo->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_bbo->p_block != nullptr);
			REQUIRE(s_bbo->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_int, p_int->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_int->p_block != nullptr);
			REQUIRE(s_int->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_fac, p_fac->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_fac->p_block != nullptr);
			REQUIRE(s_fac->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_gra, p_gra->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_gra->p_block != nullptr);
			REQUIRE(s_gra->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_boo, p_boo->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_boo->p_block != nullptr);
			REQUIRE(s_boo->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_sin, p_sin->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_sin->p_block != nullptr);
			REQUIRE(s_sin->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_st1, p_st1->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_st1->p_block != nullptr);
			REQUIRE(s_st1->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_st2, p_st2->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_st2->p_block != nullptr);
			REQUIRE(s_st2->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_lin, p_lin->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_lin->p_block != nullptr);
			REQUIRE(s_lin->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_tim, p_tim->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_tim->p_block != nullptr);
			REQUIRE(s_tim->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_dou, p_dou->p_block, (pChar) nullptr, &att) == SERVICE_NO_ERROR);
			REQUIRE(s_dou->p_block != nullptr);
			REQUIRE(s_dou->status  == BLOCK_STATUS_READY);

			REQUIRE(strcmp(s_dou->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE), "bop") == 0);

			REQUIRE(CNT.new_block(s_ki1, p_ki1->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_ki1->p_block != nullptr);
			REQUIRE(s_ki1->status  == BLOCK_STATUS_READY);

			REQUIRE(s_ki1->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);

			REQUIRE(CNT.new_block(s_ki2, p_ki2->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_ki2->p_block != nullptr);
			REQUIRE(s_ki2->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_tp1, p_tp1->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_tp1->p_block != nullptr);
			REQUIRE(s_tp1->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(s_tp2, p_tp2->p_block) == SERVICE_NO_ERROR);
			REQUIRE(s_tp2->p_block != nullptr);
			REQUIRE(s_tp2->status  == BLOCK_STATUS_READY);

			pTransaction f_byt, f_int, f_sin, f_lin, f_tim, f_dou, f_ki1, f_tp1;

			char format_byte[20]	= {"%03i"};
			char format_int[20]		= {"%6i"};
			char format_float[20]	= {"%.4f"};
			char format_longint[20]	= {"%10i"};
			char format_time[30]	= {"%Y-%m-%d %H:%M:%S 123"};
			char format_double[20]	= {"%.6f"};

			REQUIRE(CNT.new_block(f_byt, p_byt->p_block, format_byte) == SERVICE_NO_ERROR);
			REQUIRE(f_byt->p_block != nullptr);
			REQUIRE(f_byt->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_int, p_int->p_block, format_int) == SERVICE_NO_ERROR);
			REQUIRE(f_int->p_block != nullptr);
			REQUIRE(f_int->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_sin, p_sin->p_block, format_float) == SERVICE_NO_ERROR);
			REQUIRE(f_sin->p_block != nullptr);
			REQUIRE(f_sin->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_lin, p_lin->p_block, format_longint) == SERVICE_NO_ERROR);
			REQUIRE(f_lin->p_block != nullptr);
			REQUIRE(f_lin->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_tim, p_tim->p_block, format_time) == SERVICE_NO_ERROR);
			REQUIRE(f_tim->p_block != nullptr);
			REQUIRE(f_tim->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_dou, p_dou->p_block, format_double) == SERVICE_NO_ERROR);
			REQUIRE(f_dou->p_block != nullptr);
			REQUIRE(f_dou->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_ki1, p_ki1->p_block, format_int) == SERVICE_NO_ERROR);
			REQUIRE(f_ki1->p_block != nullptr);
			REQUIRE(f_ki1->status  == BLOCK_STATUS_READY);

			REQUIRE(CNT.new_block(f_tp1, p_tp1->p_block, format_int) == SERVICE_NO_ERROR);
			REQUIRE(f_tp1->p_block != nullptr);
			REQUIRE(f_tp1->status  == BLOCK_STATUS_READY);

			check_text_block(s_byt->p_block);
			check_text_block(s_bbo->p_block);
			check_text_block(s_int->p_block);
			check_text_block(s_fac->p_block);
			check_text_block(s_gra->p_block);
			check_text_block(s_boo->p_block);
			check_text_block(s_sin->p_block);
			check_text_block(s_st1->p_block);
			check_text_block(s_st2->p_block);
			check_text_block(s_lin->p_block);
			check_text_block(s_tim->p_block);
			check_text_block(s_dou->p_block);
			check_text_block(s_ki1->p_block);
			check_text_block(s_ki2->p_block);
			check_text_block(s_tp1->p_block);
			check_text_block(s_tp2->p_block);

			check_text_block(f_byt->p_block);
			check_text_block(f_int->p_block);
			check_text_block(f_sin->p_block);
			check_text_block(f_lin->p_block);
			check_text_block(f_tim->p_block);
			check_text_block(f_dou->p_block);
			check_text_block(f_ki1->p_block);
			check_text_block(f_tp1->p_block);

			THEN("we parse everything and compare") {
				pTransaction x_byt, x_bbo, x_int, x_fac, x_gra, x_boo, x_sin, x_st1, x_st2, x_lin, x_tim, x_dou;
				pTransaction x_ki1, x_ki2, x_tp1, x_tp2, y_byt, y_int, y_sin, y_lin, y_tim, y_dou, y_ki1, y_tp1;

				REQUIRE(CNT.new_block(x_byt, s_byt->p_block, CELL_TYPE_BYTE) == SERVICE_NO_ERROR);
				REQUIRE(x_byt->p_block != nullptr);
				REQUIRE(x_byt->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_bbo, s_bbo->p_block, CELL_TYPE_BYTE_BOOLEAN) == SERVICE_NO_ERROR);
				REQUIRE(x_bbo->p_block != nullptr);
				REQUIRE(x_bbo->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_int, s_int->p_block, CELL_TYPE_INTEGER) == SERVICE_NO_ERROR);
				REQUIRE(x_int->p_block != nullptr);
				REQUIRE(x_int->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_fac, s_fac->p_block, CELL_TYPE_FACTOR) == SERVICE_NO_ERROR);
				REQUIRE(x_fac->p_block != nullptr);
				REQUIRE(x_fac->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_gra, s_gra->p_block, CELL_TYPE_GRADE) == SERVICE_NO_ERROR);
				REQUIRE(x_gra->p_block != nullptr);
				REQUIRE(x_gra->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_boo, s_boo->p_block, CELL_TYPE_BOOLEAN, nullptr, &att) == SERVICE_NO_ERROR);
				REQUIRE(x_boo->p_block != nullptr);
				REQUIRE(x_boo->status  == BLOCK_STATUS_READY);

				REQUIRE(strcmp(x_boo->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE), "bop") == 0);

				REQUIRE(CNT.new_block(x_sin, s_sin->p_block, CELL_TYPE_SINGLE) == SERVICE_NO_ERROR);
				REQUIRE(x_sin->p_block != nullptr);
				REQUIRE(x_sin->status  == BLOCK_STATUS_READY);

				REQUIRE(x_sin->p_block->get_attribute(BLOCK_ATTRIB_LANGUAGE) == nullptr);

				REQUIRE(CNT.new_block(x_st1, s_st1->p_block, CELL_TYPE_STRING) == SERVICE_NO_ERROR);
				REQUIRE(x_st1->p_block != nullptr);
				REQUIRE(x_st1->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_st2, s_st2->p_block, CELL_TYPE_STRING) == SERVICE_NO_ERROR);
				REQUIRE(x_st2->p_block != nullptr);
				REQUIRE(x_st2->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_lin, s_lin->p_block, CELL_TYPE_LONG_INTEGER) == SERVICE_NO_ERROR);
				REQUIRE(x_lin->p_block != nullptr);
				REQUIRE(x_lin->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_tim, s_tim->p_block, CELL_TYPE_TIME) == SERVICE_NO_ERROR);
				REQUIRE(x_tim->p_block != nullptr);
				REQUIRE(x_tim->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_dou, s_dou->p_block, CELL_TYPE_DOUBLE) == SERVICE_NO_ERROR);
				REQUIRE(x_dou->p_block != nullptr);
				REQUIRE(x_dou->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(x_ki1, s_ki1->p_block, CELL_TYPE_KIND_ITEM) == SERVICE_NO_ERROR);
				REQUIRE(x_ki1->p_block != nullptr);
				REQUIRE(x_ki1->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pKind>(x_ki1->p_block)->audit() == MIXED_TYPE_KIND);

				REQUIRE(CNT.new_block(x_ki2, s_ki2->p_block, CELL_TYPE_KIND_ITEM) == SERVICE_NO_ERROR);
				REQUIRE(x_ki2->p_block != nullptr);
				REQUIRE(x_ki2->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pKind>(x_ki2->p_block)->audit() == MIXED_TYPE_KIND);

				REQUIRE(CNT.new_block(x_tp1, s_tp1->p_block, CELL_TYPE_TUPLE_ITEM, (pKind) p_ki1->p_block) == SERVICE_NO_ERROR);
				REQUIRE(x_tp1->p_block != nullptr);
				REQUIRE(x_tp1->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pTuple>(x_tp1->p_block)->audit() == MIXED_TYPE_TUPLE);

				REQUIRE(CNT.new_block(x_tp2, s_tp2->p_block, CELL_TYPE_TUPLE_ITEM, (pKind) p_ki2->p_block) == SERVICE_NO_ERROR);
				REQUIRE(x_tp2->p_block != nullptr);
				REQUIRE(x_tp2->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pTuple>(x_tp2->p_block)->audit() == MIXED_TYPE_TUPLE);

				REQUIRE(CNT.new_block(y_byt, f_byt->p_block, CELL_TYPE_BYTE) == SERVICE_NO_ERROR);
				REQUIRE(y_byt->p_block != nullptr);
				REQUIRE(y_byt->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_int, f_int->p_block, CELL_TYPE_INTEGER) == SERVICE_NO_ERROR);
				REQUIRE(y_int->p_block != nullptr);
				REQUIRE(y_int->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_sin, f_sin->p_block, CELL_TYPE_SINGLE) == SERVICE_NO_ERROR);
				REQUIRE(y_sin->p_block != nullptr);
				REQUIRE(y_sin->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_lin, f_lin->p_block, CELL_TYPE_LONG_INTEGER) == SERVICE_NO_ERROR);
				REQUIRE(y_lin->p_block != nullptr);
				REQUIRE(y_lin->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_tim, f_tim->p_block, CELL_TYPE_TIME) == SERVICE_NO_ERROR);
				REQUIRE(y_tim->p_block != nullptr);
				REQUIRE(y_tim->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_dou, f_dou->p_block, CELL_TYPE_DOUBLE) == SERVICE_NO_ERROR);
				REQUIRE(y_dou->p_block != nullptr);
				REQUIRE(y_dou->status  == BLOCK_STATUS_READY);

				REQUIRE(CNT.new_block(y_ki1, f_ki1->p_block, CELL_TYPE_KIND_ITEM) == SERVICE_NO_ERROR);
				REQUIRE(y_ki1->p_block != nullptr);
				REQUIRE(y_ki1->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pKind>(y_ki1->p_block)->audit() == MIXED_TYPE_KIND);

				REQUIRE(CNT.new_block(y_tp1, f_tp1->p_block, CELL_TYPE_TUPLE_ITEM, (pKind) p_ki1->p_block) == SERVICE_NO_ERROR);
				REQUIRE(y_tp1->p_block != nullptr);
				REQUIRE(y_tp1->status  == BLOCK_STATUS_READY);

				REQUIRE(reinterpret_cast<pTuple>(y_tp1->p_block)->audit() == MIXED_TYPE_TUPLE);

				compare_full_blocks(x_byt->p_block, p_byt->p_block);
				compare_full_blocks(x_bbo->p_block, p_bbo->p_block);
				compare_full_blocks(x_int->p_block, p_int->p_block);
				compare_full_blocks(x_fac->p_block, p_fac->p_block);
				compare_full_blocks(x_gra->p_block, p_gra->p_block);
				compare_full_blocks(x_boo->p_block, p_boo->p_block);
				compare_full_blocks(x_sin->p_block, p_sin->p_block);
				compare_full_blocks(x_st1->p_block, p_st1->p_block);
				compare_full_blocks(x_st2->p_block, p_st2->p_block);
				compare_full_blocks(x_lin->p_block, p_lin->p_block);
				compare_full_blocks(x_tim->p_block, p_tim->p_block);
				compare_full_blocks(x_dou->p_block, p_dou->p_block);
				compare_full_blocks(x_tp1->p_block, p_tp1->p_block);
				compare_full_blocks(x_tp2->p_block, p_tp2->p_block);
				compare_full_blocks(y_byt->p_block, p_byt->p_block);
				compare_full_blocks(y_int->p_block, p_int->p_block);
				compare_full_blocks(y_tim->p_block, p_tim->p_block);
				compare_full_blocks(y_tp1->p_block, p_tp1->p_block);

				compare_full_blocks(y_sin->p_block, p_sin->p_block, true);
				compare_full_blocks(y_lin->p_block, p_lin->p_block, true);
				compare_full_blocks(y_dou->p_block, p_dou->p_block, true);

				compare_full_blocks(x_ki1->p_block, p_ki1->p_block);
				compare_full_blocks(x_ki2->p_block, p_ki2->p_block);
				compare_full_blocks(y_ki1->p_block, p_ki1->p_block);

				CNT.destroy_internal(y_byt);
				CNT.destroy_internal(y_int);
				CNT.destroy_internal(y_sin);
				CNT.destroy_internal(y_lin);
				CNT.destroy_internal(y_tim);
				CNT.destroy_internal(y_dou);
				CNT.destroy_internal(y_ki1);
				CNT.destroy_internal(y_tp1);

				CNT.destroy_internal(x_byt);
				CNT.destroy_internal(x_bbo);
				CNT.destroy_internal(x_int);
				CNT.destroy_internal(x_fac);
				CNT.destroy_internal(x_gra);
				CNT.destroy_internal(x_boo);
				CNT.destroy_internal(x_sin);
				CNT.destroy_internal(x_st1);
				CNT.destroy_internal(x_st2);
				CNT.destroy_internal(x_lin);
				CNT.destroy_internal(x_tim);
				CNT.destroy_internal(x_dou);
				CNT.destroy_internal(x_ki1);
				CNT.destroy_internal(x_ki2);
				CNT.destroy_internal(x_tp1);
				CNT.destroy_internal(x_tp2);
			}

			CNT.destroy_internal(f_byt);
			CNT.destroy_internal(f_int);
			CNT.destroy_internal(f_sin);
			CNT.destroy_internal(f_lin);
			CNT.destroy_internal(f_tim);
			CNT.destroy_internal(f_dou);
			CNT.destroy_internal(f_ki1);
			CNT.destroy_internal(f_tp1);

			CNT.destroy_internal(s_byt);
			CNT.destroy_internal(s_bbo);
			CNT.destroy_internal(s_int);
			CNT.destroy_internal(s_fac);
			CNT.destroy_internal(s_gra);
			CNT.destroy_internal(s_boo);
			CNT.destroy_internal(s_sin);
			CNT.destroy_internal(s_st1);
			CNT.destroy_internal(s_st2);
			CNT.destroy_internal(s_lin);
			CNT.destroy_internal(s_tim);
			CNT.destroy_internal(s_dou);
			CNT.destroy_internal(s_ki1);
			CNT.destroy_internal(s_ki2);
			CNT.destroy_internal(s_tp1);
			CNT.destroy_internal(s_tp2);
		}

		CNT.destroy_internal(p_byt);
		CNT.destroy_internal(p_bbo);
		CNT.destroy_internal(p_int);
		CNT.destroy_internal(p_fac);
		CNT.destroy_internal(p_gra);
		CNT.destroy_internal(p_boo);
		CNT.destroy_internal(p_sin);
		CNT.destroy_internal(p_st1);
		CNT.destroy_internal(p_st2);
		CNT.destroy_internal(p_lin);
		CNT.destroy_internal(p_tim);
		CNT.destroy_internal(p_dou);
		CNT.destroy_internal(p_ki1);
		CNT.destroy_internal(p_ki2);
		CNT.destroy_internal(p_tp1);
		CNT.destroy_internal(p_tp2);
	}

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}


SCENARIO("Testing new_block() (7) Create an empty Index block.") {

	REQUIRE(CNT.start() == SERVICE_NO_ERROR);

	REQUIRE(CNT.max_transactions > 0);
	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.warn_alloc_bytes > 0);
	REQUIRE(CNT.fail_alloc_bytes > 0);
	REQUIRE(CNT.alloc_warning_issued == false);
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == CNT.p_buffer);
	REQUIRE(CNT.p_free->p_next == &CNT.p_buffer[1]);
	REQUIRE(CNT.p_free->p_next->p_next == &CNT.p_buffer[2]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 2].p_next == &CNT.p_buffer[CNT.max_transactions - 1]);
	REQUIRE(CNT.p_buffer[CNT.max_transactions - 1].p_next == nullptr);
	REQUIRE(CNT._lock_ == 0);

	GIVEN("We create all possible indices") {

		pTransaction p_tx_ii, p_tx_is, p_tx_si, p_tx_ss;

		REQUIRE(CNT.new_block(p_tx_ii, CELL_TYPE_BYTE) == SERVICE_ERROR_WRONG_TYPE);

		REQUIRE(CNT.new_block(p_tx_ii, CELL_TYPE_INDEX_II) == SERVICE_NO_ERROR);
		REQUIRE(p_tx_ii->p_block != nullptr);
		REQUIRE(p_tx_ii->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tx_is, CELL_TYPE_INDEX_IS) == SERVICE_NO_ERROR);
		REQUIRE(p_tx_is->p_block != nullptr);
		REQUIRE(p_tx_is->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tx_si, CELL_TYPE_INDEX_SI) == SERVICE_NO_ERROR);
		REQUIRE(p_tx_si->p_block != nullptr);
		REQUIRE(p_tx_si->status  == BLOCK_STATUS_READY);

		REQUIRE(CNT.new_block(p_tx_ss, CELL_TYPE_INDEX_SS) == SERVICE_NO_ERROR);
		REQUIRE(p_tx_ss->p_block != nullptr);
		REQUIRE(p_tx_ss->status  == BLOCK_STATUS_READY);

		WHEN("we use them") {
			p_tx_ii->p_hea->index.index_ii[ 1] = 123;
			p_tx_ii->p_hea->index.index_ii[-2] = 4;
			p_tx_ii->p_hea->index.index_ii[ 3] = 56789;

			p_tx_is->p_hea->index.index_is[ 1] = "anything";
			p_tx_is->p_hea->index.index_is[31] = "thirty one";

			p_tx_si->p_hea->index.index_si["key"]	= 123;
			p_tx_si->p_hea->index.index_si["value"] = 456789;

			p_tx_ss->p_hea->index.index_ss["5"]    = "five";
			p_tx_ss->p_hea->index.index_ss["five"] = "5";
			p_tx_ss->p_hea->index.index_ss["6"]    = "six";
			p_tx_ss->p_hea->index.index_ss["six"]  = "?";

			THEN("they grow dynamically") {

				REQUIRE(p_tx_ii->p_hea->index.index_ii[ 1]		== 123);
				REQUIRE(p_tx_ii->p_hea->index.index_ii[-2]		== 4);
				REQUIRE(p_tx_ii->p_hea->index.index_ii[ 3]		== 56789);

				REQUIRE(p_tx_ii->p_hea->index.index_ii.size()  == 3);
				REQUIRE(p_tx_ii->p_hea->index.index_ii.find(3) != p_tx_ii->p_hea->index.index_ii.end());
				REQUIRE(p_tx_ii->p_hea->index.index_ii.find(4) == p_tx_ii->p_hea->index.index_ii.end());

				REQUIRE(p_tx_is->p_hea->index.index_is[ 1]		== "anything");
				REQUIRE(p_tx_is->p_hea->index.index_is[31]		== "thirty one");

				REQUIRE(p_tx_is->p_hea->index.index_is.size()   == 2);
				REQUIRE(p_tx_is->p_hea->index.index_is.find(31) != p_tx_is->p_hea->index.index_is.end());
				REQUIRE(p_tx_is->p_hea->index.index_is.find(4)  == p_tx_is->p_hea->index.index_is.end());

				REQUIRE(p_tx_si->p_hea->index.index_si["key"]	== 123);
				REQUIRE(p_tx_si->p_hea->index.index_si["value"]	== 456789);

				REQUIRE(p_tx_si->p_hea->index.index_si.size()	   == 2);
				REQUIRE(p_tx_si->p_hea->index.index_si.find("key") != p_tx_si->p_hea->index.index_si.end());
				REQUIRE(p_tx_si->p_hea->index.index_si.find("Key") == p_tx_si->p_hea->index.index_si.end());

				REQUIRE(p_tx_ss->p_hea->index.index_ss["5"]		== "five");
				REQUIRE(p_tx_ss->p_hea->index.index_ss["five"]	== "5");
				REQUIRE(p_tx_ss->p_hea->index.index_ss["6"]		== "six");
				REQUIRE(p_tx_ss->p_hea->index.index_ss["six"]	== "?");

				REQUIRE(p_tx_ss->p_hea->index.index_ss.size()	   == 4);
				REQUIRE(p_tx_ss->p_hea->index.index_ss.find("six") != p_tx_ss->p_hea->index.index_ss.end());
				REQUIRE(p_tx_ss->p_hea->index.index_ss.find("si")  == p_tx_ss->p_hea->index.index_ss.end());
			}
		}
		CNT.destroy_internal(p_tx_ii);
		CNT.destroy_internal(p_tx_is);
		CNT.destroy_internal(p_tx_si);
		CNT.destroy_internal(p_tx_ss);
	}

	REQUIRE(CNT.alloc_bytes == CNT.max_transactions*sizeof(StoredTransaction));
	REQUIRE(CNT.p_buffer != nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT._lock_	 == 0);

	REQUIRE(CNT.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(CNT.alloc_bytes == 0);
	REQUIRE(CNT.p_buffer == nullptr);
	REQUIRE(CNT.p_alloc  == nullptr);
	REQUIRE(CNT.p_free	 == nullptr);
	REQUIRE(CNT._lock_	 == 0);
}
