/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


// #include <stl_whatever>


using namespace jazz_elements;


// Functions to support testing
// ----------------------------

class PseudoBuffer {
	public:

		inline void writer() {
			a[0] = (a[63]*16381 + 1) % 32749;
			for (int i = 1; i < 64; i++)
				a[i] = (a[i - 1]*16381 + 1) % 32749;

			b[0] = ((a[0] + b[63])*16381 + 3) % 32749;
			for (int i = 1; i < 64; i++)
				b[i] = (b[i - 1]*16381 + 1) % 32749;

			for (int i = 0; i < 64; i++)
				c[i] = a[i]*b[i];
		}

		inline int reader(int pid) {
			int i = pid % 64;

			return a[i]*b[i] - c[i];
		}

		Lock32 readers {0}, writers {0}, thread_errors {0}, reads_ok {0};

		int a[64] = {}, b[64] = {}, c[64] = {};
};

PseudoBuffer PSB;
BlockKeeper  JBK;
Container	 CNT(nullptr, nullptr);

static void *unsafe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 100; k++){
		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);
	}

	return (void *) 0;
}

static void *unsafe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		PSB.writer();
	}

	return (void *) 0;
}

static void *safe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 1000; k++){
		CNT.enter_read(&JBK);

		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);

		CNT.leave_read(&JBK);
	}

	return (void *) 0;
}

static void *safe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		CNT.enter_write(&JBK);

		PSB.writer();

		CNT.leave_write(&JBK);
	}

	return (void *) 0;
}

// Tests
// -----

SCENARIO("Testing (container) structure sizes.") {

	REQUIRE(sizeof(Name)		 == 32);
	REQUIRE(sizeof(BlockId64)	 == 8);
	REQUIRE(sizeof(Lock32)		 == 4);
	REQUIRE(sizeof(KeeperData)	 == 32);
	REQUIRE(sizeof(BlockKeeper)	 == 64);
	REQUIRE(sizeof(Locator)		 == 96);
	REQUIRE(sizeof(ContractStep) == 40);
	REQUIRE(sizeof(R_value)		 == 256);
	REQUIRE(sizeof(Items)		 == 4096);
}

SCENARIO("Testing threading functions") {
	WHEN("We check basic assumptions, we get expected results") {
		REQUIRE(JBK._lock_ == 0);

		int lock = JBK._lock_.fetch_add(1, std::memory_order_relaxed);

		REQUIRE(lock == 0);
		REQUIRE(JBK._lock_ == 1);

		JBK._lock_ = 0;

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 1);

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 2);

		CNT.enter_read(&JBK);
		REQUIRE(JBK._lock_ == 3);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 2);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 1);

		CNT.leave_read(&JBK);
		REQUIRE(JBK._lock_ == 0);

		CNT.enter_write(&JBK);
		REQUIRE(JBK._lock_ == -LOCK_WEIGHT_OF_WRITE);

		CNT.leave_write(&JBK);
		REQUIRE(JBK._lock_ == 0);

		CNT.lock_container();
		REQUIRE(CNT._lock_ == 1);

		CNT.unlock_container();
		REQUIRE(CNT._lock_ == 0);
	}

	PSB.writer();

	for (int i = 0; i < 64; i++) {
		REQUIRE(PSB.reader(i) == 0);
	}

	WHEN("We run a 240x100 readers and 16x10 writers sequentially and no errors happen.") {
		for (int i = 0; i < 256; i++) {
			if ((i % 16) == 0)
				unsafe_writer(nullptr);
			else
				unsafe_reader(nullptr);
		}
		REQUIRE(PSB.writers == 16);
		REQUIRE(PSB.readers == 240);
		REQUIRE(PSB.reads_ok == 24000);
		REQUIRE(PSB.thread_errors == 0);
	}

// #define LONG_THREAD_TEST

#ifndef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a short thread test. Define LONG_THREAD_TEST for the long test.") {
		bool failed = false;

		pthread_t th_id[32];
		for (int i = 0; i < 32; i++) {
			if ((i % 16) == 0) {
				if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
					failed = true;
					break;
				}
			} else {
				if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}
		std::this_thread::yield();

		for (int i = 0; i < 32; i++) {
			if (pthread_join(th_id[i], nullptr) != 0){
				failed = true;
				break;
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 2);
		REQUIRE(PSB.readers == 30);
		REQUIRE(PSB.reads_ok == 30000);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif

#ifdef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	const int num_threads = 256,
			  num_times	  = 64;

	WHEN("We run a 240x100 readers 16x10 writers in parallel num_times times without control, errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, unsafe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, unsafe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}
			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok < 24000*num_times);
		REQUIRE(PSB.thread_errors > 0);
	}

	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a 240x1000 readers 16x10 writers in parallel num_times times with control and no errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}

			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0){
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok == 240000*num_times);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif
}


SCENARIO("Testing container") {

//TODO: Write tests for this!

	GIVEN("Something") {
		WHEN("someone looks at it") {
			THEN("it breaks") {
				REQUIRE(2 > 1);
			}
		}
	}
}

