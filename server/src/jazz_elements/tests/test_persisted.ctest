/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


using namespace jazz_elements;


// Instancing container, logger and config
// ---------------------------------------

ConfigFile	CNF2(JAZZ_DEFAULT_CONFIG_PATH);
Logger		LOG2(CNF2, "LOGGER_PATH");
Persisted	PER(&LOG2, &CNF2);


// Tests
// -----

SCENARIO("Write/read some blocks in new sources jzzBLOCKS.") {
/*
	jzzBLOCKS jb;
	jCommons.load_config_file("./serverconf/jazz_config.ini");

	jCommons.debug_config_put("JazzPERSISTENCE.MDB_PERSISTENCE_PATH", TEST_LMDB_PATH);

	REQUIRE(jb.start());

	REQUIRE(jb.new_source("a_bool"));
	REQUIRE(jb.new_source("some_int"));
	REQUIRE(jb.new_source("some_double"));
	REQUIRE(jb.new_source("a_string"));
	REQUIRE(jb.new_source("a_raw"));

	GIVEN("Some block_C_OFFS_CHARS") {
		pBoolBlock p_boo;
		pIntBlock  pbi1, pbi2;
		pRealBlock pbr1, pbr2;
		pCharBlock p_st;
		pRawBlock  p_rw;

		REQUIRE(jb.new_block_C_BOOL_rep	  (p_boo, true, 3));
		REQUIRE(jb.new_block_C_INTEGER_rep(pbi1, 123, 4));
		REQUIRE(jb.new_block_C_INTEGER_seq(pbi2, 6, 15, 3));
		REQUIRE(jb.new_block_C_REAL_rep	  (pbr1, 1.234, 5));
		REQUIRE(jb.new_block_C_REAL_seq	  (pbr2, 6, 7, 0.1));
		REQUIRE(jb.new_block_C_CHARS_rep  (p_st, "Penny!", 3));
		REQUIRE(jb.new_block_C_RAW_once	  (p_rw, "Something", strlen("Something")));

		persistedKey key;
		jb.char_to_key("boo", key);
		REQUIRE(jb.block_put(jb.get_source_idx("a_bool"),	   key, (pJazzBlock) p_boo));
		jb.char_to_key("in1", key);
		REQUIRE(jb.block_put(jb.get_source_idx("some_int"),	   key, (pJazzBlock) pbi1));
		jb.char_to_key("in2", key);
		REQUIRE(jb.block_put(jb.get_source_idx("some_int"),	   key, (pJazzBlock) pbi2));
		jb.char_to_key("rr1", key);
		REQUIRE(jb.block_put(jb.get_source_idx("some_double"), key, (pJazzBlock) pbr1));
		jb.char_to_key("rr2", key);
		REQUIRE(jb.block_put(jb.get_source_idx("some_double"), key, (pJazzBlock) pbr2));
		jb.char_to_key("str", key);
		REQUIRE(jb.block_put(jb.get_source_idx("a_string"),	   key, (pJazzBlock) p_st));
		jb.char_to_key("raw", key);
		REQUIRE(jb.block_put(jb.get_source_idx("a_raw"),	   key, (pJazzBlock) p_rw));

		THEN("The content is identical") {
			pJazzBlock p_jazz;

			jb.char_to_key("boo", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_bool"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_boo));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_boo));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("in1", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_int"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbi1));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbi1));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("in2", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_int"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbi2));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbi2));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("rr1", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_double"), key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbr1));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbr1));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("rr2", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_double"), key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbr2));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbr2));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("str", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_string"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_st));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_st));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("raw", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_raw"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_rw));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_rw));
			REQUIRE(jb.block_unprotect(p_jazz));
		}

		JAZZFREE(p_boo, AUTOTYPEBLOCK(p_boo));
		JAZZFREE(pbi1, AUTOTYPEBLOCK(pbi1));
		JAZZFREE(pbi2, AUTOTYPEBLOCK(pbi2));
		JAZZFREE(pbr1, AUTOTYPEBLOCK(pbr1));
		JAZZFREE(pbr2, AUTOTYPEBLOCK(pbr2));
		JAZZFREE(p_st, AUTOTYPEBLOCK(p_st));
		JAZZFREE(p_rw, AUTOTYPEBLOCK(p_rw));

		REQUIRE(p_boo == NULL);
		REQUIRE(pbi1 == NULL);
		REQUIRE(pbi2 == NULL);
		REQUIRE(pbr1 == NULL);
		REQUIRE(pbr2 == NULL);
		REQUIRE(p_st == NULL);
		REQUIRE(p_rw == NULL);

		REQUIRE(jazzPtrTrackClose());
	}

	jb.stop();
*/
}


SCENARIO("Read again previous blocks in new sources jzzBLOCKS.") {
/*
	jzzBLOCKS jb;
	jCommons.load_config_file("./serverconf/jazz_config.ini");

	jCommons.debug_config_put("JazzPERSISTENCE.MDB_PERSISTENCE_PATH", TEST_LMDB_PATH);

	REQUIRE(jb.start());

	GIVEN("Open again block_C_OFFS_CHARS") {
		pBoolBlock p_boo;
		pIntBlock  pbi1, pbi2;
		pRealBlock pbr1, pbr2;
		pCharBlock p_st;
		pRawBlock  p_rw;

		REQUIRE(jb.new_block_C_BOOL_rep	  (p_boo, true, 3));
		REQUIRE(jb.new_block_C_INTEGER_rep(pbi1, 123, 4));
		REQUIRE(jb.new_block_C_INTEGER_seq(pbi2, 6, 15, 3));
		REQUIRE(jb.new_block_C_REAL_rep	  (pbr1, 1.234, 5));
		REQUIRE(jb.new_block_C_REAL_seq	  (pbr2, 6, 7, 0.1));
		REQUIRE(jb.new_block_C_CHARS_rep  (p_st, "Penny!", 3));
		REQUIRE(jb.new_block_C_RAW_once	  (p_rw, "Something", strlen("Something")));

		persistedKey key;

		THEN("The content is identical") {
			pJazzBlock p_jazz;

			jb.char_to_key("boo", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_bool"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_boo));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_boo));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("in1", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_int"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbi1));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbi1));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("in2", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_int"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbi2));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbi2));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("rr1", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_double"), key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbr1));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbr1));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("rr2", key);
			REQUIRE(jb.block_get(jb.get_source_idx("some_double"), key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) pbr2));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) pbr2));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("str", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_string"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_st));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_st));
			REQUIRE(jb.block_unprotect(p_jazz));

			jb.char_to_key("raw", key);
			REQUIRE(jb.block_get(jb.get_source_idx("a_raw"),	   key, p_jazz));
			REQUIRE(jb.compare_headers(p_jazz, (pJazzBlock) p_rw));
			REQUIRE(jb.compare_content(p_jazz, (pJazzBlock) p_rw));
			REQUIRE(jb.block_unprotect(p_jazz));
		}

		JAZZFREE(p_boo, AUTOTYPEBLOCK(p_boo));
		JAZZFREE(pbi1, AUTOTYPEBLOCK(pbi1));
		JAZZFREE(pbi2, AUTOTYPEBLOCK(pbi2));
		JAZZFREE(pbr1, AUTOTYPEBLOCK(pbr1));
		JAZZFREE(pbr2, AUTOTYPEBLOCK(pbr2));
		JAZZFREE(p_st, AUTOTYPEBLOCK(p_st));
		JAZZFREE(p_rw, AUTOTYPEBLOCK(p_rw));

		REQUIRE(p_boo == NULL);
		REQUIRE(pbi1 == NULL);
		REQUIRE(pbi2 == NULL);
		REQUIRE(pbr1 == NULL);
		REQUIRE(pbr2 == NULL);
		REQUIRE(p_st == NULL);
		REQUIRE(p_rw == NULL);

		REQUIRE(jazzPtrTrackClose());
	}

	jb.stop();
*/
}


SCENARIO("Testing all LMDB functions.") {
/*
	jzzBLOCKS jb;

	jCommons.load_config_file("./serverconf/jazz_config.ini");

	struct stat sb;

	if (stat(TEST_LMDB_PATH, &sb) == 0 && S_ISDIR(sb.st_mode))
	{
		remove(TEST_LMDB_DBI);

		REQUIRE(remove(TEST_LMDB_PATH) == 0);
	}
	REQUIRE(stat(TEST_LMDB_PATH, &sb) != 0);

	jCommons.debug_config_put("JazzPERSISTENCE.MDB_PERSISTENCE_PATH", TEST_LMDB_PATH);
	jCommons.debug_config_put("JazzPERSISTENCE.MDB_ENV_SET_MAXDBS", "32");				// MAX_POSSIBLE_SOURCES

	persistedKey key1, key2 = {"0_aZ_xy__"};

	REQUIRE( jb.char_to_key ("09_AZ_az", key1));
	REQUIRE( jb.char_to_key ("123456789012345", key1));
	REQUIRE( jb.char_to_key ("Yes_alpha", key1));
	REQUIRE( jb.char_to_key ("0_aZ_xy__", key1));

	REQUIRE(!jb.char_to_key ("This_is_too_long_for_a_key", key1));
	REQUIRE(!jb.char_to_key ("1234567890123456", key1));
	REQUIRE(!jb.char_to_key (" abc", key1));
	REQUIRE(!jb.char_to_key ("/abc", key1));
	REQUIRE(!jb.char_to_key (":abc", key1));
	REQUIRE(!jb.char_to_key ("@abc", key1));
	REQUIRE(!jb.char_to_key ("[abc", key1));
	REQUIRE(!jb.char_to_key ("`abc", key1));
	REQUIRE(!jb.char_to_key ("{abc", key1));
	REQUIRE(!jb.char_to_key ("abc ", key1));
	REQUIRE(!jb.char_to_key ("abc/", key1));
	REQUIRE(!jb.char_to_key ("abc:", key1));
	REQUIRE(!jb.char_to_key ("abc@", key1));
	REQUIRE(!jb.char_to_key ("abc[", key1));
	REQUIRE(!jb.char_to_key ("abc`", key1));
	REQUIRE(!jb.char_to_key ("abc{", key1));
	REQUIRE(!jb.char_to_key ("", key1));

	REQUIRE(!jb.strcmp_keys(key1, key2));

	REQUIRE(jb.start());

	REQUIRE(jb.open_all_sources());
	REQUIRE(jb.num_sources() == 2);

	REQUIRE(jb.source_idx[0] == -1);
	REQUIRE(jb.source_idx[1] == -1);
	REQUIRE(jb.source_idx[tenbits("sys")] == 0);
	REQUIRE(jb.source_idx[tenbits("www")] == 1);
	REQUIRE(jb.source_idx[1023] == -1);

	sourceName name0, name1, name2, name3, nameI;

	REQUIRE( jb.source_name(0, name0));
	REQUIRE( jb.source_name(1, name1));
	REQUIRE(!jb.source_name(2, name2));

	REQUIRE(!strcmp(name0.key, "sys"));
	REQUIRE(!strcmp(name1.key, "www"));

	REQUIRE(!jb.new_source("This_name_is_way_too_long_for_a_source"));
	REQUIRE(!jb.new_source("Not@alpha"));
	REQUIRE( jb.new_source("Yes_alpha"));

	REQUIRE( jb.source_name(2, name2));
	REQUIRE(!strcmp(name2.key, "Yes_alpha"));

	REQUIRE(jb.num_sources() == 3);

	REQUIRE(!jb.new_source("Yes_alpha"));

	REQUIRE(jb.num_sources() == 3);

	REQUIRE( jb.source_name(2, name2));
	REQUIRE(!strcmp(name2.key, "Yes_alpha"));

	REQUIRE(jb.num_sources() == 3);

	REQUIRE(!jb.kill_source("unknown"));
	REQUIRE( jb.kill_source("Yes_alpha"));
	REQUIRE(!jb.kill_source("sys"));
	REQUIRE(!jb.kill_source("www"));

	REQUIRE(jb.num_sources() == 2);

	REQUIRE(!jb.new_source("1234567890123456"));
	REQUIRE( jb.new_source("123456789012345"));

	REQUIRE(jb.num_sources() == 3);

	REQUIRE( jb.kill_source("123456789012345"));

	REQUIRE(jb.num_sources() == 2);

	for (int i = 0; i < 30; i++)
	{
		nameI.key[0] = 'a' + (char) i / 16;
		nameI.key[1] = 'a' + (char) i % 16;
		nameI.key[2] = 0;

		REQUIRE( jb.new_source(nameI.key));
		REQUIRE( jb.num_sources() == i + 3);
		REQUIRE( jb.source_name(i + 2, name3));
		REQUIRE(!strcmp(name3.key, nameI.key));

		int fi = jb.get_source_idx(nameI.key);

		REQUIRE(fi == i + 2);
	}
	REQUIRE( jb.num_sources() == 32);
	REQUIRE(!jb.new_source("toomany"));
	REQUIRE( jb.num_sources() == 32);

	for (int i = 0; i < 30; i++)
	{
		nameI.key[0] = 'a' + (char) i / 16;
		nameI.key[1] = 'a' + (char) i % 16;
		nameI.key[2] = 0;

		REQUIRE(jb.get_source_idx(nameI.key) == 2);

		REQUIRE(jb.kill_source(nameI.key));

		REQUIRE(jb.num_sources() == 31 - i);
	}

	REQUIRE(jb.num_sources() == 2);

	REQUIRE(jb.new_source("test1"));
	REQUIRE(jb.new_source("test2"));

	REQUIRE(jb.num_sources() == 4);

	REQUIRE(jb.source_idx[0] == -1);
	REQUIRE(jb.source_idx[1] == -1);
	REQUIRE(jb.source_idx[tenbits("sys")]	== 0);
	REQUIRE(jb.source_idx[tenbits("www")]	== 1);
	REQUIRE(jb.source_idx[tenbits("test1")] == 3);
	REQUIRE(jb.source_idx[1023] == -1);

	jb.close_all_sources();

	REQUIRE(jb.num_sources() == 0);

	REQUIRE(jb.source_idx[0] == -1);
	REQUIRE(jb.source_idx[1] == -1);
	REQUIRE(jb.source_idx[tenbits("sys")]	== -1);
	REQUIRE(jb.source_idx[tenbits("www")]	== -1);
	REQUIRE(jb.source_idx[tenbits("test1")] == -1);
	REQUIRE(jb.source_idx[1023] == -1);

	REQUIRE(jb.get_source_idx("") < 0);
	REQUIRE(jb.get_source_idx("\0.") < 0);

	REQUIRE(jb.get_source_idx("sys") < 0);
	REQUIRE(jb.get_source_idx("www") < 0);

	REQUIRE(jb.open_all_sources());

	REQUIRE(jb.num_sources() == 4);

	REQUIRE(jb.get_source_idx("") < 0);
	REQUIRE(jb.get_source_idx("\0■") < 0);

	REQUIRE(jb.get_source_idx("sys") == 0);
	REQUIRE(jb.get_source_idx("www") == 1);
	REQUIRE(jb.get_source_idx("test1") == 2);
	REQUIRE(jb.get_source_idx("test2") == 3);

	REQUIRE(jb.get_source_idx("") < 0);
	REQUIRE(jb.get_source_idx("\0\1") < 0);

	pRawBlock  p_raw1, p_raw2;

	static const char* const sss1[] = {"", "Hello, world!\0"};
	static const char* const sss2[] = {"", "Hallo, world?\0"};

	bool ok_p_raw1 = jb.new_block_C_RAW_once(p_raw1, sss1[1], strlen(sss1[1]) + 1);
	bool ok_p_raw2 = jb.new_block_C_RAW_once(p_raw2, sss2[1], strlen(sss2[1]) + 1);

	REQUIRE(ok_p_raw1);
	REQUIRE(ok_p_raw2);

	REQUIRE(p_raw1->type	  == BLOCKTYPE_RAW_ANYTHING);
	REQUIRE(p_raw1->length == 1);
	REQUIRE(p_raw1->size	  == 14);

	REQUIRE(p_raw1->data[ 0] == 'H');
	REQUIRE(p_raw1->data[ 1] == 'e');
	REQUIRE(p_raw1->data[12] == '!');
	REQUIRE(p_raw1->data[13] == 0);

	REQUIRE(jb.reinterpret_cast_block(p_raw1, BLOCKTYPE_RAW_MIME_TXT));

	REQUIRE(p_raw1->type == BLOCKTYPE_RAW_MIME_TXT);

	REQUIRE(p_raw2->type	  == BLOCKTYPE_RAW_ANYTHING);
	REQUIRE(p_raw2->length == 1);
	REQUIRE(p_raw2->size	  == 14);

	REQUIRE(p_raw2->data[ 0] == 'H');
	REQUIRE(p_raw2->data[ 1] == 'a');
	REQUIRE(p_raw2->data[12] == '?');
	REQUIRE(p_raw2->data[13] == 0);

	persistedKey kk[] = {"0_zer0", "1_o1e", "2_t2o", "3_thr33", "987654321012345"};
	persistedKey KK[] = {"0_ZER0", "1_O1E", "2_T2O", "3_THR33"};
	persistedKey searchK;
	pJazzBlock	pLbl0 = NULL, pLbl1 = NULL, pLbl2 = NULL, pLbl3 = NULL, pLbl4 = NULL, pLblN = NULL;

	REQUIRE(!jb.block_get(2, kk[0], pLbl0));
	REQUIRE( jb.block_put(2, kk[0], p_raw1));
	REQUIRE( jb.block_get(2, kk[0], pLbl0));
	REQUIRE(!jb.block_get(2, KK[0], pLblN));

	REQUIRE(p_raw1 != pLbl0);
	REQUIRE(p_raw1->type	  == pLbl0->type);
	REQUIRE(p_raw1->length == pLbl0->length);
	REQUIRE(p_raw1->size	  == pLbl0->size);
	REQUIRE(p_raw1->hash64 == pLbl0->hash64);
	REQUIRE(!strcmp(p_raw1->data, reinterpret_cast<pRawBlock>(pLbl0)->data));

	REQUIRE( jb.block_unprotect(pLbl0));
	REQUIRE(!jb.block_unprotect(pLbl0));
	REQUIRE(!jb.block_unprotect(pLbl1));

	REQUIRE(!jb.block_get(2, kk[1], pLbl1));
	REQUIRE( jb.block_put(2, kk[1], p_raw1));
	REQUIRE( jb.block_get(2, kk[1], pLbl1));
	REQUIRE(!jb.block_get(2, KK[1], pLblN));

	REQUIRE(!jb.block_get(2, kk[2], pLbl2));
	REQUIRE( jb.block_put(2, kk[2], p_raw1));
	REQUIRE( jb.block_get(2, kk[2], pLbl2));
	REQUIRE(!jb.block_get(2, KK[2], pLblN));

	REQUIRE(!jb.block_get(2, kk[3], pLbl3));
	REQUIRE( jb.block_put(2, kk[3], p_raw1));
	REQUIRE( jb.block_get(2, kk[3], pLbl3));
	REQUIRE(!jb.block_get(2, KK[3], pLblN));

	REQUIRE(!jb.block_get(2, kk[4], pLbl4));
	REQUIRE( jb.block_put(2, kk[4], p_raw1));
	REQUIRE( jb.block_get(2, kk[4], pLbl4));

	REQUIRE(p_raw1 != pLbl4);
	REQUIRE(!strcmp(p_raw1->data, reinterpret_cast<pRawBlock>(pLbl4)->data));
	REQUIRE( strcmp(p_raw2->data, reinterpret_cast<pRawBlock>(pLbl4)->data));

	REQUIRE(jb.block_unprotect(pLbl4));

	REQUIRE( jb.block_put(2, kk[4], p_raw2));
	REQUIRE( jb.block_get(2, kk[4], pLbl4));

	REQUIRE(p_raw2 != pLbl4);
	REQUIRE( strcmp(p_raw1->data, reinterpret_cast<pRawBlock>(pLbl4)->data));
	REQUIRE(!strcmp(p_raw2->data, reinterpret_cast<pRawBlock>(pLbl4)->data));

	REQUIRE(jb.block_unprotect(pLbl4));

	REQUIRE( jb.block_put(2, kk[4], p_raw1));
	REQUIRE( jb.block_get(2, kk[4], pLbl4));

	REQUIRE(p_raw1 != pLbl4);
	REQUIRE(!strcmp(p_raw1->data, reinterpret_cast<pRawBlock>(pLbl4)->data));
	REQUIRE( strcmp(p_raw2->data, reinterpret_cast<pRawBlock>(pLbl4)->data));

	REQUIRE(jb.block_unprotect(pLbl4));

	REQUIRE( jb.block_unprotect(pLbl1));
	REQUIRE( jb.block_unprotect(pLbl2));
	REQUIRE( jb.block_unprotect(pLbl3));
	REQUIRE(!jb.block_unprotect(pLbl1));
	REQUIRE(!jb.block_unprotect(pLbl2));
	REQUIRE(!jb.block_unprotect(pLbl3));

	REQUIRE( jb.block_get(2, kk[0], pLbl0));
	REQUIRE( jb.block_get(2, kk[1], pLbl1));
	REQUIRE( jb.block_get(2, kk[2], pLbl2));
	REQUIRE( jb.block_get(2, kk[3], pLbl3));

	REQUIRE( jb.block_unprotect(pLbl0));
	REQUIRE( jb.block_unprotect(pLbl1));
	REQUIRE( jb.block_unprotect(pLbl2));
	REQUIRE( jb.block_unprotect(pLbl3));

	REQUIRE(!jb.block_get(3, kk[0], pLbl0));
	REQUIRE(!jb.block_get(3, kk[1], pLbl1));
	REQUIRE(!jb.block_get(3, kk[2], pLbl2));
	REQUIRE(!jb.block_get(3, kk[3], pLbl3));

	REQUIRE(!jb.block_get(3, KK[0], pLbl0));
	REQUIRE(!jb.block_get(3, KK[1], pLbl1));
	REQUIRE(!jb.block_get(3, KK[2], pLbl2));
	REQUIRE(!jb.block_get(3, KK[3], pLbl3));

	REQUIRE( jb.block_put(3, KK[0], p_raw1));
	REQUIRE( jb.block_put(3, KK[1], p_raw1));
	REQUIRE( jb.block_put(3, KK[2], p_raw1));
	REQUIRE( jb.block_put(3, KK[3], p_raw1));

	REQUIRE( jb.block_get(3, KK[0], pLbl0));
	REQUIRE( jb.block_get(3, KK[1], pLbl1));
	REQUIRE( jb.block_get(3, KK[2], pLbl2));
	REQUIRE( jb.block_get(3, KK[3], pLbl3));

	REQUIRE( jb.block_unprotect(pLbl0));
	REQUIRE( jb.block_unprotect(pLbl1));
	REQUIRE( jb.block_unprotect(pLbl2));
	REQUIRE( jb.block_unprotect(pLbl3));

	REQUIRE(!jb.block_unprotect(pLbl0));
	REQUIRE(!jb.block_unprotect(pLbl1));
	REQUIRE(!jb.block_unprotect(pLbl2));
	REQUIRE(!jb.block_unprotect(pLbl3));

	REQUIRE(!jb.char_to_key ("This_is_too_long_for_a_key", searchK));
	REQUIRE(!jb.char_to_key ("1234567890123456", searchK));
	REQUIRE( jb.char_to_key ("123456789012345", searchK));
	REQUIRE(!jb.char_to_key ("Not@alpha", searchK));
	REQUIRE( jb.char_to_key ("Yes_alpha", searchK));
	REQUIRE( jb.char_to_key ("0_zer0", searchK));
	REQUIRE(!jb.char_to_key ("", searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[0]));

	jb.set_first_key(searchK);

	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_START));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[0]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[1]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[2]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[3]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[4]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_END));
	REQUIRE( jb.is_last_key(searchK));

	REQUIRE(!jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_END));
	REQUIRE( jb.is_last_key(searchK));

	REQUIRE( jb.block_kill(2, kk[0]));
	REQUIRE( jb.block_kill(2, kk[1]));
	REQUIRE( jb.block_kill(2, kk[2]));
	REQUIRE( jb.block_kill(2, kk[3]));

	REQUIRE(!jb.block_kill(2, kk[0]));
	REQUIRE(!jb.block_kill(2, kk[1]));
	REQUIRE(!jb.block_kill(2, kk[2]));
	REQUIRE(!jb.block_kill(2, kk[3]));

	jb.set_first_key(searchK);

	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_START));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, kk[4]));
	REQUIRE(!jb.is_last_key(searchK));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_END));
	REQUIRE( jb.is_last_key(searchK));

	REQUIRE(!jb.next_key(2, searchK));

	REQUIRE( jb.block_kill(2, kk[4]));

	jb.set_first_key(searchK);

	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_START));

	REQUIRE( jb.next_key(2, searchK));
	REQUIRE(!jb.strcmp_keys(searchK, KEY_SPACE_END));
	REQUIRE( jb.is_last_key(searchK));

	REQUIRE(!jb.next_key(2, searchK));

	REQUIRE(!jb.reinterpret_cast_block(p_raw1, BLOCKTYPE_C_BOOL));
	REQUIRE( jb.reinterpret_cast_block(p_raw1, BLOCKTYPE_SOURCE_ATTRIB));

	JAZZFREE(p_raw1, RAM_ALLOC_C_RAW);
	JAZZFREE(p_raw2, RAM_ALLOC_C_RAW);

	REQUIRE(p_raw1 == NULL);
	REQUIRE(p_raw2 == NULL);

	REQUIRE(jazzPtrTrackClose());

	jb.stop();
*/
}


SCENARIO("Strong End-to-end lmdb tests") {

	REQUIRE(PER.start() == SERVICE_NO_ERROR);

	REQUIRE(PER.max_transactions > 0);
	REQUIRE(PER.alloc_bytes == PER.max_transactions*sizeof(StoredTransaction));
	REQUIRE(PER.warn_alloc_bytes > 0);
	REQUIRE(PER.fail_alloc_bytes > 0);
	REQUIRE(PER.alloc_warning_issued == false);
	REQUIRE(PER.p_buffer != nullptr);
	REQUIRE(PER.p_free	 == PER.p_buffer);
	REQUIRE(pStoredTransaction(PER.p_free)->p_next == &pStoredTransaction(PER.p_buffer)[1]);
	REQUIRE(pStoredTransaction(PER.p_free)->p_next->p_next == &pStoredTransaction(PER.p_buffer)[2]);
	REQUIRE(	pStoredTransaction(PER.p_buffer)[PER.max_transactions - 2].p_next
			== &pStoredTransaction(PER.p_buffer)[PER.max_transactions - 1]);
	REQUIRE(pStoredTransaction(PER.p_buffer)[PER.max_transactions - 1].p_next == nullptr);
	REQUIRE(PER._lock_ == 0);

	GIVEN("We have some blocks and indices") {
		Index txt;

		txt["one__"] = "Abc ..";
		txt["two__"] = "[[1,2,3],%20[1,2,3]]";
		txt["three"] = "";
		txt["_four"] = "A multiline string\nis okay\n";
		txt["fi_ve"] = "UTF8 ¡what!\n\nLöwe\n";

		pTransaction p_tx_pop, p_tx_str, p_tx_chr, p_tx_int, p_tx_rea, p_tx_tim, p_tx_fil;

		int dim[MAX_TENSOR_RANK] = {20, 5, 0};

		REQUIRE(PER.new_block(p_tx_pop, txt) == SERVICE_NO_ERROR);

		REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
		REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

		REQUIRE(PER.new_block(p_tx_str, CELL_TYPE_STRING, nullptr, FILL_WITH_TEXTFILE, nullptr, 0, (pChar) "Line\ntwo\nthree") == 0);
		REQUIRE(PER.new_block(p_tx_chr, CELL_TYPE_BYTE, dim, FILL_NEW_WITH_ZERO) == FILL_NEW_DONT_FILL);
		p_tx_chr->p_block->tensor.cell_byte[0]  = 1;
		p_tx_chr->p_block->tensor.cell_byte[99] = 99;

		dim[1] = 8;
		REQUIRE(PER.new_block(p_tx_int, CELL_TYPE_INTEGER, dim, FILL_NEW_WITH_ZERO) == FILL_NEW_DONT_FILL);
		p_tx_int->p_block->tensor.cell_int[0]	= 1;
		p_tx_int->p_block->tensor.cell_int[159] = 159;

		dim[1] = 4;
		REQUIRE(PER.new_block(p_tx_rea, CELL_TYPE_DOUBLE, dim, FILL_NEW_WITH_ZERO) == FILL_NEW_DONT_FILL);
		p_tx_rea->p_block->tensor.cell_double[0]  = 1.23;
		p_tx_rea->p_block->tensor.cell_double[79] = 21.345;

		dim[1] = 1;
		REQUIRE(PER.new_block(p_tx_tim, CELL_TYPE_TIME, dim, FILL_NEW_DONT_FILL) == SERVICE_NO_ERROR);

		struct tm junk		= {0};
		struct tm *timeinfo = &junk;

		char buffer[20] = {"2021-08-01 12:13:14"};
		char fmt[20]	= {"%Y-%m-%d %H:%M:%S"};

		REQUIRE(strptime(buffer, fmt, timeinfo) != nullptr);

		REQUIRE(timeinfo->tm_mday == 1);

		for (int i = 0; i < 20; i++) {
			timeinfo->tm_mday =  1 + (3*i % 29);
			timeinfo->tm_hour =  7 + (5*i % 7);
			timeinfo->tm_min  = 13 + (7*i % 31);
			p_tx_tim->p_block->tensor.cell_time[i] = timegm(timeinfo);
		}

		dim[1] = 0;
		REQUIRE(PER.new_block(p_tx_fil, CELL_TYPE_INTEGER, dim, FILL_NEW_WITH_ZERO) == FILL_NEW_DONT_FILL);
		p_tx_fil->p_block->range.filter.length = 2;
		p_tx_fil->p_block->tensor.cell_int[0] = 0;
		p_tx_fil->p_block->tensor.cell_int[1] = 2;

		REQUIRE(p_tx_fil->p_block->can_filter(p_tx_tim->p_block));
		REQUIRE(p_tx_fil->p_block->can_filter(p_tx_rea->p_block));
		REQUIRE(p_tx_fil->p_block->can_filter(p_tx_int->p_block));
		REQUIRE(p_tx_fil->p_block->can_filter(p_tx_chr->p_block));

		WHEN("We test new_entity()/remove() of entities") {
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_one/key") == SERVICE_ERROR_PARSING_COMMAND);
			REQUIRE(PER.remove	  ((pChar) "//lmdb/ent_one")	 == SERVICE_ERROR_ENTITY_NOT_FOUND);

			REQUIRE(PER.source_dbi.size() == 0);

			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_one") == SERVICE_NO_ERROR);

			REQUIRE(PER.source_dbi.size() == 1);

			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_two/~0") == SERVICE_ERROR_PARSING_COMMAND);
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_two")	== SERVICE_NO_ERROR);
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_three")	== SERVICE_NO_ERROR);

			THEN("We get expected structure") {
				REQUIRE(PER.source_dbi.size() == 3);

				REQUIRE(PER.source_dbi["ent_two"]	!= INVALID_MDB_DBI);
				REQUIRE(PER.source_dbi["ent_three"] != INVALID_MDB_DBI);
			}

			REQUIRE(PER.remove((pChar) "//lmdb/ent_one") == SERVICE_NO_ERROR);

			REQUIRE(PER.source_dbi.size() == 2);

			REQUIRE(PER.remove((pChar) "//lmdb/ent_two")   == SERVICE_NO_ERROR);
			REQUIRE(PER.remove((pChar) "//lmdb/ent_three") == SERVICE_NO_ERROR);

			REQUIRE(PER.source_dbi.size() == 0);
		}
		pTransaction p_txn;
		Locator location;

		REQUIRE(PER.get(p_txn, (pChar) "//zz/ent_one/key")		    == SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/papa~child") == SERVICE_ERROR_BLOCK_NOT_FOUND);

		REQUIRE(PER.new_entity((pChar) "//lmdb/ent_one")			== SERVICE_NO_ERROR);
		REQUIRE(PER.new_entity((pChar) "//lmdb/ent_two")			== SERVICE_NO_ERROR);

		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/papa~child") == SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~highest")	== SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~123~abc~Z")	== SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/any-thing")	== SERVICE_ERROR_BLOCK_NOT_FOUND);

		REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
		REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

		REQUIRE(PER.put((pChar) "//lmdb/ent_one/something", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);

		REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
		REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/papa~child") == SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~highest")	== SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~123~abc~Z")	== SERVICE_ERROR_BLOCK_NOT_FOUND);
		REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/any-thing")	== SERVICE_ERROR_BLOCK_NOT_FOUND);

		REQUIRE(PER.put((pChar) "//aa/ent_one/~insert", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);

		REQUIRE(PER.put((pChar) "//lmdb/ent_one/papa~child", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);
		REQUIRE(PER.put((pChar) "//lmdb/ent_one/~highest",	 p_tx_chr->p_block, 0) == SERVICE_NO_ERROR);
		REQUIRE(PER.put((pChar) "//lmdb/ent_one/~123~abc~Z", p_tx_int->p_block, 0) == SERVICE_NO_ERROR);
		REQUIRE(PER.put((pChar) "//lmdb/ent_one/any-thing",  p_tx_tim->p_block, 0) == SERVICE_NO_ERROR);

		REQUIRE(PER.remove((pChar) "//lmdb/ent_one") == SERVICE_NO_ERROR);
		REQUIRE(PER.remove((pChar) "//lmdb/ent_two") == SERVICE_NO_ERROR);

		WHEN("We test put()/get()/remove() of keys") {
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_small") == SERVICE_NO_ERROR);
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_big") == SERVICE_NO_ERROR);

			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_pop", p_tx_pop->p_block, WRITE_TENSOR_DATA) == SERVICE_ERROR_WRITE_FORBIDDEN);

			REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
			REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_pop", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);

			REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
			REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_str", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_chr", p_tx_chr->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_int", p_tx_int->p_block, WRITE_ONLY_IF_NOT_EXISTS) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_rea", p_tx_rea->p_block, WRITE_ONLY_IF_EXISTS) == SERVICE_ERROR_WRITE_FORBIDDEN);
			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_rea", p_tx_rea->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_tim", p_tx_tim->p_block, WRITE_ONLY_IF_NOT_EXISTS) == SERVICE_NO_ERROR);

			REQUIRE(   PER.put((pChar) "//lmdb/ent_big/tx_chr", p_tx_chr->p_block, WRITE_ONLY_IF_NOT_EXISTS)
					== SERVICE_ERROR_WRITE_FORBIDDEN);

			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_str", p_tx_str->p_block, WRITE_ONLY_IF_EXISTS) == SERVICE_NO_ERROR);

			REQUIRE(PER.put((pChar) "//lmdb/ent_big/tx_pop", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);

			REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
			REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

			THEN("We get expected structure") {
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_pop") == SERVICE_NO_ERROR);

				REQUIRE(pTuple(p_tx_pop->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
				REQUIRE(strcmp(pTuple(p_tx_pop->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

				REQUIRE(pTuple(p_txn->p_block)->get_block(0)->cell_type == CELL_TYPE_STRING);
				REQUIRE(strcmp(pTuple(p_txn->p_block)->get_block(0)->get_string(0), txt.begin()->first.c_str()) == 0);

				compare_full_blocks(p_txn->p_block, p_tx_pop->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_str") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_str->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_chr") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_chr->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_int") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_int->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_rea") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_rea->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_tim") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_four/two") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/four") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tx_pop") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/tx_str", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tx_str") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_str->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/~first") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/~last") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.locate(location, (pChar) "//lmdb/ent small/~last") == SERVICE_ERROR_PARSING_NAMES);

				REQUIRE(PER.locate(location, (pChar) "//lmdb/ent_small/~last") == SERVICE_NO_ERROR);

				REQUIRE(strcmp(location.base,	"lmdb")		 == 0);
				REQUIRE(strcmp(location.entity, "ent_small") == 0);
				REQUIRE(strcmp(location.key,	"~last")	 == 0);

				REQUIRE(PER.locate(location, (pChar) "//lmdb/ent_small/tx_pop") == SERVICE_NO_ERROR);

				REQUIRE(strcmp(location.base,	"lmdb")		 == 0);
				REQUIRE(strcmp(location.entity, "ent_small") == 0);
				REQUIRE(strcmp(location.key,	"tx_pop")	 == 0);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/~pfirst") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tx_pop") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.put((pChar) "//lmdb/ent_small/pop", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/str", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/chr", p_tx_chr->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/int", p_tx_int->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/rea", p_tx_rea->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_small/tim", p_tx_tim->p_block, 0) == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tx_chr~prev") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tx_chr~next") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_small/tx_chr~next") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/tim") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/pop") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_pop->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/str") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_str->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/rea") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_rea->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/int") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_int->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/chr") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_chr->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_big/tx_pop") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_pop") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_big/tx_str") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_str") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_chr") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_chr->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_big/tx_chr") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_big/tx_chr") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_small/rea") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/rea") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_small/pop") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/pop") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/int") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_int->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.remove((pChar) "//lmdb/ent_small/int") == SERVICE_NO_ERROR);
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_small/int") == SERVICE_ERROR_BLOCK_NOT_FOUND);
			}
			REQUIRE(PER.remove((pChar) "//lmdb/ent_small") == SERVICE_NO_ERROR);
			REQUIRE(PER.remove((pChar) "//lmdb/ent_big")	== SERVICE_NO_ERROR);
		}
/*
		WHEN("We test get(2)/get(3)/head(1)/head(2) of entities") {
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_one") == SERVICE_NO_ERROR);

			REQUIRE(PER.put((pChar) "//lmdb/ent_one/pop", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_one/rea", p_tx_rea->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_one/txt", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_one/tim", p_tx_tim->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_one/int", p_tx_int->p_block, 0) == SERVICE_NO_ERROR);

			THEN("We get expected structure") {
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/pop", (pChar) "key") == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
				REQUIRE(p_txn->p_block->size == 5);
				REQUIRE(p_txn->p_block->rank == 1);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/rea", p_tx_fil->p_block) == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
				REQUIRE(p_txn->p_block->size == 8);
				REQUIRE(p_txn->p_block->rank == 2);
				REQUIRE(p_txn->p_block->tensor.cell_double[0] == 1.23);
				REQUIRE(p_txn->p_block->tensor.cell_double[1] == 0);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/tim", p_tx_fil->p_block) == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TIME);
				REQUIRE(p_txn->p_block->size == 2);
				REQUIRE(p_txn->p_block->rank == 2);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/int", p_tx_fil->p_block) == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_INTEGER);
				REQUIRE(p_txn->p_block->size == 16);
				REQUIRE(p_txn->p_block->rank == 2);
				REQUIRE(p_txn->p_block->tensor.cell_int[0] == 1);
				REQUIRE(p_txn->p_block->tensor.cell_int[1] == 0);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/txt", p_tx_rea->p_block) == SERVICE_ERROR_NEW_BLOCK_ARGS);

				REQUIRE(PER.put((pChar) "//lmdb/ent_one/~last", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);
				REQUIRE(PER.put((pChar) "//lmdb/ent_one/~last", p_tx_rea->p_block, 0) == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~plast", p_tx_fil->p_block) == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_DOUBLE);
				REQUIRE(p_txn->p_block->size == 8);
				REQUIRE(p_txn->p_block->rank == 2);
				REQUIRE(p_txn->p_block->tensor.cell_double[0] == 1.23);
				REQUIRE(p_txn->p_block->tensor.cell_double[1] == 0);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_one/~plast", (pChar) "key") == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_STRING);
				REQUIRE(p_txn->p_block->size == 5);
				REQUIRE(p_txn->p_block->rank == 1);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.header(p_txn, (pChar) "//lmdb/ent_one/pop") == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TUPLE_ITEM);
				REQUIRE(p_txn->p_block->size == 2);
				REQUIRE(p_txn->p_block->rank == 1);

				REQUIRE(p_txn->p_block->tensor.cell_item[0].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_txn->p_block->tensor.cell_item[0].rank == 1);
				REQUIRE(p_txn->p_block->tensor.cell_item[0].dim[0] == 5);

				REQUIRE(p_txn->p_block->tensor.cell_item[1].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_txn->p_block->tensor.cell_item[1].rank == 1);
				REQUIRE(p_txn->p_block->tensor.cell_item[1].dim[0] == 5);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.header(p_txn, (pChar) "//lmdb/ent_one/tim") == SERVICE_NO_ERROR);
				REQUIRE(p_txn->p_block->cell_type == CELL_TYPE_TIME);
				REQUIRE(p_txn->p_block->size == 20);
				REQUIRE(p_txn->p_block->rank == 2);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.header(p_txn, (pChar) "//lmdb/ent_one/oops") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.header(p_txn, (pChar) "//lmdb/oops/oops") == SERVICE_ERROR_ENTITY_NOT_FOUND);

				StaticBlockHeader hea;

				REQUIRE(PER.header(hea, (pChar) "//lmdb/ent_one/pop") == SERVICE_NO_ERROR);
				REQUIRE(hea.cell_type == CELL_TYPE_TUPLE_ITEM);
				REQUIRE(hea.size == 2);
				REQUIRE(hea.rank == 1);

				REQUIRE(PER.header(hea, (pChar) "//lmdb/ent_one/tim") == SERVICE_NO_ERROR);
				REQUIRE(hea.cell_type == CELL_TYPE_TIME);
				REQUIRE(hea.size == 20);
				REQUIRE(hea.rank == 2);

				REQUIRE(PER.header(hea, (pChar) "//lmdb/ent_one/oops") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.header(hea, (pChar) "//lmdb/oops/oops") == SERVICE_ERROR_ENTITY_NOT_FOUND);

				REQUIRE(PER.header(hea, (pChar) "//lmdb/ent_one/~plast") == SERVICE_NO_ERROR);
				REQUIRE(PER.header(p_txn, (pChar) "//lmdb/ent_one/~pfirst") == SERVICE_NO_ERROR);
				PER.destroy_transaction(p_txn);
			}
			REQUIRE(PER.remove((pChar) "//lmdb/ent_one") == SERVICE_NO_ERROR);

			REQUIRE(PER.name.size() == 0);
			REQUIRE(PER.deque_ent.size() == 0);
			REQUIRE(PER.deque_key.size() == 0);
		}
		WHEN("We test copy") {
			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_source") == SERVICE_NO_ERROR);

			REQUIRE(PER.put((pChar) "//lmdb/ent_source/pop", p_tx_pop->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_source/rea", p_tx_rea->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_source/txt", p_tx_str->p_block, 0) == SERVICE_NO_ERROR);
			REQUIRE(PER.put((pChar) "//lmdb/ent_source/tim", p_tx_tim->p_block, 0) == SERVICE_NO_ERROR);

			REQUIRE(PER.new_entity((pChar) "//lmdb/ent_dest") == SERVICE_NO_ERROR);

			THEN("We get expected structure") {
				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_pop") == SERVICE_ERROR_EMPTY_ENTITY);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/copy_pop", (pChar) "//lmdb/ent_source/pop") == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/bla_bla") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_pop") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_pop->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_rea") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/copy_rea", (pChar) "//lmdb/ent_source/rea") == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_rea") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_rea->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_txt") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/copy_txt", (pChar) "//lmdb/ent_source/txt") == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_txt") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_str->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_tim") == SERVICE_ERROR_BLOCK_NOT_FOUND);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/copy_tim", (pChar) "//lmdb/ent_source/tim") == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/copy_tim") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_source/~last") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_source/tim") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/more_tim", (pChar) "//lmdb/ent_source/~plast") == SERVICE_NO_ERROR);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_dest/more_tim") == SERVICE_NO_ERROR);
				compare_full_blocks(p_txn->p_block, p_tx_tim->p_block);
				PER.destroy_transaction(p_txn);

				REQUIRE(PER.get(p_txn, (pChar) "//lmdb/ent_source/tim") == SERVICE_ERROR_BLOCK_NOT_FOUND);

				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/more_tim", (pChar) "//lmdb/ent_source/~plast") == SERVICE_NO_ERROR);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/more_tim", (pChar) "//lmdb/ent_source/~plast") == SERVICE_NO_ERROR);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/more_tim", (pChar) "//lmdb/ent_source/~plast") == SERVICE_NO_ERROR);
				REQUIRE(PER.copy((pChar) "//lmdb/ent_dest/more_tim", (pChar) "//lmdb/ent_source/~plast") == SERVICE_ERROR_EMPTY_ENTITY);
			}
			REQUIRE(PER.remove((pChar) "//lmdb/ent_source") == SERVICE_NO_ERROR);
			REQUIRE(PER.remove((pChar) "//lmdb/ent_dest")	 == SERVICE_NO_ERROR);

			REQUIRE(PER.name.size() == 0);
			REQUIRE(PER.deque_ent.size() == 0);
			REQUIRE(PER.deque_key.size() == 0);
		}
*/
		PER.destroy_transaction(p_tx_pop);
		PER.destroy_transaction(p_tx_str);
		PER.destroy_transaction(p_tx_chr);
		PER.destroy_transaction(p_tx_int);
		PER.destroy_transaction(p_tx_rea);
		PER.destroy_transaction(p_tx_tim);
		PER.destroy_transaction(p_tx_fil);
	}
	REQUIRE(PER.alloc_bytes == PER.max_transactions*sizeof(StoredTransaction));
	REQUIRE(PER.p_buffer != nullptr);
	REQUIRE(PER._lock_	 == 0);

	REQUIRE(PER.shut_down() == SERVICE_NO_ERROR);

	REQUIRE(PER.alloc_bytes == 0);
	REQUIRE(PER.p_buffer == nullptr);
	REQUIRE(PER.p_free	 == nullptr);
	REQUIRE(PER._lock_	 == 0);
}
