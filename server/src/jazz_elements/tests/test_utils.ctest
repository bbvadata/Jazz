/* Jazz (c) 2018 kaalam.ai (The Authors of Jazz), using (under the same license):

   BBVA - Jazz: A lightweight analytical web server for data-driven applications.

   Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

  This product includes software developed at

   BBVA (https://www.bbva.com/)

   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/


using namespace jazz_utils;


SCENARIO("Testing CountBytesFromUtf8().") {
	char buf1[80] = {"NineChars"};
	char buf2[80] = {"ácido"};
	char buf3[80] = {"eñe"};
	char buf4[80] = {"\xF0...\xE0..\xC0.Z"};

	REQUIRE(CountBytesFromUtf8(buf1, 0) ==	0);
	REQUIRE(CountBytesFromUtf8(buf1, 1) ==	1);
	REQUIRE(CountBytesFromUtf8(buf1, 2) ==	2);
	REQUIRE(CountBytesFromUtf8(buf1, 9) ==	9);

	REQUIRE(CountBytesFromUtf8(buf2, 0) ==	0);
	REQUIRE(CountBytesFromUtf8(buf2, 1) ==	2);
	REQUIRE(CountBytesFromUtf8(buf2, 2) ==	3);
	REQUIRE(CountBytesFromUtf8(buf2, 5) ==	6);

	REQUIRE(CountBytesFromUtf8(buf3, 0) ==	0);
	REQUIRE(CountBytesFromUtf8(buf3, 1) ==	1);
	REQUIRE(CountBytesFromUtf8(buf3, 2) ==	3);
	REQUIRE(CountBytesFromUtf8(buf3, 3) ==	4);

	REQUIRE(CountBytesFromUtf8(buf4, 0) ==	0);
	REQUIRE(CountBytesFromUtf8(buf4, 1) ==	4);
	REQUIRE(CountBytesFromUtf8(buf4, 2) ==	7);
	REQUIRE(CountBytesFromUtf8(buf4, 3) ==	9);
	REQUIRE(CountBytesFromUtf8(buf4, 4) == 10);
}


SCENARIO("Testing ExpandEscapeSequences().") {
	char buff[80];

	buff[0] = 0;
	REQUIRE(!strlen(ExpandEscapeSequences(buff)));

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "Hello, world!")), "Hello, world!"));

	buff[5] = 4;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\abc")), "\abc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\ab")), "9\ab"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\a")), "89\a"));

	REQUIRE(buff[5] == 4);
	buff[3] = 2;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\a")), "\a"));

	REQUIRE(buff[3] == 2);
	buff[5] = 5;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\bbc")), "\bbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\bb")), "9\bb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\a")), "89\a"));

	REQUIRE(buff[5] == 5);
	buff[3] = 3;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\b")), "\b"));

	REQUIRE(buff[3] == 3);
	buff[5] = 6;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\fbc")), "\fbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\fb")), "9\fb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\f")), "89\f"));

	REQUIRE(buff[5] == 6);
	buff[3] = 4;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\f")), "\f"));

	REQUIRE(buff[3] == 4);
	buff[5] = 7;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\nbc")), "\nbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\nb")), "9\nb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\n")), "89\n"));

	REQUIRE(buff[5] == 7);
	buff[3] = 5;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\n")), "\n"));

	REQUIRE(buff[3] == 5);
	buff[5] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\rbc")), "\rbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\rb")), "9\rb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\r")), "89\r"));

	REQUIRE(buff[5] == 8);
	buff[3] = 6;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\r")), "\r"));

	REQUIRE(buff[3] == 6);
	buff[5] = 9;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\tbc")), "\tbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\tb")), "9\tb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\t")), "89\t"));

	REQUIRE(buff[5] == 9);
	buff[3] = 7;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\t")), "\t"));

	REQUIRE(buff[3] == 7);
	buff[5] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\vbc")), "\vbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\vb")), "9\vb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\v")), "89\v"));

	REQUIRE(buff[5] == 8);
	buff[3] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\v")), "\v"));

	REQUIRE(buff[3] == 8);
	buff[5] = 7;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\abc")), "\abc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\ab")), "9\ab"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\a")), "89\a"));

	REQUIRE(buff[5] == 7);
	buff[3] = 9;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\a")), "\a"));

	REQUIRE(buff[3] == 9);
	buff[5] = 6;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\\bc")), "\\bc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\\\b")), "9\\b"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\\\")), "89\\"));

	REQUIRE(buff[5] == 6);
	buff[3] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\\")), "\\"));

	REQUIRE(buff[3] == 8);
	buff[5] = 5;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\'bc")), "\'bc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\\'b")), "9\'b"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\\'")), "89\'"));

	REQUIRE(buff[5] == 5);
	buff[3] = 7;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\'")), "\'"));

	REQUIRE(buff[3] == 7);
	buff[5] = 4;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\"bc")), "\"bc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\\"b")), "9\"b"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\\"")), "89\""));

	REQUIRE(buff[5] == 4);
	buff[3] = 6;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\a")), "\a"));

	REQUIRE(buff[3] == 6);
	buff[5] = 3;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\\?bc")), "\?bc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\\?b")), "9\?b"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\\?")), "89\?"));

	REQUIRE(buff[5] == 3);
	buff[3] = 5;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\a")), "\a"));

	REQUIRE(buff[3] == 5);
	buff[7] = 1;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\141bc")), "abc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "d\\145f")), "def"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "z\\040A")), "z A"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "z\\40A")),	 "z40A"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "78\\071")), "789"));

	REQUIRE(buff[7] == 1);
	buff[5] = 9;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\112")), "J"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\011")), "\t"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\11")),  "11"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\007")), "\a"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\07")),  "07"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\7")),	  "7"));

	REQUIRE(buff[5] == 9);
	buff[5] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\cbc")), "cbc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "9\\cb")), "9cb"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "89\\c")), "89c"));

	REQUIRE(buff[5] == 8);
	buff[3] = 7;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\c")), "c"));

	REQUIRE(buff[3] == 7);
	buff[7] = 9;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x61bc")), "abc"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "d\\x65f")), "def"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "z\\x20A")), "z A"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "z\\x09A")), "z\tA"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "z\\x9G")),	 "zx9G"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "78\\x39")), "789"));

	REQUIRE(buff[7] == 9);
	buff[5] = 8;

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x4a")), "J"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x4A")), "J"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x09")), "\t"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x9")),  "x9"));
	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x78")), "x"));

	REQUIRE(buff[5] == 8);

	REQUIRE(!strcmp(ExpandEscapeSequences(strcpy(buff, "\\x078")), "\a8"));
}


//TODO: Find a better way to test an existing process by name (creating it?)
SCENARIO("Testing FindProcessIdByName().") {
	REQUIRE(FindProcessIdByName("aa0a30761d28f10edac1a8a8de832ed2") == 0);
//	REQUIRE(FindProcessIdByName("/usr/bin/") != 0);
}


SCENARIO("Testing MurmurHash64A().") {
	REQUIRE(sizeof(uint64_t) == 8);
	REQUIRE(MURMUR_SEED	== 76493);

	int today = 02022017;

	REQUIRE(MurmurHash64A(&today, 4) == 1361846023767824266);
	//cout << "Origin of time's hash " << MurmurHash64A(&today, 4) << endl;

	GIVEN("Three sets of vars of different types. A!=B, A==C") {
		int	   ia	  = 299792458;
		double da	  = 3.141592;
		char   sa[16] = "Hello, world!";

		REQUIRE(sizeof(ia) == 4);
		REQUIRE(sizeof(da) == 8);
		REQUIRE(sizeof(sa) == 16);

		int	   ib	  = 299792758;
		double db	  = 3.141591999;
		char   sb[16] = "Hello, world.";

		int	   ic	  = 299792458;
		double dc	  = 3.141592;
		char   sc[16] = "Hello, world!";

		uint64_t hia, hda, hsa;

		hia = MurmurHash64A(&ia, sizeof(ia));
		hda = MurmurHash64A(&da, sizeof(da));
		hsa = MurmurHash64A(&sa, sizeof(sa));

		WHEN("I hash the first set.") {
			THEN("I get different hashes ...") {
				REQUIRE(hia != hda);
				REQUIRE(hia != hsa);
				REQUIRE(hda != hsa);
			}

			THEN("... but identical if I repeat.") {
				REQUIRE(hia == MurmurHash64A(&ia, sizeof(ia)));
				REQUIRE(hda == MurmurHash64A(&da, sizeof(da)));
				REQUIRE(hsa == MurmurHash64A(&sa, sizeof(sa)));
			}
		}
		WHEN("I hash the second set.") {
			uint64_t hib, hdb, hsb;

			hib = MurmurHash64A(&ib, sizeof(ib));
			hdb = MurmurHash64A(&db, sizeof(db));
			hsb = MurmurHash64A(&sb, sizeof(sb));

			THEN("I get different hashes.") {
				REQUIRE(hib != hdb);
				REQUIRE(hib != hsb);
				REQUIRE(hdb != hsb);
			}

			THEN("They are all different from those in A ...") {
				REQUIRE(hia != hib);
				REQUIRE(hda != hdb);
				REQUIRE(hda != hdb);
			}

			THEN("... but identical if I repeat.") {
				REQUIRE(hib == MurmurHash64A(&ib, sizeof(ib)));
				REQUIRE(hdb == MurmurHash64A(&db, sizeof(db)));
				REQUIRE(hsb == MurmurHash64A(&sb, sizeof(sb)));
			}
		}
		WHEN("I hash the third set.") {
			uint64_t hic, hdc, hsc;

			hic = MurmurHash64A(&ic, sizeof(ic));
			hdc = MurmurHash64A(&dc, sizeof(dc));
			hsc = MurmurHash64A(&sc, sizeof(sc));

			THEN("I get different hashes.") {
				REQUIRE(hic != hdc);
				REQUIRE(hic != hsc);
				REQUIRE(hdc != hsc);
			}

			THEN("They are all identical to those in A ...") {
				REQUIRE(hia == hic);
				REQUIRE(hda == hdc);
				REQUIRE(hda == hdc);
			}

			THEN("... and identical if I repeat.") {
				REQUIRE(hic == MurmurHash64A(&ic, sizeof(ic)));
				REQUIRE(hdc == MurmurHash64A(&dc, sizeof(dc)));
				REQUIRE(hsc == MurmurHash64A(&sc, sizeof(sc)));
			}
		}
	}
	char buffer[100];
	THEN("I can hash all lengths from 0 to 64 without boundary issues.") {
		for (int i = 0; i < 65; i++) {
			for (int j = 0; j < i; j++) buffer[10 + j] = 2*j;

			uint64_t hok;

			hok = MurmurHash64A(&buffer[10], i);

			buffer[9] = 2*i;

			REQUIRE(MurmurHash64A(&buffer[10], i) == hok);

			buffer[9] = 93;

			REQUIRE(MurmurHash64A(&buffer[10], i) == hok);

			buffer[10 + i] = 2*i;

			REQUIRE(MurmurHash64A(&buffer[10], i) == hok);

			buffer[10 + i] = 11;

			REQUIRE(MurmurHash64A(&buffer[10], i) == hok);

			buffer[10] += 3;

			if (i) {
				REQUIRE(MurmurHash64A(&buffer[10], i) != hok);
			} else {
				REQUIRE(MurmurHash64A(&buffer[10], i) == hok);
			}

			hok = MurmurHash64A(&buffer[10], i);

			buffer[9 + i] += 7;

			if (i) {
				REQUIRE(MurmurHash64A(&buffer[10], i) != hok);
			} else {
				REQUIRE(MurmurHash64A(&buffer[10], i) == hok);
			}
		}
	}
}


SCENARIO("Testing TenBitsAtAddress().") {
	REQUIRE(TenBitsAtAddress("7") == 0x17);
	REQUIRE(TenBitsAtAddress("0") == 0x10);
	REQUIRE(TenBitsAtAddress("a") == 0x01);

	REQUIRE(TenBitsAtAddress("77") == 0x2f7);
	REQUIRE(TenBitsAtAddress("70") == 0x217);
	REQUIRE(TenBitsAtAddress("7a") == 0x037);
	REQUIRE(TenBitsAtAddress("a7") == 0x2e1);
	REQUIRE(TenBitsAtAddress("a0") == 0x201);
	REQUIRE(TenBitsAtAddress("aa") == 0x021);
	REQUIRE(TenBitsAtAddress("00") == 0x210);

	REQUIRE(TenBitsAtAddress("77x")	  == 0x2f7);
	REQUIRE(TenBitsAtAddress("70y")	  == 0x217);
	REQUIRE(TenBitsAtAddress("7az")	  == 0x037);
	REQUIRE(TenBitsAtAddress("a7xx")  == 0x2e1);
	REQUIRE(TenBitsAtAddress("a0yy")  == 0x201);
	REQUIRE(TenBitsAtAddress("aa_zz") == 0x021);
	REQUIRE(TenBitsAtAddress("00ttt") == 0x210);
}


SCENARIO("Testing CleanConfigArgument().") {
	std::string a("This Is\tIt");

	std::string b = CleanConfigArgument(a);

	REQUIRE(b == "ThisIsIt");

	REQUIRE(CleanConfigArgument(" This Is It")	== b);
	REQUIRE(CleanConfigArgument("This Is It")	== b);
	REQUIRE(CleanConfigArgument("This Is It ")	== b);
	REQUIRE(CleanConfigArgument("This Is It\t") == b);
	REQUIRE(CleanConfigArgument("ThisIsIt")		== b);

	REQUIRE(CleanConfigArgument(" ")   == "");
	REQUIRE(CleanConfigArgument("\t")  == "");
	REQUIRE(CleanConfigArgument(" \t") == "");
	REQUIRE(CleanConfigArgument("")	   == "");

	REQUIRE(CleanConfigArgument("\"This is it\"")	== "This is it");
	REQUIRE(CleanConfigArgument("\"This is it\" .") == "This is it.");
}


SCENARIO("Testing class JazzConfigFile") {
	JazzConfigFile conf1("/tmp/f5d0fb3fbf831bfdb5273d22e8f73af1");

	REQUIRE(conf1.num_keys() == 0);

	conf1.debug_put("key01", "6.5.4.3");

	REQUIRE(conf1.num_keys() == 1);

	conf1.debug_put("key02", "8.7");
	conf1.debug_put("key03", "9");

	REQUIRE(conf1.num_keys() == 3);

	int	   tt_cfg_i = 54321;
	double tt_cfg_d = 123.456;
	std::string tt_cfg_s ("nothing");

	REQUIRE(!conf1.get_key("key00", tt_cfg_i));
	REQUIRE(!conf1.get_key("key00", tt_cfg_d));
	REQUIRE(!conf1.get_key("key00", tt_cfg_s));

	REQUIRE((tt_cfg_i == 54321 && tt_cfg_d == 123.456 && tt_cfg_s.compare("nothing") == 0));

	REQUIRE(!conf1.get_key("key01", tt_cfg_i));
	REQUIRE(!conf1.get_key("key01", tt_cfg_d));
	REQUIRE( conf1.get_key("key01", tt_cfg_s));

	REQUIRE((tt_cfg_i == 54321 && tt_cfg_d == 123.456 && tt_cfg_s.compare("6.5.4.3") == 0));

	REQUIRE(!conf1.get_key("key02", tt_cfg_i));
	REQUIRE( conf1.get_key("key02", tt_cfg_d));
	REQUIRE( conf1.get_key("key02", tt_cfg_s));

	REQUIRE((tt_cfg_i == 54321 && tt_cfg_d == 8.7 && tt_cfg_s.compare("8.7") == 0));

	REQUIRE( conf1.get_key("key03", tt_cfg_i));
	REQUIRE( conf1.get_key("key03", tt_cfg_d));
	REQUIRE( conf1.get_key("key03", tt_cfg_s));

	REQUIRE((tt_cfg_i == 9 && tt_cfg_d == 9.0 && tt_cfg_s.compare("9") == 0));

	conf1.debug_put("key03", "");

	REQUIRE(!conf1.get_key("key03", tt_cfg_i));
	REQUIRE(!conf1.get_key("key03", tt_cfg_d));
	REQUIRE(!conf1.get_key("key03", tt_cfg_s));

	REQUIRE((tt_cfg_i == 9 && tt_cfg_d == 9.0 && tt_cfg_s.compare("9") == 0));

	std::ofstream fh;

	fh.open ("/tmp/93fd8e49efe4b4b2a2623d1f22d4ea40");
	fh << "// Test config file\n";
	fh << "\n";
	fh << "0=1\n";
	fh << "0 = 0\n";
	fh << "one=1\n";
	fh << "two = 2\n";
	fh << "three = 3// three = 4\n";
	fh << "four = 44		// three = 4\n";
	fh << "five\t = 5		// three = 4\n";
	fh << "\n";
	fh << "six\t = 3 + 3\n";
	fh << "seven\t = \t3 + 4//\n";
	fh << "eight\t = \t\"4 + 4\"//\n";
	fh << " ni ne\t = \t\"5 + 4\"\n";
	fh << " \"one zero\"\t = 10\n";
	fh << "\n";
	fh << "four = 4		// fixed!\n";
	fh << "\n";
	fh << "\\eof\n";
	fh.close();

	JazzConfigFile conf2("/tmp/93fd8e49efe4b4b2a2623d1f22d4ea40");

	REQUIRE(conf2.num_keys() == 11);

	REQUIRE(conf2.get_key("0", tt_cfg_i));
	REQUIRE(conf2.get_key("0", tt_cfg_d));
	REQUIRE(conf2.get_key("0", tt_cfg_s));

	REQUIRE((tt_cfg_i == 0 && tt_cfg_d == 0.0 && tt_cfg_s.compare("0") == 0));

	REQUIRE(conf2.get_key("one", tt_cfg_i));
	REQUIRE(conf2.get_key("one", tt_cfg_d));
	REQUIRE(conf2.get_key("one", tt_cfg_s));

	REQUIRE((tt_cfg_i == 1 && tt_cfg_d == 1.0 && tt_cfg_s.compare("1") == 0));

	REQUIRE(conf2.get_key("two", tt_cfg_i));
	REQUIRE(conf2.get_key("two", tt_cfg_d));
	REQUIRE(conf2.get_key("two", tt_cfg_s));

	REQUIRE((tt_cfg_i == 2 && tt_cfg_d == 2.0 && tt_cfg_s.compare("2") == 0));

	REQUIRE(conf2.get_key("three", tt_cfg_i));
	REQUIRE(conf2.get_key("three", tt_cfg_d));
	REQUIRE(conf2.get_key("three", tt_cfg_s));

	REQUIRE((tt_cfg_i == 3 && tt_cfg_d == 3.0 && tt_cfg_s.compare("3") == 0));

	REQUIRE(conf2.get_key("four", tt_cfg_i));
	REQUIRE(conf2.get_key("four", tt_cfg_d));
	REQUIRE(conf2.get_key("four", tt_cfg_s));

	REQUIRE((tt_cfg_i == 4 && tt_cfg_d == 4.0 && tt_cfg_s.compare("4") == 0));

	REQUIRE(conf2.get_key("five", tt_cfg_i));
	REQUIRE(conf2.get_key("five", tt_cfg_d));
	REQUIRE(conf2.get_key("five", tt_cfg_s));

	REQUIRE((tt_cfg_i == 5 && tt_cfg_d == 5.0 && tt_cfg_s.compare("5") == 0));

	REQUIRE(!conf2.get_key("six", tt_cfg_i));
	REQUIRE(!conf2.get_key("six", tt_cfg_d));
	REQUIRE( conf2.get_key("six", tt_cfg_s));

	REQUIRE((tt_cfg_i == 5 && tt_cfg_d == 5.0 && tt_cfg_s.compare("3+3") == 0));

	REQUIRE(!conf2.get_key("seven", tt_cfg_i));
	REQUIRE(!conf2.get_key("seven", tt_cfg_d));
	REQUIRE( conf2.get_key("seven", tt_cfg_s));

	REQUIRE((tt_cfg_i == 5 && tt_cfg_d == 5.0 && tt_cfg_s.compare("3+4") == 0));

	REQUIRE(!conf2.get_key("eight", tt_cfg_i));
	REQUIRE(!conf2.get_key("eight", tt_cfg_d));
	REQUIRE( conf2.get_key("eight", tt_cfg_s));

	REQUIRE((tt_cfg_i == 5 && tt_cfg_d == 5.0 && tt_cfg_s.compare("4 + 4") == 0));

	REQUIRE(!conf2.get_key("nine", tt_cfg_i));
	REQUIRE(!conf2.get_key("nine", tt_cfg_d));
	REQUIRE( conf2.get_key("nine", tt_cfg_s));

	REQUIRE((tt_cfg_i == 5 && tt_cfg_d == 5.0 && tt_cfg_s.compare("5 + 4") == 0));

	REQUIRE(conf2.get_key("one zero", tt_cfg_i));
	REQUIRE(conf2.get_key("one zero", tt_cfg_d));
	REQUIRE(conf2.get_key("one zero", tt_cfg_s));

	REQUIRE((tt_cfg_i == 10 && tt_cfg_d == 10.0 && tt_cfg_s.compare("10") == 0));
}


SCENARIO("Testing class JazzLogger") {
	JazzLogger log1("/tmp/b7fcecb99b2947db7a04ef3b8ff684df/906f2f7fabf6dda97410bb508aeb0d35");

	char file_name [MAX_FILENAME_LENGTH];

	REQUIRE(log1.get_output_file_name(file_name, MAX_FILENAME_LENGTH) == 0);

	remove("/tmp/6c276a62bfa02bac0a135bf0066b5a99");

	JazzLogger log2("/tmp/6c276a62bfa02bac0a135bf0066b5a99");

	REQUIRE(log2.get_output_file_name(file_name, MAX_FILENAME_LENGTH) != 0);

	log2.log(LOG_MISS, "Missed it!");
	log2.log_printf(LOG_INFO, "log_printf(2+2=%d, name=%s, hex=%08x, pi=%4.2f)", 4, "me", 0xbadf00d, 3.141592);

	JazzLogger log3("/tmp/6c276a62bfa02bac0a135bf0066b5a99");

	REQUIRE(log3.get_output_file_name(file_name, MAX_FILENAME_LENGTH) != 0);

	log2.log(LOG_INFO, "Extended");

	std::ofstream fh;

	fh.open ("/tmp/jzz_unit_cnf.ini");
	fh << "// Config file\n";
	fh << "LOGGER_PATH = /tmp/jzz_unit_log.log\n";
	fh << "\\eof\n";
	fh.close();

	JazzConfigFile J_CONFIG("/tmp/jzz_unit_cnf.ini");

	std::string key;

	J_CONFIG.get_key("LOGGER_PATH", key);

	REQUIRE(strcmp("/tmp/jzz_unit_log.log", key.c_str()) == 0);

	JazzLogger log4(J_CONFIG, "LOGGER_PATH");

	REQUIRE(log4.get_output_file_name(file_name, MAX_FILENAME_LENGTH) != 0);

	REQUIRE(strcmp("/tmp/jzz_unit_log.log", file_name) == 0);
}


//TODO: Write test for function FileExists()
