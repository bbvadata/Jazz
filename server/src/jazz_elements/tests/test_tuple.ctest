/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


// #include <stl_whatever>


using namespace jazz_elements;


// Tests
// -----

SCENARIO("Testing tuple") {

	GIVEN("We have some kinds and tuples") {
		Answer k1, k2, k3, k4;

		pKind p_kind1 = (pKind) &k1, p_kind2 = (pKind) &k2, p_kind3 = (pKind) &k3, p_kind4 = (pKind) &k4;

		Answer t1, t2, t3, t4, t5, t6, t7, t8, t9;

		pTuple p_tup1 = (pTuple) &t1, p_tup2 = (pTuple) &t2, p_tup3 = (pTuple) &t3;
		pTuple p_tup4 = (pTuple) &t4, p_tup5 = (pTuple) &t5, p_tup6 = (pTuple) &t6;
		pTuple p_tup7 = (pTuple) &t7, p_tup8 = (pTuple) &t8, p_tup9 = (pTuple) &t9;

		AttributeMap attr_kind = {}, attr_tuple = {};

		attr_kind[BLOCK_ATTRIB_BLOCKTYPE] = (pChar) "kind";
		attr_kind[BLOCK_ATTRIB_SOURCE]	  = (pChar) "sys.kinds.ThisKind";

		attr_tuple[BLOCK_ATTRIB_BLOCKTYPE] = (pChar) "tuple";
		attr_tuple[BLOCK_ATTRIB_SOURCE]	   = (pChar) "ThisTuple";

		TensorDim image_640x480	= {16, 9, 3, 0, 0, 0};
		TensorDim image_rgb		= {-640, -480, 3, 0, 0, 0};
		TensorDim video_rgb		= {-999, -640, -480, 3, 0, 0};
		TensorDim audio_track	= {-999, 40, 0, 0, 0, 0};

		TensorDim one_cell		= {1, 0, 0, 0, 0, 0};

		AttributeMap empty_dims = {}, dims  = {};

		dims[-640] = (pChar) "width";
		dims[-480] = (pChar) "height";
		dims[-999] = (pChar) "num_frames";

		REQUIRE(p_kind1->new_kind(1, sizeof(Answer), attr_kind));
		REQUIRE(p_kind1->add_item(0, "buffer", image_640x480.dim, CELL_TYPE_BYTE, empty_dims));

		REQUIRE(p_kind2->new_kind(2, sizeof(Answer), attr_kind));
		REQUIRE(p_kind2->add_item(0, "buffer", image_rgb.dim, CELL_TYPE_BYTE,   dims));
		REQUIRE(p_kind2->add_item(1, "title",  one_cell.dim,  CELL_TYPE_STRING, dims));

		REQUIRE(p_kind3->new_kind(3, sizeof(Answer), attr_kind));
		REQUIRE(p_kind3->add_item(0, "buffer", video_rgb.dim,   CELL_TYPE_BYTE,	  dims));
		REQUIRE(p_kind3->add_item(1, "audio",  audio_track.dim, CELL_TYPE_INTEGER, dims));
		REQUIRE(p_kind3->add_item(2, "title",  one_cell.dim,	   CELL_TYPE_STRING,  dims));

		WHEN("Kind 1 passes .audit()") {
			REQUIRE(p_kind1->audit() == KIND_TYPE_KIND);

			THEN("We can check a few things") {
				REQUIRE(p_kind1->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind1->rank		  == 1);
				REQUIRE(p_kind1->range.dim[0] == 1);
				REQUIRE(p_kind1->size		  == 1);
				REQUIRE(p_kind1->has_NA		  == false);

				REQUIRE(p_kind1->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind1->tensor.cell_item[0].rank	   == 3);

				REQUIRE(!strcmp(p_kind1->item_name(0), "buffer"));

				REQUIRE(!strcmp(p_kind1->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind1->find_attribute(BLOCK_ATTRIB_SOURCE),	 "sys.kinds.ThisKind"));

				REQUIRE(p_kind1->num_dimensions() == 0);

				Answer ans;

				p_kind1->dimension_names(&ans);
				REQUIRE(ans.text[0] == 0);
			}
		}

		WHEN("Kind 2 passes .audit()") {
			REQUIRE(p_kind2->audit() == KIND_TYPE_KIND);

			THEN("We can check a few types") {
				REQUIRE(p_kind2->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind2->rank		  == 1);
				REQUIRE(p_kind2->range.dim[0] == 1);
				REQUIRE(p_kind2->size		  == 2);
				REQUIRE(p_kind2->has_NA		  == false);

				REQUIRE(p_kind2->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind2->tensor.cell_item[0].rank	   == 3);

				REQUIRE(p_kind2->tensor.cell_item[1].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_kind2->tensor.cell_item[1].rank	   == 1);

				REQUIRE(!strcmp(p_kind2->item_name(0), "buffer"));
				REQUIRE(!strcmp(p_kind2->item_name(1), "title"));

				REQUIRE(!strcmp(p_kind2->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind2->find_attribute(BLOCK_ATTRIB_SOURCE),	 "sys.kinds.ThisKind"));

				REQUIRE(p_kind2->num_dimensions() == 2);

				Answer ans;

				p_kind2->dimension_names(&ans);
				REQUIRE(!strcmp(ans.text, "width,height"));
			}
		}

		WHEN("Kind 3 passes .audit()") {
			REQUIRE(p_kind3->audit() == KIND_TYPE_KIND);

			THEN("We can check a few types") {
				REQUIRE(p_kind3->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind3->rank		  == 1);
				REQUIRE(p_kind3->range.dim[0] == 1);
				REQUIRE(p_kind3->size		  == 3);
				REQUIRE(p_kind3->has_NA		  == false);

				REQUIRE(p_kind3->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind3->tensor.cell_item[0].rank	   == 4);

				REQUIRE(p_kind3->tensor.cell_item[1].cell_type == CELL_TYPE_INTEGER);
				REQUIRE(p_kind3->tensor.cell_item[1].rank	   == 2);

				REQUIRE(p_kind3->tensor.cell_item[2].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_kind3->tensor.cell_item[2].rank	   == 1);

				REQUIRE(!strcmp(p_kind3->item_name(0), "buffer"));
				REQUIRE(!strcmp(p_kind3->item_name(1), "audio"));
				REQUIRE(!strcmp(p_kind3->item_name(2), "title"));

				REQUIRE(!strcmp(p_kind3->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind3->find_attribute(BLOCK_ATTRIB_SOURCE),	 "sys.kinds.ThisKind"));

				REQUIRE(p_kind3->num_dimensions() == 3);

				Answer ans;

				p_kind3->dimension_names(&ans);
				REQUIRE(!strcmp(ans.text, "num_frames,width,height"));
			}
		}
/*
		inline bool new_tuple (int num_bytes)
		inline bool add_item (pBlock p_block)
		inline bool close_tuple (pNames		   p_names,
								 AttributeMap &attr,
								 int		  *p_levels = nullptr)
		inline int *p_attribute_keys()
		inline char *item_name(int idx)
		inline void get_dimensions(int item, int *p_dim)
		inline bool validate_index(int item, int *p_idx)
		inline int validate_offset(int item, int offset)
		inline int get_offset(int item, int *p_idx)
		inline void get_index(int item, int offset, int *p_idx)
		inline char *get_string(int item, int *p_idx)
		inline char *get_string(int item, int offset)
		inline void set_string(int item, int *p_idx, const char *p_str)
		inline void set_string(int item, int offset, const char *p_str)
		inline bool is_a(pKind kind)
		inline int audit()
*/

	}
}

