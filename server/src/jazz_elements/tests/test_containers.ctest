/* Jazz (c) 2018 kaalam.ai (The Authors of Jazz), using (under the same license):

   1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

   2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

		Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

	  This product includes software developed at

	   BBVA (https://www.bbva.com/)

   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

#include <pthread.h>
#include <sys/stat.h>


using namespace jazz_containers;


// Functions to support testing
// ----------------------------

class PseudoBuffer {
	public:

		inline void writer() {
			a[0] = (a[63]*16381 + 1) % 32749;
			for (int i = 1; i < 64; i++)
				a[i] = (a[i - 1]*16381 + 1) % 32749;

			b[0] = ((a[0] + b[63])*16381 + 3) % 32749;
			for (int i = 1; i < 64; i++)
				b[i] = (b[i - 1]*16381 + 1) % 32749;

			for (int i = 0; i < 64; i++)
				c[i] = a[i]*b[i];
		}

		inline int reader(int pid) {
			int i = pid % 64;

			return a[i]*b[i] - c[i];
		}

		JazzLock readers {0}, writers {0}, thread_errors {0}, reads_ok {0};

		int a[64] = {}, b[64] = {}, c[64] = {};

};

PseudoBuffer   PSB;
JazzBlockKeepr JBK;

static void *unsafe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 100; k++){
		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);
	}

	return (void *) 0;
}

static void *unsafe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		PSB.writer();
	}

	return (void *) 0;
}

static void *safe_reader(void *null) {
	PSB.readers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 1000; k++){
		JBK.enter_reading();

		if (PSB.reader(k) == 0)
			PSB.reads_ok.fetch_add(1, std::memory_order_relaxed);
		else
			PSB.thread_errors.fetch_add(1, std::memory_order_relaxed);

		JBK.leave_reading();
	}

	return (void *) 0;
}

static void *safe_writer(void *null) {
	PSB.writers.fetch_add(1, std::memory_order_relaxed);

	for (int k = 0; k < 10; k++){
		JBK.enter_writing();

		PSB.writer();

		JBK.leave_writing();
	}

	return (void *) 0;
}

void check_and_close_jazz_block(pJazzBlock p_block, int set_has_NA = JAZZ_SET_HAS_NA_AUTO)
{
	pJazzStringBuffer psb = p_block->p_string_buffer();

	REQUIRE(p_block->total_bytes == sizeof(JazzBlockHeader) +
									(uintptr_t) p_block->align_128bit((p_block->cell_type & 0xf)*p_block->size) +
									2*sizeof(int)*p_block->num_attributes +
									sizeof(JazzStringBuffer) + psb->buffer_size);

	char *pt1 = (char *) &psb->buffer[psb->last_idx],
		 *pt2 = (char *) p_block + p_block->total_bytes;

	REQUIRE(pt2 > pt1);

	close_jazz_block(p_block, set_has_NA);
}

pJazzQueueItem highest_priority(pJazzQueueItem p_item)
{
	if (p_item != nullptr) {
		while (p_item->p_alloc_next != nullptr)
		p_item = (pJazzQueueItem) p_item->p_alloc_next;
	};

	return p_item;
};

pJazzQueueItem lowest_priority(pJazzQueueItem p_item)
{
	if (p_item != nullptr) {
		while (p_item->p_alloc_prev != nullptr)
			p_item = (pJazzQueueItem) p_item->p_alloc_prev;
	};

	return p_item;
};

int recursive_audit_aa_tree(pJazzQueueItem p_tree)
{
/*	1. The level of every leaf node is one.
	2. The level of every left child is exactly one less than that of its parent.
	3. The level of every right child is equal to or one less than that of its parent.
	4. The level of every right grandchild is strictly less than that of its grandparent.
	5. Every node of level greater than one has two children.
	Returns number of nodes in the tree.
*/
	if (p_tree == nullptr)
		return 0;

	if (p_tree->p_alloc_prev == nullptr && p_tree->p_alloc_next == nullptr) {
		if (p_tree->level != 1)
			return -1;
		return 1;
	}

	if (p_tree->p_alloc_prev != nullptr) {
		if (highest_priority((pJazzQueueItem) p_tree->p_alloc_prev)->priority > p_tree->priority)
			return -1;
		if (reinterpret_cast<pJazzQueueItem>(p_tree->p_alloc_prev)->level != p_tree->level - 1)
			return -1;
	}

	if (p_tree->p_alloc_next != nullptr) {
		if (lowest_priority((pJazzQueueItem) p_tree->p_alloc_next)->priority < p_tree->priority)
			return -1;
		if (reinterpret_cast<pJazzQueueItem>(p_tree->p_alloc_next)->level != p_tree->level - 1) {
			if (reinterpret_cast<pJazzQueueItem>(p_tree->p_alloc_next)->level != p_tree->level)
				return -1;
			if (p_tree->p_alloc_next->p_alloc_prev != nullptr) {
				if (reinterpret_cast<pJazzQueueItem>(p_tree->p_alloc_next->p_alloc_prev)->level >= p_tree->level)
					return -1;

			}
			if (p_tree->p_alloc_next->p_alloc_next != nullptr) {
				if (reinterpret_cast<pJazzQueueItem>(p_tree->p_alloc_next->p_alloc_next)->level >= p_tree->level)
					return -1;
			}
		}
	}

	return 1 + recursive_audit_aa_tree((pJazzQueueItem) p_tree->p_alloc_prev) + recursive_audit_aa_tree((pJazzQueueItem) p_tree->p_alloc_next);
}

// Tests
// -----

SCENARIO("Testing JazzBlock containers") {
	REQUIRE(sizeof(JazzBlockIdentifier) == 32);
	REQUIRE(sizeof(JazzBlockId64)		==	8);
	REQUIRE(sizeof(JazzBlockKeeprItem)	== 64);
	REQUIRE(sizeof(JazzTreeItem)		== 96);
	REQUIRE(sizeof(JazzQueueItem)		== 96);

	GIVEN("We want to test the regex") {
		REQUIRE( JBK.valid_block_identifier("/abc"));
		REQUIRE( JBK.valid_block_identifier(".abc"));
		REQUIRE(!JBK.valid_block_identifier("@abc"));
		REQUIRE(!JBK.valid_block_identifier("abc"));

		REQUIRE(!JBK.valid_block_identifier("/"));
		REQUIRE( JBK.valid_block_identifier("/a"));
		REQUIRE(!JBK.valid_block_identifier("."));
		REQUIRE( JBK.valid_block_identifier(".a"));

		REQUIRE( JBK.valid_block_identifier("/abcdefghijklmnopqrstuvwxyz"));
		REQUIRE( JBK.valid_block_identifier("/ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
		REQUIRE( JBK.valid_block_identifier("/1234567890_"));
		REQUIRE(!JBK.valid_block_identifier("/Á"));
		REQUIRE(!JBK.valid_block_identifier("/ñ"));
		REQUIRE(!JBK.valid_block_identifier("/$"));
		REQUIRE(!JBK.valid_block_identifier("/ç"));
		REQUIRE(!JBK.valid_block_identifier("/á"));
		REQUIRE(!JBK.valid_block_identifier("/à"));
		REQUIRE(!JBK.valid_block_identifier("/ä"));
		REQUIRE(!JBK.valid_block_identifier("/ä"));

		REQUIRE(!JBK.valid_block_identifier("."));
		REQUIRE( JBK.valid_block_identifier(".AaBc55_cKrrfe96_"));
		REQUIRE( JBK.valid_block_identifier("._"));
		REQUIRE( JBK.valid_block_identifier("._wow_"));
		REQUIRE(!JBK.valid_block_identifier(".AaBc55.cKrrfe96_"));
		REQUIRE(!JBK.valid_block_identifier(".AaBc55/cKrrfe96_"));

		REQUIRE(!JBK.valid_block_identifier(".hello world"));
		REQUIRE( JBK.valid_block_identifier(".hello_world"));
		REQUIRE(!JBK.valid_block_identifier("=hello_world"));
		REQUIRE(!JBK.valid_block_identifier(". hello_world"));
		REQUIRE( JBK.valid_block_identifier("._hello_world"));
		REQUIRE(!JBK.valid_block_identifier("&_hello_world"));
		REQUIRE(!JBK.valid_block_identifier(".hello_world "));
		REQUIRE( JBK.valid_block_identifier(".hello_world_"));
		REQUIRE(!JBK.valid_block_identifier("a.hello_world_"));

		REQUIRE( JBK.valid_block_identifier("/123456789012345678901234567890"));
		REQUIRE(!JBK.valid_block_identifier("/1234567890123456789012345678901"));
	}
}


SCENARIO("Testing JazzBlock creation from scratch") {
	JazzTensorDim dim {{7, 3, 5, 0}}, dim_in;

	WHEN("I force all the possible error conditions, I get nullptr.") {
		JazzTensorDim dim7 {{7, 0}}, dim_in;
		pJazzBlock pjb;
		char const *buffer	= "One Two Three Four Five Six Seven";
		char const *buffer6 = "One Two Three Four Five Six";
		bool filter[7];

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_NEW_DONT_FILL, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_DOUBLE, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, buffer);
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_DOUBLE, nullptr);
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 128, buffer, ' ');
		REQUIRE(pjb != nullptr);
		free_jazz_block(pjb);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim7.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 128, buffer, ' ');
		REQUIRE(pjb != nullptr);
		free_jazz_block(pjb);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim7.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 128, buffer6, ' ');
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(0x201, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(0x604, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(0x308, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(2, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_NA);
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim7.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter);
		REQUIRE(pjb != nullptr);
		free_jazz_block(pjb);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE, dim7.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim7.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim7.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim7.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER);
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim7.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter);
		REQUIRE(pjb != nullptr);
		free_jazz_block(pjb);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE, dim7.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim7.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim7.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim7.dim, nullptr, JAZZ_FILL_INTEGER_FILTER);
		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_NEW_DONT_FILL);
		REQUIRE(pjb != nullptr);
		free_jazz_block(pjb);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_NEW_DONT_FILL - 1);
		REQUIRE(pjb == nullptr);
		pjb = new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE + 1);
		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim);

		REQUIRE(pjb == nullptr);	// CELL_TYPE_BYTE cannot accept fill_tensor	= JAZZ_FILL_NEW_WITH_NA!

		pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*7 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_byte[0] == 0);
		REQUIRE(pjb->tensor.cell_byte[104] == 0);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*7 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*7 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_byte[0]   == JAZZ_BYTE_BOOLEAN_NA);
		REQUIRE(pjb->tensor.cell_byte[104] == JAZZ_BYTE_BOOLEAN_NA);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*7 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i ++) {
			pJazzBlock pjb = new_jazz_block(cell_types[i], dim.dim);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->cell_type == cell_types[i]);
			REQUIRE(pjb->rank == 3);

			memset(&dim_in, 1, sizeof(dim_in));

			pjb->get_dimensions(dim_in.dim);

			REQUIRE(dim_in.dim[0] == 7);
			REQUIRE(dim_in.dim[1] == 3);
			REQUIRE(dim_in.dim[2] == 5);
			REQUIRE(dim_in.dim[3] == 0);
			REQUIRE(dim_in.dim[4] == 0);
			REQUIRE(dim_in.dim[5] == 0);

			REQUIRE(pjb->size == 105);
			REQUIRE(pjb->num_attributes == 1);
			REQUIRE(pjb->total_bytes == 64 + 16*27 + 8 + 16);
			REQUIRE(pjb->has_NA == true);
			REQUIRE(pjb->tensor.cell_int[0]	  == JAZZ_INTEGER_NA);
			REQUIRE(pjb->tensor.cell_int[104] == JAZZ_INTEGER_NA);

			check_and_close_jazz_block(pjb);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->has_NA == true);
			REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
			REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*27 + 8 + 16));

			REQUIRE(pjb->find_attribute(976555311) == nullptr);
			REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
			REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

			free_jazz_block(pjb);

			REQUIRE(pjb == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_int[0]	  == JAZZ_BOOLEAN_NA);
		REQUIRE(pjb->tensor.cell_int[104] == JAZZ_BOOLEAN_NA);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*27 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_SINGLE, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_uint[0]   == reinterpret_cast<u_int*>(&JAZZ_SINGLE_NA)[0]);
		REQUIRE(pjb->tensor.cell_uint[104] == reinterpret_cast<u_int*>(&JAZZ_SINGLE_NA)[0]);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*27 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_JAZZ_STRING") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*27 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_uint[0]   == JAZZ_STRING_NA);
		REQUIRE(pjb->tensor.cell_uint[104] == JAZZ_STRING_NA);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*27 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_LONG_INTEGER, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_longint[0]	  == JAZZ_LONG_INTEGER_NA);
		REQUIRE(pjb->tensor.cell_longint[104] == JAZZ_LONG_INTEGER_NA);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*53 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_JAZZ_TIME") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_TIME, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_TIME);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_longint[0]	  == JAZZ_TIME_POINT_NA);
		REQUIRE(pjb->tensor.cell_longint[104] == JAZZ_TIME_POINT_NA);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*53 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_DOUBLE, dim.dim);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(pjb->rank == 3);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 3);
		REQUIRE(dim_in.dim[2] == 5);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 105);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*53 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_ulongint[0]   == reinterpret_cast<uint64_t*>(&JAZZ_DOUBLE_NA)[0]);
		REQUIRE(pjb->tensor.cell_ulongint[104] == reinterpret_cast<uint64_t*>(&JAZZ_DOUBLE_NA)[0]);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*53 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	dim.dim[0] = 7;
	dim.dim[1] = 2;
	dim.dim[2] = 2;
	dim.dim[3] = 2;
	dim.dim[4] = 3;
	dim.dim[5] = 2;

	GIVEN("A block of CELL_TYPE_BYTE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*21 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_byte[0]   == 0);
		REQUIRE(pjb->tensor.cell_byte[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*21 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*21 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_byte[0]   == 0);
		REQUIRE(pjb->tensor.cell_byte[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*21 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i ++) {
			pJazzBlock pjb = new_jazz_block(cell_types[i], dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->cell_type == cell_types[i]);
			REQUIRE(pjb->rank == 6);

			memset(&dim_in, 1, sizeof(dim_in));

			pjb->get_dimensions(dim_in.dim);

			REQUIRE(dim_in.dim[0] == 7);
			REQUIRE(dim_in.dim[1] == 2);
			REQUIRE(dim_in.dim[2] == 2);
			REQUIRE(dim_in.dim[3] == 2);
			REQUIRE(dim_in.dim[4] == 3);
			REQUIRE(dim_in.dim[5] == 2);

			REQUIRE(pjb->size == 336);
			REQUIRE(pjb->num_attributes == 1);
			REQUIRE(pjb->total_bytes == 64 + 16*84 + 8 + 16);
			REQUIRE(pjb->has_NA == false);
			REQUIRE(pjb->tensor.cell_int[0]	  == 0);
			REQUIRE(pjb->tensor.cell_int[335] == 0);

			check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->has_NA == true);
			REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
			REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*84 + 8 + 16));

			REQUIRE(pjb->find_attribute(976555311) == nullptr);
			REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
			REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

			free_jazz_block(pjb);

			REQUIRE(pjb == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_int[0]	  == 0);
		REQUIRE(pjb->tensor.cell_int[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*84 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_SINGLE, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_uint[0]   == 0);
		REQUIRE(pjb->tensor.cell_uint[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*84 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_JAZZ_STRING") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*84 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_uint[0]   == 0);
		REQUIRE(pjb->tensor.cell_uint[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*84 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_LONG_INTEGER, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_longint[0]	  == 0);
		REQUIRE(pjb->tensor.cell_longint[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*168 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_JAZZ_TIME") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_TIME, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_TIME);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(pjb->has_NA == true);
		REQUIRE(pjb->tensor.cell_longint[0]	  == 0);
		REQUIRE(pjb->tensor.cell_longint[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*168 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_DOUBLE, dim.dim, nullptr, JAZZ_FILL_NEW_WITH_ZERO);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(pjb->rank == 6);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 7);
		REQUIRE(dim_in.dim[1] == 2);
		REQUIRE(dim_in.dim[2] == 2);
		REQUIRE(dim_in.dim[3] == 2);
		REQUIRE(dim_in.dim[4] == 3);
		REQUIRE(dim_in.dim[5] == 2);

		REQUIRE(pjb->size == 336);
		REQUIRE(pjb->num_attributes == 1);
		REQUIRE(pjb->total_bytes == 64 + 16*168 + 8 + 16);
		REQUIRE(pjb->has_NA == false);
		REQUIRE(pjb->tensor.cell_ulongint[0]   == 0);
		REQUIRE(pjb->tensor.cell_ulongint[335] == 0);

		check_and_close_jazz_block(pjb, JAZZ_SET_HAS_NA_TRUE);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*168 + 8 + 16));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY) != nullptr);
		REQUIRE(strlen(pjb->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)) == 0);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	dim.dim[0] = 97;
	dim.dim[1] = 1;
	dim.dim[2] = 2;
	dim.dim[3] = 3;
	dim.dim[4] = 4;
	dim.dim[5] = 5;

	AllAttributes block_att;
	block_att [1357] = "Hello world!";
	block_att [468]	 = "Hi!";
	block_att [222]	 = "123.";

	GIVEN("A block of CELL_TYPE_BYTE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*7 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == false);

		for (int j = 0; j < 97; j++) pjb->tensor.cell_byte[j] = j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*7 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_BYTE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*7 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_byte[j] = j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*7 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_INTEGER, CELL_TYPE_FACTOR & CELL_TYPE_GRADE") {
		const int cell_types[3] = {CELL_TYPE_INTEGER, CELL_TYPE_FACTOR, CELL_TYPE_GRADE};

		for (int i = 0; i < 3; i ++) {
			pJazzBlock pjb = new_jazz_block(cell_types[i], dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->cell_type == cell_types[i]);
			REQUIRE(pjb->rank == 1);

			memset(&dim_in, 1, sizeof(dim_in));

			pjb->get_dimensions(dim_in.dim);

			REQUIRE(dim_in.dim[0] == 97);
			REQUIRE(dim_in.dim[1] == 0);
			REQUIRE(dim_in.dim[2] == 0);
			REQUIRE(dim_in.dim[3] == 0);
			REQUIRE(dim_in.dim[4] == 0);
			REQUIRE(dim_in.dim[5] == 0);

			REQUIRE(pjb->size == 97);
			REQUIRE(pjb->num_attributes == 3);
			REQUIRE(pjb->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
			REQUIRE(pjb->has_NA == true);
			for (int j = 0; j < 97; j++) pjb->tensor.cell_int[j] = j;

			check_and_close_jazz_block(pjb);

			REQUIRE(pjb != nullptr);

			REQUIRE(pjb->has_NA == false);
			REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
			REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*25 + 8*3 + 16 + 22));

			REQUIRE(pjb->find_attribute(976555311) == nullptr);
			REQUIRE(pjb->find_attribute(1357) != nullptr);
			REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
			REQUIRE(pjb->find_attribute(222) != nullptr);
			REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
			REQUIRE(pjb->find_attribute(468) != nullptr);
			REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

			free_jazz_block(pjb);

			REQUIRE(pjb == nullptr);
		}
	}

	GIVEN("A block of CELL_TYPE_BOOLEAN") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_BOOLEAN, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_BOOLEAN);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_int[j] = j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*25 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_SINGLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_SINGLE, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_SINGLE);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*25 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_single[j] = 0.123*j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*25 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	char const *monday = "Monday", *tuesday = "Tuesday", *nope = "";

	GIVEN("A block of CELL_TYPE_JAZZ_STRING") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL, nullptr, 256);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*25 + 8*3 + 16 + 22 + 256);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) {
			switch (j % 3) {
			case 1:
				pjb->set_string(j, monday);
				break;
			case 2:
				pjb->set_string(j, tuesday);
				break;
			default:
				pjb->set_string(j, nope);
				break;
			}
		}

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*25 + 8*3 + 16 + 22 + 256));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		REQUIRE(!strcmp(pjb->get_string( 0), ""));
		REQUIRE(!strcmp(pjb->get_string( 1), "Monday"));
		REQUIRE(!strcmp(pjb->get_string( 2), "Tuesday"));
		REQUIRE(!strcmp(pjb->get_string(94), "Monday"));
		REQUIRE(!strcmp(pjb->get_string(95), "Tuesday"));
		REQUIRE(!strcmp(pjb->get_string(96), ""));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_LONG_INTEGER") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_LONG_INTEGER, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_longint[j] = j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_JAZZ_TIME") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_TIME, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_TIME);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_longint[j] = j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == true);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	GIVEN("A block of CELL_TYPE_DOUBLE") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_DOUBLE, dim.dim, &block_att, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(pjb->rank == 1);

		memset(&dim_in, 1, sizeof(dim_in));

		pjb->get_dimensions(dim_in.dim);

		REQUIRE(dim_in.dim[0] == 97);
		REQUIRE(dim_in.dim[1] == 0);
		REQUIRE(dim_in.dim[2] == 0);
		REQUIRE(dim_in.dim[3] == 0);
		REQUIRE(dim_in.dim[4] == 0);
		REQUIRE(dim_in.dim[5] == 0);

		REQUIRE(pjb->size == 97);
		REQUIRE(pjb->num_attributes == 3);
		REQUIRE(pjb->total_bytes == 64 + 16*49 + 8*3 + 16 + 22);
		REQUIRE(pjb->has_NA == true);
		for (int j = 0; j < 97; j++) pjb->tensor.cell_double[j] = -0.1234567890123*j;

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);
		REQUIRE(jazz_utils::elapsed_us(pjb->created) < 3e6);
		REQUIRE(pjb->hash64 == jazz_utils::MurmurHash64A(&pjb->tensor, 16*49 + 8*3 + 16 + 22));

		REQUIRE(pjb->find_attribute(976555311) == nullptr);
		REQUIRE(pjb->find_attribute(1357) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(1357), "Hello world!"));
		REQUIRE(pjb->find_attribute(222) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(222), "123."));
		REQUIRE(pjb->find_attribute(468) != nullptr);
		REQUIRE(!strcmp(pjb->find_attribute(468), "Hi!"));

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	char const *text_file_0 = "",
			   *text_file_1 = "\n",
			   *text_file_2 = "\n\n\n",
			   *text_file_3 = "abc\ndef",
			   *text_file_4 = "abc\ndef\n",
			   *text_file_5 = "abc\ndef\n\n",
			   *text_file_6 = "This is a common\ntext file\n",
			   *text_file_7 = "\nThis is another\n\ncommon\ntext file.",
			   *text_file_8 = "January February March April May June July August September October November December",
			   *text_file_9 = "\n\n\nMon\n\nTue\nWed\n\n\n";

	GIVEN("A block of CELL_TYPE_JAZZ_STRING") {
		pJazzBlock pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_NEW_DONT_FILL, nullptr, 0, text_file_0);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_NEW_WITH_ZERO, nullptr, 0, text_file_0);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_BOOLEAN_FILTER, nullptr, 0, text_file_0);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_0);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 1);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 1);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), ""));
		REQUIRE(pjb->tensor.cell_int[0] == JAZZ_STRING_EMPTY);

		REQUIRE(pjb->p_string_buffer()->last_idx == 3);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "Q") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_1);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 1);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 1);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), ""));
		REQUIRE(pjb->tensor.cell_int[0] == JAZZ_STRING_EMPTY);

		REQUIRE(pjb->p_string_buffer()->last_idx == 3);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "#") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_2);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 3);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 3);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), ""));
		REQUIRE(pjb->tensor.cell_int[0] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(1), ""));
		REQUIRE(pjb->tensor.cell_int[1] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(2), ""));
		REQUIRE(pjb->tensor.cell_int[2] == JAZZ_STRING_EMPTY);

		REQUIRE(pjb->p_string_buffer()->last_idx == 5);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "A") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_3);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 2);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 6 + 2);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), "abc"));
		REQUIRE(pjb->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(pjb->get_string(1), "def"));
		REQUIRE(pjb->tensor.cell_int[1] == 6);

		REQUIRE(pjb->p_string_buffer()->last_idx == 10);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "A") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_4);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 2);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 6 + 2);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), "abc"));
		REQUIRE(pjb->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(pjb->get_string(1), "def"));
		REQUIRE(pjb->tensor.cell_int[1] == 6);

		REQUIRE(pjb->p_string_buffer()->last_idx == 10);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "A") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_5);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 3);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 6 + 3);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), "abc"));
		REQUIRE(pjb->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(pjb->get_string(1), "def"));
		REQUIRE(pjb->tensor.cell_int[1] == 6);
		REQUIRE(!strcmp(pjb->get_string(2), ""));
		REQUIRE(pjb->tensor.cell_int[2] == JAZZ_STRING_EMPTY);

		REQUIRE(pjb->p_string_buffer()->last_idx == 11);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "A") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_6);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 2);
		REQUIRE(pjb->total_bytes == 64 + 16 + 8 + 16 + 25 + 2);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), "This is a common"));
		REQUIRE(pjb->tensor.cell_int[0] == 2);
		REQUIRE(!strcmp(pjb->get_string(1), "text file"));
		REQUIRE(pjb->tensor.cell_int[1] == 19);

		REQUIRE(pjb->p_string_buffer()->last_idx == 29);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "A") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_7);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 5);
		REQUIRE(pjb->total_bytes == 64 + 16*2 + 8 + 16 + 31 + 5);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), ""));
		REQUIRE(pjb->tensor.cell_int[0] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(1), "This is another"));
		REQUIRE(pjb->tensor.cell_int[1] == 3);
		REQUIRE(!strcmp(pjb->get_string(2), ""));
		REQUIRE(pjb->tensor.cell_int[2] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(3), "common"));
		REQUIRE(pjb->tensor.cell_int[3] == 20);
		REQUIRE(!strcmp(pjb->get_string(4), "text file."));
		REQUIRE(pjb->tensor.cell_int[4] == 27);

		REQUIRE(pjb->p_string_buffer()->last_idx == 38);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "S") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		dim.dim[0] = 11;
		dim.dim[1] = 0;
		dim.dim[2] = 0;
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb == nullptr);

		dim.dim[0] = 13;
		dim.dim[1] = 0;
		dim.dim[2] = 0;
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb == nullptr);

		dim.dim[0] = 5;
		dim.dim[1] = 2;
		dim.dim[2] = 0;
		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb == nullptr);

		dim.dim[0] = 6;
		dim.dim[1] = 2;
		dim.dim[2] = 0;

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 2);

		REQUIRE(pjb->size == 12);
		REQUIRE(pjb->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0),	 "January"));
		REQUIRE(!strcmp(pjb->get_string(1),	 "February"));
		REQUIRE(!strcmp(pjb->get_string(2),	 "March"));
		REQUIRE(!strcmp(pjb->get_string(3),	 "April"));
		REQUIRE(!strcmp(pjb->get_string(4),	 "May"));
		REQUIRE(!strcmp(pjb->get_string(5),	 "June"));
		REQUIRE(!strcmp(pjb->get_string(6),	 "July"));
		REQUIRE(!strcmp(pjb->get_string(7),	 "August"));
		REQUIRE(!strcmp(pjb->get_string(8),	 "September"));
		REQUIRE(!strcmp(pjb->get_string(9),	 "October"));
		REQUIRE(!strcmp(pjb->get_string(10), "November"));
		REQUIRE(!strcmp(pjb->get_string(11), "December"));

		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "-") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		dim.dim[0] = 3;
		dim.dim[1] = 2;
		dim.dim[2] = 2;
		dim.dim[3] = 1;
		dim.dim[4] = 9;

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim.dim, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 3);

		REQUIRE(pjb->size == 12);
		REQUIRE(pjb->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0),	 "January"));
		REQUIRE(!strcmp(pjb->get_string(1),	 "February"));
		REQUIRE(!strcmp(pjb->get_string(2),	 "March"));
		REQUIRE(!strcmp(pjb->get_string(3),	 "April"));
		REQUIRE(!strcmp(pjb->get_string(4),	 "May"));
		REQUIRE(!strcmp(pjb->get_string(5),	 "June"));
		REQUIRE(!strcmp(pjb->get_string(6),	 "July"));
		REQUIRE(!strcmp(pjb->get_string(7),	 "August"));
		REQUIRE(!strcmp(pjb->get_string(8),	 "September"));
		REQUIRE(!strcmp(pjb->get_string(9),	 "October"));
		REQUIRE(!strcmp(pjb->get_string(10), "November"));
		REQUIRE(!strcmp(pjb->get_string(11), "December"));

		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "@") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_8, ' ');

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 12);
		REQUIRE(pjb->total_bytes == 64 + 16*3 + 8 + 16 + 75 + 11);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0),	 "January"));
		REQUIRE(!strcmp(pjb->get_string(1),	 "February"));
		REQUIRE(!strcmp(pjb->get_string(2),	 "March"));
		REQUIRE(!strcmp(pjb->get_string(3),	 "April"));
		REQUIRE(!strcmp(pjb->get_string(4),	 "May"));
		REQUIRE(!strcmp(pjb->get_string(5),	 "June"));
		REQUIRE(!strcmp(pjb->get_string(6),	 "July"));
		REQUIRE(!strcmp(pjb->get_string(7),	 "August"));
		REQUIRE(!strcmp(pjb->get_string(8),	 "September"));
		REQUIRE(!strcmp(pjb->get_string(9),	 "October"));
		REQUIRE(!strcmp(pjb->get_string(10), "November"));
		REQUIRE(!strcmp(pjb->get_string(11), "December"));

		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "T") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);

		pjb = new_jazz_block(CELL_TYPE_JAZZ_STRING, nullptr, nullptr, JAZZ_FILL_WITH_TEXTFILE, nullptr, 0, text_file_9);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->cell_type == CELL_TYPE_JAZZ_STRING);
		REQUIRE(pjb->rank == 1);

		REQUIRE(pjb->size == 9);
		REQUIRE(pjb->total_bytes == 64 + 16*3 + 8 + 16 + 9 + 9);
		REQUIRE(pjb->has_NA == false);

		check_and_close_jazz_block(pjb);

		REQUIRE(pjb != nullptr);

		REQUIRE(pjb->has_NA == false);

		REQUIRE(!strcmp(pjb->get_string(0), ""));
		REQUIRE(pjb->tensor.cell_int[0] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(1), ""));
		REQUIRE(pjb->tensor.cell_int[1] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(2), ""));
		REQUIRE(pjb->tensor.cell_int[2] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(3), "Mon"));
		REQUIRE(pjb->tensor.cell_int[3] == 5);
		REQUIRE(!strcmp(pjb->get_string(4), ""));
		REQUIRE(pjb->tensor.cell_int[4] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(5), "Tue"));
		REQUIRE(pjb->tensor.cell_int[5] == 10);
		REQUIRE(!strcmp(pjb->get_string(6), "Wed"));
		REQUIRE(pjb->tensor.cell_int[6] == 14);
		REQUIRE(!strcmp(pjb->get_string(7), ""));
		REQUIRE(pjb->tensor.cell_int[7] == JAZZ_STRING_EMPTY);
		REQUIRE(!strcmp(pjb->get_string(8), ""));
		REQUIRE(pjb->tensor.cell_int[8] == JAZZ_STRING_EMPTY);

		REQUIRE(pjb->p_string_buffer()->last_idx == 20);
		REQUIRE(!pjb->p_string_buffer()->alloc_failed);
		REQUIRE(pjb->get_string_offset(pjb->p_string_buffer(), "p") == JAZZ_STRING_NA);
		REQUIRE(pjb->p_string_buffer()->alloc_failed);

		free_jazz_block(pjb);

		REQUIRE(pjb == nullptr);
	}

	bool filter_vecz[120], filter_vec1[120], filter_vecn[120];

	for (int i = 0; i < 120; i ++) {
		filter_vecz[i] = 0;
		filter_vec1[i] = true;
		filter_vecn[i] = (i % 7) == 2;
	}

	dim.dim[0] = 120;
	dim.dim[1] = 5;
	dim.dim[2] = 4;
	dim.dim[3] = 1;
	dim.dim[4] = 9;
	dim.dim[5] = 9;

	pJazzBlock pjbd = new_jazz_block(CELL_TYPE_DOUBLE, dim.dim);

	REQUIRE(pjbd != nullptr);

	REQUIRE(pjbd->cell_type == CELL_TYPE_DOUBLE);
	REQUIRE(pjbd->rank == 3);
	REQUIRE(pjbd->size == 2400);

	GIVEN("A filter of boolean") {
		dim.dim[0] = 120;
		dim.dim[1] = 0;

		pJazzFilter pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER);

		REQUIRE(pjf == nullptr);

		pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &filter_vecn);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->cell_type == CELL_TYPE_BYTE_BOOLEAN);
		REQUIRE(pjf->rank == 1);
		REQUIRE(pjf->size == 120);
		REQUIRE(pjf->num_attributes == 1);
		REQUIRE(pjf->total_bytes == 64 + 16*8 + 8 + 16);
		REQUIRE(pjf->has_NA == false);
		for (int j = 0; j < 120; j++)
			REQUIRE(pjf->tensor.cell_byte[j] == filter_vecn[j]);

		check_and_close_jazz_block(pjf);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->has_NA == false);

		REQUIRE(pjf->filter_audit() == JAZZ_FILTER_TYPE_BOOLEAN);

		REQUIRE(pjf->can_filter(pjbd));

		free_jazz_block((pJazzBlock &) pjf);

		REQUIRE(pjf == nullptr);
	}

	GIVEN("Three filters of integer") {
		dim.dim[0] = 120;
		dim.dim[1] = 0;

		pJazzFilter pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER);

		REQUIRE(pjf == nullptr);

		pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter_vecn);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(pjf->rank == 1);
		REQUIRE(pjf->size == 120);
		REQUIRE(pjf->num_attributes == 1);
		REQUIRE(pjf->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(pjf->has_NA == false);
		REQUIRE(pjf->range.filter.one == 1);
		REQUIRE(pjf->range.filter.length == 17);
		for (int j = 0; j < pjf->range.filter.length; j++)
			REQUIRE(pjf->tensor.cell_int[j] == 7*j + 2);

		check_and_close_jazz_block(pjf);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->has_NA == false);

		REQUIRE(pjf->filter_audit() == JAZZ_FILTER_TYPE_INTEGER);

		REQUIRE(pjf->can_filter(pjbd));

		free_jazz_block((pJazzBlock &) pjf);

		REQUIRE(pjf == nullptr);

		pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter_vecz);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(pjf->rank == 1);
		REQUIRE(pjf->size == 120);
		REQUIRE(pjf->num_attributes == 1);
		REQUIRE(pjf->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(pjf->has_NA == false);
		REQUIRE(pjf->range.filter.one == 1);
		REQUIRE(pjf->range.filter.length == 0);

		check_and_close_jazz_block(pjf);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->has_NA == false);

		REQUIRE(pjf->filter_audit() == JAZZ_FILTER_TYPE_INTEGER);

		REQUIRE(pjf->can_filter(pjbd));

		free_jazz_block((pJazzBlock &) pjf);

		REQUIRE(pjf == nullptr);

		pjf = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &filter_vec1);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(pjf->rank == 1);
		REQUIRE(pjf->size == 120);
		REQUIRE(pjf->num_attributes == 1);
		REQUIRE(pjf->total_bytes == 64 + 16*30 + 8 + 16);
		REQUIRE(pjf->has_NA == false);
		REQUIRE(pjf->range.filter.one == 1);
		REQUIRE(pjf->range.filter.length == 120);
		for (int j = 0; j < pjf->range.filter.length; j++)
			REQUIRE(pjf->tensor.cell_int[j] == j);

		check_and_close_jazz_block(pjf);

		REQUIRE(pjf != nullptr);

		REQUIRE(pjf->has_NA == false);

		REQUIRE(pjf->filter_audit() == JAZZ_FILTER_TYPE_INTEGER);

		REQUIRE(pjf->can_filter(pjbd));

		free_jazz_block((pJazzBlock &) pjf);

		REQUIRE(pjf == nullptr);
	}

	free_jazz_block(pjbd);

	REQUIRE(pjbd == nullptr);
}


SCENARIO("Testing JazzBlock creation by copying/filtering") {
	pJazzBlock p_db_r1, p_db_r3, p_db_r6,
			   p_st_r1, p_st_r3, p_st_r6,
			   p_by_r1, p_by_r3, p_by_r6;

	JazzTensorDim dim_r1 {{107, 0}}, dim_r3 {{17, 9, 3, 0}}, dim_r6 {{2, 3, 2, 5, 2, 7}};

	pJazzFilter p_if_r1, p_if_r3, p_if_r6, p_bf_r1, p_bf_r3, p_bf_r6;

	AllAttributes old_str, new_str, no_str;

	old_str [256] = "Life's but a walking shadow";		// Both old_str and new_str have the same number of chars
	old_str [313] = "... a poor player";
	old_str [921] = "that struts and frets his hour";
	old_str [222] = "upon the stage and";
	old_str [321] = "then ...";

	new_str [921] = "is heard nomore ...";
	new_str [313] = "It's a tale..";
	new_str [358] = "told by an idiot..";
	new_str [222] = "full of sound and fury..";
	new_str [676] = "signifying ..";
	new_str [321] = "NULL";

	no_str[123] = (char *) nullptr;
	no_str[456] = "";

	const char *month[12] = {"January", "February", "March", "April", "May", "June", "July", "August",
							 "September", "October", "November", "December"};

	bool buff_1k[1024] = {false};

	GIVEN("A set of 9 blocks of 3 types x 3 ranks") {
		p_db_r1 = new_jazz_block(CELL_TYPE_DOUBLE, dim_r1.dim, &old_str);

		REQUIRE(p_db_r1 != nullptr);
		REQUIRE(p_db_r1->size == 107);

		p_db_r3 = new_jazz_block(CELL_TYPE_DOUBLE, dim_r3.dim, &no_str);

		REQUIRE(p_db_r3 != nullptr);
		REQUIRE(p_db_r3->size == 459);

		p_db_r6 = new_jazz_block(CELL_TYPE_DOUBLE, dim_r6.dim, nullptr);

		REQUIRE(p_db_r6 != nullptr);
		REQUIRE(p_db_r6->size == 840);

		p_st_r1 = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim_r1.dim, &no_str, JAZZ_FILL_NEW_DONT_FILL, nullptr, 256);

		REQUIRE(p_st_r1 != nullptr);
		REQUIRE(p_st_r1->size == 107);

		p_st_r3 = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim_r3.dim, nullptr, JAZZ_FILL_NEW_DONT_FILL, nullptr, 256);

		REQUIRE(p_st_r3 != nullptr);
		REQUIRE(p_st_r3->size == 459);

		p_st_r6 = new_jazz_block(CELL_TYPE_JAZZ_STRING, dim_r6.dim, &old_str, JAZZ_FILL_NEW_DONT_FILL, nullptr, 256);

		REQUIRE(p_st_r6 != nullptr);
		REQUIRE(p_st_r6->size == 840);

		p_by_r1 = new_jazz_block(CELL_TYPE_BYTE, dim_r1.dim, nullptr, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(p_by_r1 != nullptr);
		REQUIRE(p_by_r1->size == 107);

		p_by_r3 = new_jazz_block(CELL_TYPE_BYTE, dim_r3.dim, &old_str, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(p_by_r3 != nullptr);
		REQUIRE(p_by_r3->size == 459);

		p_by_r6 = new_jazz_block(CELL_TYPE_BYTE, dim_r6.dim, &no_str, JAZZ_FILL_NEW_DONT_FILL);

		REQUIRE(p_by_r6 != nullptr);
		REQUIRE(p_by_r6->size == 840);

		int index[6];

		for (int i = 0; i < 107; i++) {
			index[0] = i;

			p_db_r1->tensor.cell_double[p_db_r1->get_offset((int *) &index)] = i/10.0;
			p_by_r1->tensor.cell_byte  [p_by_r1->get_offset((int *) &index)] = 7 + 2*i;

			p_st_r1->set_string((int *) &index, month[i % 12]);
		}

		REQUIRE(p_db_r1->tensor.cell_double[33] == 3.3);
		REQUIRE(p_by_r1->tensor.cell_byte  [33] == 73);
		REQUIRE(!strcmp(p_st_r1->get_string(15), "April"));
		REQUIRE(!p_st_r1->p_string_buffer()->alloc_failed);

		check_and_close_jazz_block(p_db_r1);
		check_and_close_jazz_block(p_st_r1);
		check_and_close_jazz_block(p_by_r1);

		for (int i = 0; i < 17; i++) {
			for (int j = 0; j < 9; j++) {
				for (int k = 0; k < 3; k++) {
					index[0] = i;
					index[1] = j;
					index[2] = k;

					p_db_r3->tensor.cell_double[p_db_r3->get_offset((int *) &index)] = 1e6*i + 1e3*j + k;
					p_by_r3->tensor.cell_byte  [p_by_r3->get_offset((int *) &index)] = 7*i + 5*j + 3*k;

					p_st_r3->set_string((int *) &index, month[(7*i + 5*j + 3*k) % 12]);
				}
			}
		}

		REQUIRE(p_db_r3->tensor.cell_double[334] == 12003001.0);
		REQUIRE(p_by_r3->tensor.cell_byte  [334] == 102);
		REQUIRE(!strcmp(p_st_r3->get_string(334), "July"));
		REQUIRE(!p_st_r3->p_string_buffer()->alloc_failed);

		check_and_close_jazz_block(p_db_r3);
		check_and_close_jazz_block(p_st_r3);
		check_and_close_jazz_block(p_by_r3);

		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 3; j++) {
				for (int k = 0; k < 2; k++) {
					for (int u = 0; u < 5; u++) {
						for (int v = 0; v < 2; v++) {
							for (int w = 0; w < 7; w++) {
								index[0] = i;
								index[1] = j;
								index[2] = k;
								index[3] = u;
								index[4] = v;
								index[5] = w;

								p_db_r6->tensor.cell_double[p_db_r6->get_offset((int *) &index)] = 1e8*i + 1e7*j + 1e6*k + 100*u + 11*v - w;
								p_by_r6->tensor.cell_byte  [p_by_r6->get_offset((int *) &index)] = 45*i + 34*j + 23*k + 12*u + 6*v + 3*w;

								p_st_r6->set_string((int *) &index, month[(45*i + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]);
							}
						}
					}
				}
			}
		}

		REQUIRE(p_db_r6->tensor.cell_double[753] == 120000307.0);
		REQUIRE(p_by_r6->tensor.cell_byte  [753] == 167);
		REQUIRE(!strcmp(p_st_r6->get_string(753), "December"));
		REQUIRE(!p_st_r6->p_string_buffer()->alloc_failed);

		check_and_close_jazz_block(p_db_r6);
		check_and_close_jazz_block(p_st_r6);
		check_and_close_jazz_block(p_by_r6);

		dim_r1.dim[1] = 0;
		dim_r3.dim[1] = 0;
		dim_r6.dim[1] = 0;

		p_if_r1 = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim_r1.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &buff_1k);

		REQUIRE(p_if_r1 != nullptr);
		REQUIRE(p_if_r1->can_filter(p_db_r1));
		REQUIRE(p_if_r1->can_filter(p_st_r1));
		REQUIRE(p_if_r1->can_filter(p_by_r1));

		p_if_r3 = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim_r3.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &buff_1k);

		REQUIRE(p_if_r3 != nullptr);
		REQUIRE(p_if_r3->can_filter(p_db_r3));
		REQUIRE(p_if_r3->can_filter(p_st_r3));
		REQUIRE(p_if_r3->can_filter(p_by_r3));

		p_if_r6 = (pJazzFilter) new_jazz_block(CELL_TYPE_INTEGER, dim_r6.dim, nullptr, JAZZ_FILL_INTEGER_FILTER, (bool *) &buff_1k);

		REQUIRE(p_if_r6 != nullptr);
		REQUIRE(p_if_r6->can_filter(p_db_r6));
		REQUIRE(p_if_r6->can_filter(p_st_r6));
		REQUIRE(p_if_r6->can_filter(p_by_r6));

		p_bf_r1 = (pJazzFilter) new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim_r1.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &buff_1k);

		REQUIRE(p_bf_r1 != nullptr);
		REQUIRE(p_bf_r1->can_filter(p_db_r1));
		REQUIRE(p_bf_r1->can_filter(p_st_r1));
		REQUIRE(p_bf_r1->can_filter(p_by_r1));

		p_bf_r3 = (pJazzFilter) new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim_r3.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &buff_1k);

		REQUIRE(p_bf_r3 != nullptr);
		REQUIRE(p_bf_r3->can_filter(p_db_r3));
		REQUIRE(p_bf_r3->can_filter(p_st_r3));
		REQUIRE(p_bf_r3->can_filter(p_by_r3));

		p_bf_r6 = (pJazzFilter) new_jazz_block(CELL_TYPE_BYTE_BOOLEAN, dim_r6.dim, nullptr, JAZZ_FILL_BOOLEAN_FILTER, (bool *) &buff_1k);

		REQUIRE(p_bf_r6 != nullptr);
		REQUIRE(p_bf_r6->can_filter(p_db_r6));
		REQUIRE(p_bf_r6->can_filter(p_st_r6));
		REQUIRE(p_bf_r6->can_filter(p_by_r6));

		WHEN("I give wrong arguments, I get nullptr.") {
			pJazzBlock pcp;

			pcp = new_jazz_block(nullptr);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, p_bf_r3);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, p_bf_r6);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, p_if_r3);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, p_if_r6);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, p_bf_r1);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, p_bf_r6);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, p_if_r1);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, p_if_r6);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, p_bf_r1);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, p_bf_r3);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, p_if_r1);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, p_if_r3);
			REQUIRE(pcp == nullptr);

			AllAttributes kwap {};

			pcp = new_jazz_block(p_db_r1, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_db_r1, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_by_r3, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, nullptr, &kwap);
			REQUIRE(pcp == nullptr);

			pcp = new_jazz_block(p_st_r6, nullptr, &kwap);
			REQUIRE(pcp == nullptr);
		}

		WHEN("I create identical blocks") {
			pJazzBlock pcp_db_r1, pcp_db_r3, pcp_db_r6,
					   pcp_st_r1, pcp_st_r3, pcp_st_r6,
					   pcp_by_r1, pcp_by_r3, pcp_by_r6;

			pcp_db_r1 = new_jazz_block(p_db_r1);

			REQUIRE(pcp_db_r1 != nullptr);
			REQUIRE(pcp_db_r1->size == 107);

			pcp_db_r3 = new_jazz_block(p_db_r3);

			REQUIRE(pcp_db_r3 != nullptr);
			REQUIRE(pcp_db_r3->size == 459);

			pcp_db_r6 = new_jazz_block(p_db_r6);

			REQUIRE(pcp_db_r6 != nullptr);
			REQUIRE(pcp_db_r6->size == 840);

			pcp_st_r1 = new_jazz_block(p_st_r1);

			REQUIRE(pcp_st_r1 != nullptr);
			REQUIRE(pcp_st_r1->size == 107);

			pcp_st_r3 = new_jazz_block(p_st_r3);

			REQUIRE(pcp_st_r3 != nullptr);
			REQUIRE(pcp_st_r3->size == 459);

			pcp_st_r6 = new_jazz_block(p_st_r6);

			REQUIRE(pcp_st_r6 != nullptr);
			REQUIRE(pcp_st_r6->size == 840);

			pcp_by_r1 = new_jazz_block(p_by_r1);

			REQUIRE(pcp_by_r1 != nullptr);
			REQUIRE(pcp_by_r1->size == 107);

			pcp_by_r3 = new_jazz_block(p_by_r3);

			REQUIRE(pcp_by_r3 != nullptr);
			REQUIRE(pcp_by_r3->size == 459);

			pcp_by_r6 = new_jazz_block(p_by_r6);

			REQUIRE(pcp_by_r6 != nullptr);
			REQUIRE(pcp_by_r6->size == 840);

			THEN("Their structure is as expected.") {
				REQUIRE(pcp_db_r1->cell_type							 == p_db_r1->cell_type);
				REQUIRE(pcp_st_r6->cell_type							 == p_st_r6->cell_type);
				REQUIRE(pcp_by_r3->rank									 == p_by_r3->rank);
				REQUIRE(pcp_db_r1->rank									 == p_db_r1->rank);
				REQUIRE(pcp_st_r6->range.dim[0]							 == p_st_r6->range.dim[0]);

				REQUIRE(pcp_by_r3->range.dim[2]							 == p_by_r3->range.dim[2]);
				REQUIRE(pcp_db_r1->range.dim[3]							 == p_db_r1->range.dim[3]);
				REQUIRE(pcp_st_r6->size									 == p_st_r6->size);
				REQUIRE(pcp_by_r3->size									 == p_by_r3->size);
				REQUIRE(pcp_db_r1->num_attributes						 == p_db_r1->num_attributes);

				REQUIRE(pcp_st_r6->num_attributes						 == p_st_r6->num_attributes);
				REQUIRE(pcp_by_r3->total_bytes							 == p_by_r3->total_bytes);
				REQUIRE(pcp_db_r1->total_bytes							 == p_db_r1->total_bytes);
				REQUIRE(pcp_st_r6->has_NA								 == p_st_r6->has_NA);
				REQUIRE(pcp_by_r3->has_NA								 == p_by_r3->has_NA);

				REQUIRE(pcp_db_r1->has_NA								 == p_db_r1->has_NA);
				REQUIRE(pcp_st_r6->tensor.cell_int [67]					 == p_st_r6->tensor.cell_int [67]);
				REQUIRE(pcp_by_r3->tensor.cell_byte[13]					 == p_by_r3->tensor.cell_byte[13]);
				REQUIRE(pcp_db_r1->tensor.cell_double[33]				 == p_db_r1->tensor.cell_double[33]);
				REQUIRE(pcp_st_r6->tensor.cell_int[27]					 == p_st_r6->tensor.cell_int[27]);

				REQUIRE(pcp_by_r3->p_attribute_keys()[0]				 == p_by_r3->p_attribute_keys()[0]);
				REQUIRE(pcp_db_r1->p_string_buffer()->stop_check_4_match == p_db_r1->p_string_buffer()->stop_check_4_match);
				REQUIRE(pcp_st_r6->p_attribute_keys()[0]				 == p_st_r6->p_attribute_keys()[0]);
				REQUIRE(pcp_by_r3->p_string_buffer()->alloc_failed		 == p_by_r3->p_string_buffer()->alloc_failed);
				REQUIRE(pcp_db_r1->p_string_buffer()->last_idx			 == p_db_r1->p_string_buffer()->last_idx);

				REQUIRE(pcp_st_r6->p_string_buffer()->last_idx			 == p_st_r6->p_string_buffer()->last_idx);
				REQUIRE(pcp_by_r3->p_string_buffer()->last_idx			 == p_by_r3->p_string_buffer()->last_idx);
				REQUIRE(pcp_db_r1->p_string_buffer()->buffer_size		 == p_db_r1->p_string_buffer()->buffer_size);
				REQUIRE(pcp_st_r6->p_string_buffer()->buffer_size		 == p_st_r6->p_string_buffer()->buffer_size);
				REQUIRE(pcp_by_r3->p_string_buffer()->buffer[3]			 == p_by_r3->p_string_buffer()->buffer[3]);

				REQUIRE(pcp_db_r1->p_string_buffer()->buffer[4]			 == p_db_r1->p_string_buffer()->buffer[4]);
				REQUIRE(pcp_st_r6->p_string_buffer()->buffer[20]		 == p_st_r6->p_string_buffer()->buffer[20]);

				REQUIRE(!strcmp(pcp_db_r1->find_attribute(256), "Life's but a walking shadow"));
				REQUIRE(!strcmp(pcp_st_r6->find_attribute(313), "... a poor player"));
				REQUIRE(!strcmp(pcp_by_r3->find_attribute(921), "that struts and frets his hour"));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(222), "upon the stage and"));
				REQUIRE(!strcmp(pcp_st_r6->find_attribute(321), "then ..."));
				REQUIRE(pcp_by_r3->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)	== nullptr);
				REQUIRE(pcp_db_r1->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(pcp_st_r6->find_attribute(486)							== nullptr);
				REQUIRE(pcp_by_r3->find_attribute(487)							== nullptr);

				REQUIRE(!strcmp(pcp_db_r3->find_attribute(123), ""));
				REQUIRE(!strcmp(pcp_st_r1->find_attribute(456), ""));
				REQUIRE(!strcmp(pcp_by_r6->find_attribute(123), ""));
				REQUIRE(pcp_db_r3->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)	== nullptr);
				REQUIRE(pcp_st_r1->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(pcp_by_r6->find_attribute(487)							== nullptr);

				REQUIRE(!strcmp(pcp_db_r6->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY), ""));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY), ""));
				REQUIRE(!strcmp(pcp_by_r1->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY), ""));
				REQUIRE(pcp_db_r6->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(pcp_st_r3->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(pcp_by_r1->find_attribute(487)							== nullptr);

				REQUIRE(pcp_db_r1->tensor.cell_double[33] == 3.3);
				REQUIRE(pcp_by_r1->tensor.cell_byte	 [33] == 73);
				REQUIRE(!strcmp(pcp_st_r1->get_string(15), "April"));
				REQUIRE(!pcp_st_r1->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcp_db_r1);
				check_and_close_jazz_block(pcp_st_r1);
				check_and_close_jazz_block(pcp_by_r1);

				REQUIRE(pcp_db_r3->tensor.cell_double[334] == 12003001.0);
				REQUIRE(pcp_by_r3->tensor.cell_byte	 [334] == 102);
				REQUIRE(!strcmp(pcp_st_r3->get_string(334), "July"));
				REQUIRE(!pcp_st_r3->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcp_db_r3);
				check_and_close_jazz_block(pcp_st_r3);
				check_and_close_jazz_block(pcp_by_r3);

				REQUIRE(pcp_db_r6->tensor.cell_double[753] == 120000307.0);
				REQUIRE(pcp_by_r6->tensor.cell_byte	 [753] == 167);
				REQUIRE(!strcmp(pcp_st_r6->get_string(753), "December"));
				REQUIRE(!pcp_st_r6->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcp_db_r6);
				check_and_close_jazz_block(pcp_st_r6);
				check_and_close_jazz_block(pcp_by_r6);
			}

			free_jazz_block(pcp_db_r1);
			REQUIRE(pcp_db_r1 == nullptr);

			free_jazz_block(pcp_db_r3);
			REQUIRE(pcp_db_r3 == nullptr);

			free_jazz_block(pcp_db_r6);
			REQUIRE(pcp_db_r6 == nullptr);

			free_jazz_block(pcp_st_r1);
			REQUIRE(pcp_st_r1 == nullptr);

			free_jazz_block(pcp_st_r3);
			REQUIRE(pcp_st_r3 == nullptr);

			free_jazz_block(pcp_st_r6);
			REQUIRE(pcp_st_r6 == nullptr);

			free_jazz_block(pcp_by_r1);
			REQUIRE(pcp_by_r1 == nullptr);

			free_jazz_block(pcp_by_r3);
			REQUIRE(pcp_by_r3 == nullptr);

			free_jazz_block(pcp_by_r6);
			REQUIRE(pcp_by_r6 == nullptr);
		}

		WHEN("I create identical blocks with different attributes") {
			pJazzBlock pcp_db_r1, pcp_db_r3, pcp_db_r6,
					   pcp_st_r1, pcp_st_r3, pcp_st_r6,
					   pcp_by_r1, pcp_by_r3, pcp_by_r6;

			pcp_db_r1 = new_jazz_block(p_db_r1, nullptr, &new_str);

			REQUIRE(pcp_db_r1 != nullptr);
			REQUIRE(pcp_db_r1->size == 107);

			pcp_db_r3 = new_jazz_block(p_db_r3, nullptr, &new_str);

			REQUIRE(pcp_db_r3 != nullptr);
			REQUIRE(pcp_db_r3->size == 459);

			pcp_db_r6 = new_jazz_block(p_db_r6, nullptr, &no_str);

			REQUIRE(pcp_db_r6 != nullptr);
			REQUIRE(pcp_db_r6->size == 840);

			pcp_st_r1 = new_jazz_block(p_st_r1, nullptr, &new_str);

			REQUIRE(pcp_st_r1 != nullptr);
			REQUIRE(pcp_st_r1->size == 107);

			pcp_st_r3 = new_jazz_block(p_st_r3, nullptr, &new_str);

			REQUIRE(pcp_st_r3 != nullptr);
			REQUIRE(pcp_st_r3->size == 459);

			pcp_st_r6 = new_jazz_block(p_st_r6, nullptr, &no_str);

			REQUIRE(pcp_st_r6 != nullptr);
			REQUIRE(pcp_st_r6->size == 840);

			pcp_by_r1 = new_jazz_block(p_by_r1, nullptr, &new_str);

			REQUIRE(pcp_by_r1 != nullptr);
			REQUIRE(pcp_by_r1->size == 107);

			pcp_by_r3 = new_jazz_block(p_by_r3, nullptr, &new_str);

			REQUIRE(pcp_by_r3 != nullptr);
			REQUIRE(pcp_by_r3->size == 459);

			pcp_by_r6 = new_jazz_block(p_by_r6, nullptr, &no_str);

			REQUIRE(pcp_by_r6 != nullptr);
			REQUIRE(pcp_by_r6->size == 840);

			THEN("Their structure is as expected.") {
				REQUIRE(pcp_db_r1->cell_type							 == p_db_r1->cell_type);
				REQUIRE(pcp_st_r6->cell_type							 == p_st_r6->cell_type);
				REQUIRE(pcp_by_r3->rank									 == p_by_r3->rank);
				REQUIRE(pcp_db_r1->rank									 == p_db_r1->rank);
				REQUIRE(pcp_st_r6->range.dim[0]							 == p_st_r6->range.dim[0]);

				REQUIRE(pcp_by_r3->range.dim[2]							 == p_by_r3->range.dim[2]);
				REQUIRE(pcp_db_r1->range.dim[3]							 == p_db_r1->range.dim[3]);
				REQUIRE(pcp_st_r6->size									 == p_st_r6->size);
				REQUIRE(pcp_by_r3->size									 == p_by_r3->size);
				REQUIRE(pcp_db_r1->num_attributes						 == 6);

				REQUIRE(pcp_st_r6->num_attributes						 == 2);
				REQUIRE(pcp_by_r3->total_bytes							 == p_by_r3->total_bytes);
				REQUIRE(pcp_db_r1->total_bytes							 == p_db_r1->total_bytes);	// Same number of chars in old and new
				REQUIRE(pcp_st_r6->has_NA								 == p_st_r6->has_NA);
				REQUIRE(pcp_by_r3->has_NA								 == p_by_r3->has_NA);

				REQUIRE(pcp_db_r1->has_NA								 == p_db_r1->has_NA);
				REQUIRE(pcp_st_r6->tensor.cell_int [67]					 == p_st_r6->tensor.cell_int [67]);
				REQUIRE(pcp_by_r3->tensor.cell_byte[13]					 == p_by_r3->tensor.cell_byte[13]);
				REQUIRE(pcp_db_r1->tensor.cell_double[33]				 == p_db_r1->tensor.cell_double[33]);
				REQUIRE(pcp_st_r6->tensor.cell_int[27]					 == p_st_r6->tensor.cell_int[27]);

				REQUIRE(pcp_db_r1->p_string_buffer()->stop_check_4_match == p_db_r1->p_string_buffer()->stop_check_4_match);
				REQUIRE(pcp_by_r3->p_string_buffer()->alloc_failed		 == p_by_r3->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(pcp_db_r1->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_st_r1->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_by_r1->find_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_db_r3->find_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(676), "signifying .."));
				REQUIRE(pcp_by_r3->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)	== nullptr);
				REQUIRE(pcp_db_r1->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(pcp_st_r1->find_attribute(486)							== nullptr);
				REQUIRE(pcp_by_r1->find_attribute(487)							== nullptr);
				REQUIRE(!strcmp(pcp_db_r3->find_attribute(321), "NULL"));

				REQUIRE(!strcmp(pcp_st_r6->find_attribute(456), ""));
				REQUIRE(!strcmp(pcp_by_r6->find_attribute(123), ""));
				REQUIRE(pcp_db_r6->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY)	== nullptr);
				REQUIRE(pcp_st_r6->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);

				REQUIRE(pcp_db_r1->tensor.cell_double[33] == 3.3);
				REQUIRE(pcp_by_r1->tensor.cell_byte	 [33] == 73);
				REQUIRE(!strcmp(pcp_st_r1->get_string(15), "April"));
				REQUIRE(!pcp_st_r1->p_string_buffer()->alloc_failed);

				// Not a string, from old_str to new_str:
				REQUIRE(pcp_db_r1->total_bytes					  == p_db_r1->total_bytes);
				REQUIRE(pcp_db_r1->p_string_buffer()->buffer_size == p_db_r1->p_string_buffer()->buffer_size - 8);	// 8 bytes == keys 1+ attr
				REQUIRE(pcp_db_r1->p_string_buffer()->last_idx	  == p_db_r1->p_string_buffer()->last_idx - 8);

				REQUIRE(!strcmp(pcp_db_r1->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(676), "signifying .."));
				REQUIRE(!strcmp(pcp_db_r1->find_attribute(321), "NULL"));

				// Not a string, from nullptr to new_str:
				REQUIRE(pcp_by_r1->total_bytes					  == p_by_r1->total_bytes + 8*5 + 97);
				REQUIRE(pcp_by_r1->p_string_buffer()->buffer_size == pcp_db_r1->p_string_buffer()->buffer_size);
				REQUIRE(pcp_by_r1->p_string_buffer()->last_idx	  == pcp_db_r1->p_string_buffer()->last_idx);

				// String, from no_str to new_str:
				REQUIRE(pcp_st_r1->total_bytes					  == p_st_r1->total_bytes + 8*4 + 97);
				REQUIRE(pcp_st_r1->num_attributes				  == p_st_r1->num_attributes + 4);

				REQUIRE(pcp_st_r1->p_string_buffer()->buffer_size == p_st_r1->p_string_buffer()->buffer_size + 97);

				// String, from nullptr to new_str:
				REQUIRE(pcp_st_r3->total_bytes					  == p_st_r3->total_bytes + 8*5 + 97);
				REQUIRE(pcp_st_r3->p_string_buffer()->buffer_size == p_st_r3->p_string_buffer()->buffer_size + 97);

				REQUIRE(!strcmp(pcp_st_r3->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(358), "told by an idiot.."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(222), "full of sound and fury.."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(676), "signifying .."));
				REQUIRE(!strcmp(pcp_st_r3->find_attribute(321), "NULL"));

				// String, from old_str to no_str:
				REQUIRE(pcp_st_r6->total_bytes					  == p_st_r6->total_bytes - 8*3);
				REQUIRE(pcp_st_r6->p_string_buffer()->buffer_size == p_st_r6->p_string_buffer()->buffer_size);
				REQUIRE(pcp_st_r6->p_string_buffer()->last_idx	  == p_st_r6->p_string_buffer()->last_idx);
				REQUIRE(!strcmp(pcp_st_r6->find_attribute(456), ""));
				REQUIRE(!strcmp(pcp_st_r6->find_attribute(123), ""));
				REQUIRE(pcp_st_r6->find_attribute(654) == nullptr);

				for (int i = 0; i < 10; i++) {
					REQUIRE(pcp_st_r1->tensor.cell_int[i] == p_st_r1->tensor.cell_int[i]);
					REQUIRE(pcp_st_r3->tensor.cell_int[i] == p_st_r3->tensor.cell_int[i]);
					REQUIRE(pcp_st_r6->tensor.cell_int[i] == p_st_r6->tensor.cell_int[i]);
				}

				check_and_close_jazz_block(pcp_db_r1);
				check_and_close_jazz_block(pcp_st_r1);
				check_and_close_jazz_block(pcp_by_r1);

				REQUIRE(pcp_db_r3->tensor.cell_double[334] == 12003001.0);
				REQUIRE(pcp_by_r3->tensor.cell_byte	 [334] == 102);
				REQUIRE(!strcmp(pcp_st_r3->get_string(334), "July"));
				REQUIRE(!pcp_st_r3->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcp_db_r3);
				check_and_close_jazz_block(pcp_st_r3);
				check_and_close_jazz_block(pcp_by_r3);

				REQUIRE(pcp_db_r6->tensor.cell_double[753] == 120000307.0);
				REQUIRE(pcp_by_r6->tensor.cell_byte	 [753] == 167);
				REQUIRE(!strcmp(pcp_st_r6->get_string(753), "December"));
				REQUIRE(!pcp_st_r6->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcp_db_r6);
				check_and_close_jazz_block(pcp_st_r6);
				check_and_close_jazz_block(pcp_by_r6);
			}

			free_jazz_block(pcp_db_r1);
			REQUIRE(pcp_db_r1 == nullptr);

			free_jazz_block(pcp_db_r3);
			REQUIRE(pcp_db_r3 == nullptr);

			free_jazz_block(pcp_db_r6);
			REQUIRE(pcp_db_r6 == nullptr);

			free_jazz_block(pcp_st_r1);
			REQUIRE(pcp_st_r1 == nullptr);

			free_jazz_block(pcp_st_r3);
			REQUIRE(pcp_st_r3 == nullptr);

			free_jazz_block(pcp_st_r6);
			REQUIRE(pcp_st_r6 == nullptr);

			free_jazz_block(pcp_by_r1);
			REQUIRE(pcp_by_r1 == nullptr);

			free_jazz_block(pcp_by_r3);
			REQUIRE(pcp_by_r3 == nullptr);

			free_jazz_block(pcp_by_r6);
			REQUIRE(pcp_by_r6 == nullptr);
		}

		WHEN("I filter with all combinations of blocks an filters") {
			pJazzBlock pcpa_db_r1, pcpa_db_r3, pcpa_db_r6,
					   pcpa_st_r1, pcpa_st_r3, pcpa_st_r6,
					   pcpa_by_r1, pcpa_by_r3, pcpa_by_r6,
					   pcpb_db_r1, pcpb_db_r3, pcpb_db_r6,
					   pcpb_st_r1, pcpb_st_r3, pcpb_st_r6,
					   pcpb_by_r1, pcpb_by_r3, pcpb_by_r6;

			// Select all elements with binary, correct, and just dimensioned integer
			for (int i = 0; i < p_if_r1->size; i++) {
				p_if_r1->tensor.cell_int[i]	 = i;
				p_bf_r1->tensor.cell_bool[i] = true;
			}
			p_if_r1->range.filter.length = p_if_r1->size;

			for (int i = 0; i < p_if_r3->size; i++) {
				p_if_r3->tensor.cell_int[i]	 = 0;
				p_bf_r3->tensor.cell_bool[i] = true;
			}
			p_if_r3->range.filter.length = p_if_r3->size;

			for (int i = 0; i < p_if_r6->size; i++) {
				p_if_r6->tensor.cell_int[i]	 = -i;
				p_bf_r6->tensor.cell_bool[i] = true;
			}
			p_if_r6->range.filter.length = p_if_r6->size;

			pcpa_db_r1 = new_jazz_block(p_db_r1, p_if_r1);

			REQUIRE(pcpa_db_r1 != nullptr);
			REQUIRE(pcpa_db_r1->size == 107);

			pcpa_db_r3 = new_jazz_block(p_db_r3, p_if_r3);

			REQUIRE(pcpa_db_r3 != nullptr);
			REQUIRE(pcpa_db_r3->size == 459);

			pcpa_db_r6 = new_jazz_block(p_db_r6, p_if_r6, &no_str);

			REQUIRE(pcpa_db_r6 != nullptr);
			REQUIRE(pcpa_db_r6->size == 840);

			pcpa_st_r1 = new_jazz_block(p_st_r1, p_bf_r1);

			REQUIRE(pcpa_st_r1 != nullptr);
			REQUIRE(pcpa_st_r1->size == 107);

			pcpa_st_r3 = new_jazz_block(p_st_r3, p_bf_r3);

			REQUIRE(pcpa_st_r3 != nullptr);
			REQUIRE(pcpa_st_r3->size == 459);

			pcpa_st_r6 = new_jazz_block(p_st_r6, p_bf_r6, &new_str);

			REQUIRE(pcpa_st_r6 != nullptr);
			REQUIRE(pcpa_st_r6->size == 840);

			// Select no elements with binary and integer
			for (int i = 0; i < p_if_r1->size; i++) {
				p_bf_r1->tensor.cell_bool[i] = false;
			}
			p_if_r1->range.filter.length = 0;

			for (int i = 0; i < p_if_r3->size; i++) {
				p_bf_r3->tensor.cell_bool[i] = false;
			}
			p_if_r3->range.filter.length = 0;

			for (int i = 0; i < p_if_r6->size; i++) {
				p_bf_r6->tensor.cell_bool[i] = false;
			}
			p_if_r6->range.filter.length = 0;

			pcpa_by_r1 = new_jazz_block(p_by_r1, p_if_r1);

			REQUIRE(pcpa_by_r1 != nullptr);
			REQUIRE(pcpa_by_r1->size == 0);
			REQUIRE(pcpa_by_r1->rank == 1);

			pcpa_by_r3 = new_jazz_block(p_by_r3, p_if_r3, &new_str);

			REQUIRE(pcpa_by_r3 != nullptr);
			REQUIRE(pcpa_by_r3->size == 0);
			REQUIRE(pcpa_by_r3->rank == 3);

			pcpa_by_r6 = new_jazz_block(p_by_r6, p_if_r6);

			REQUIRE(pcpa_by_r6 != nullptr);
			REQUIRE(pcpa_by_r6->size == 0);
			REQUIRE(pcpa_by_r6->rank == 6);

			pcpb_db_r1 = new_jazz_block(p_db_r1, p_bf_r1);

			REQUIRE(pcpb_db_r1 != nullptr);
			REQUIRE(pcpb_db_r1->size == 0);
			REQUIRE(pcpb_db_r1->rank == 1);

			pcpb_db_r3 = new_jazz_block(p_db_r3, p_bf_r3, &no_str);

			REQUIRE(pcpb_db_r3 != nullptr);
			REQUIRE(pcpb_db_r3->size == 0);
			REQUIRE(pcpb_db_r3->rank == 3);

			pcpb_db_r6 = new_jazz_block(p_db_r6, p_bf_r6);

			REQUIRE(pcpb_db_r6 != nullptr);
			REQUIRE(pcpb_db_r6->size == 0);
			REQUIRE(pcpb_db_r6->rank == 6);

			// Select some elements with binary and integer	 - dim_r1 {{107, 0}}, dim_r3 {{17, 9, 3, 0}}, dim_r6 {{2, 3, 2, 5, 2, 7}};
			for (int i = 0; i < p_if_r1->size; i++) {
				p_if_r1->tensor.cell_int[i]	 = 3*i + 4;
				p_bf_r1->tensor.cell_bool[i] = i % 3 == 2;
			}
			p_if_r1->range.filter.length = 17;

			for (int i = 0; i < p_if_r3->size; i++) {
				p_if_r3->tensor.cell_int[i]	 = i;
				p_bf_r3->tensor.cell_bool[i] = i % 4 == 2;
			}
			p_if_r3->range.filter.length = 7;

			for (int i = 0; i < p_if_r6->size; i++) {
				p_if_r6->tensor.cell_int[i]	 = 1;
				p_bf_r6->tensor.cell_bool[i] = i == 0;
			}
			p_if_r6->range.filter.length = 1;

			pcpb_st_r1 = new_jazz_block(p_st_r1, p_if_r1, &no_str);

			REQUIRE(pcpb_st_r1 != nullptr);
			REQUIRE(pcpb_st_r1->size == 17);

			pcpb_st_r3 = new_jazz_block(p_st_r3, p_if_r3);

			REQUIRE(pcpb_st_r3 != nullptr);
			REQUIRE(pcpb_st_r3->size == 189);

			pcpb_st_r6 = new_jazz_block(p_st_r6, p_if_r6);

			REQUIRE(pcpb_st_r6 != nullptr);
			REQUIRE(pcpb_st_r6->size == 420);

			pcpb_by_r1 = new_jazz_block(p_by_r1, p_bf_r1, &new_str);

			REQUIRE(pcpb_by_r1 != nullptr);
			REQUIRE(pcpb_by_r1->size == 35);

			pcpb_by_r3 = new_jazz_block(p_by_r3, p_bf_r3);

			REQUIRE(pcpb_by_r3 != nullptr);
			REQUIRE(pcpb_by_r3->size == 108);

			pcpb_by_r6 = new_jazz_block(p_by_r6, p_bf_r6);

			REQUIRE(pcpb_by_r6 != nullptr);
			REQUIRE(pcpb_by_r6->size == 420);

			THEN("Their structure is as expected.") {
				REQUIRE(pcpa_db_r1->cell_type							  == p_db_r1->cell_type);
				REQUIRE(pcpa_st_r6->cell_type							  == p_st_r6->cell_type);
				REQUIRE(pcpa_db_r3->rank								  == p_db_r3->rank);
				REQUIRE(pcpa_db_r1->rank								  == p_db_r1->rank);
				REQUIRE(pcpa_st_r6->range.dim[0]						  == p_st_r6->range.dim[0]);

				REQUIRE(pcpa_db_r3->range.dim[2]						  == p_db_r3->range.dim[2]);
				REQUIRE(pcpa_st_r1->range.dim[3]						  == p_st_r1->range.dim[3]);
				REQUIRE(pcpa_st_r6->size								  == p_st_r6->size);
				REQUIRE(pcpa_db_r3->size								  == p_db_r3->size);
				REQUIRE(pcpa_db_r1->num_attributes						  == p_db_r1->num_attributes);

				REQUIRE(pcpa_st_r6->num_attributes						  == 6);
				REQUIRE(pcpa_st_r3->total_bytes							  == p_st_r3->total_bytes);
				REQUIRE(pcpa_db_r1->total_bytes							  == p_db_r1->total_bytes);
				REQUIRE(pcpa_st_r6->has_NA								  == p_st_r6->has_NA);
				REQUIRE(pcpa_db_r3->has_NA								  == p_db_r3->has_NA);

				REQUIRE(pcpa_db_r1->has_NA								  == p_db_r1->has_NA);
				REQUIRE(pcpa_st_r6->tensor.cell_int [67]				  == p_st_r6->tensor.cell_int [67]);
				REQUIRE(pcpa_db_r3->tensor.cell_byte[13]				  == p_db_r3->tensor.cell_byte[13]);
				REQUIRE(pcpa_db_r1->tensor.cell_double[33]				  == p_db_r1->tensor.cell_double[33]);
				REQUIRE(pcpa_st_r6->tensor.cell_int[27]					  == p_st_r6->tensor.cell_int[27]);

				REQUIRE(pcpa_db_r3->p_attribute_keys()[0]				  == p_db_r3->p_attribute_keys()[0]);
				REQUIRE(pcpa_db_r1->p_string_buffer()->stop_check_4_match == p_db_r1->p_string_buffer()->stop_check_4_match);
				REQUIRE(pcpa_db_r1->p_string_buffer()->last_idx			  == p_db_r1->p_string_buffer()->last_idx);
				REQUIRE(pcpa_db_r3->p_string_buffer()->last_idx			  == p_db_r3->p_string_buffer()->last_idx);
				REQUIRE(pcpa_db_r1->p_string_buffer()->buffer_size		  == p_db_r1->p_string_buffer()->buffer_size);
				REQUIRE(pcpa_db_r3->p_string_buffer()->buffer[3]		  == p_db_r3->p_string_buffer()->buffer[3]);

				REQUIRE(pcpa_db_r1->p_string_buffer()->buffer[4]		  == p_db_r1->p_string_buffer()->buffer[4]);

				REQUIRE(!strcmp(pcpa_db_r1->find_attribute(256), "Life's but a walking shadow"));
				REQUIRE(!strcmp(pcpa_db_r3->find_attribute(123), ""));
				REQUIRE(!strcmp(pcpa_db_r6->find_attribute(456), ""));

				REQUIRE(pcpa_st_r1->find_attribute(BLOCK_ATTR_CONTAINERS_FILTER) == nullptr);
				REQUIRE(!strcmp(pcpa_st_r3->find_attribute(BLOCK_ATTR_CONTAINERS_EMPTY), ""));

				REQUIRE(!strcmp(pcpa_st_r6->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcpa_st_r6->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcpa_st_r6->find_attribute(358), "told by an idiot.."));

				REQUIRE(pcpa_db_r1->tensor.cell_double[33] == 3.3);
				REQUIRE(!strcmp(pcpa_st_r1->get_string(15), "April"));
				REQUIRE(!pcpa_st_r1->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcpa_db_r1);
				check_and_close_jazz_block(pcpa_st_r1);

				REQUIRE(pcpa_db_r3->tensor.cell_double[334] == 12003001.0);
				REQUIRE(!strcmp(pcpa_st_r3->get_string(334), "July"));
				REQUIRE(!pcpa_st_r3->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcpa_db_r3);
				check_and_close_jazz_block(pcpa_st_r3);

				REQUIRE(pcpa_db_r6->tensor.cell_double[753] == 120000307.0);
				REQUIRE(!strcmp(pcpa_st_r6->get_string(753), "December"));
				REQUIRE(!pcpa_st_r6->p_string_buffer()->alloc_failed);

				check_and_close_jazz_block(pcpa_db_r6);
				check_and_close_jazz_block(pcpa_st_r6);

				int index[6];

				for (int i = 0; i < 107; i++) {
					index[0] = i;

					REQUIRE(pcpa_db_r1->tensor.cell_double[pcpa_db_r1->get_offset((int *) &index)] == i/10.0);

					REQUIRE(!strcmp(pcpa_st_r1->get_string((int *) &index), month[i % 12]));
					REQUIRE(pcpa_st_r1->tensor.cell_int[pcpa_st_r1->get_offset((int *) &index)] ==
							p_st_r1->tensor.cell_int[p_st_r1->get_offset((int *) &index)]);
				}

				for (int i = 0; i < 17; i++) {
					for (int j = 0; j < 9; j++) {
						for (int k = 0; k < 3; k++) {
							index[0] = i;
							index[1] = j;
							index[2] = k;

							REQUIRE(pcpa_db_r3->tensor.cell_double[pcpa_db_r3->get_offset((int *) &index)] == 1e6*i + 1e3*j + k);

							REQUIRE(!strcmp(pcpa_st_r3->get_string((int *) &index), month[(7*i + 5*j + 3*k) % 12]));
							REQUIRE(pcpa_st_r3->tensor.cell_int[pcpa_st_r3->get_offset((int *) &index)] ==
									p_st_r3->tensor.cell_int[p_st_r3->get_offset((int *) &index)]);
						}
					}
				}

				for (int i = 0; i < 2; i++) {
					for (int j = 0; j < 3; j++) {
						for (int k = 0; k < 2; k++) {
							for (int u = 0; u < 5; u++) {
								for (int v = 0; v < 2; v++) {
									for (int w = 0; w < 7; w++) {
										index[0] = i;
										index[1] = j;
										index[2] = k;
										index[3] = u;
										index[4] = v;
										index[5] = w;

										REQUIRE(pcpa_db_r6->tensor.cell_double[pcpa_db_r6->get_offset((int *) &index)] ==
												1e8*i + 1e7*j + 1e6*k + 100*u + 11*v - w);

										REQUIRE(!strcmp(pcpa_st_r6->get_string((int *) &index),
														month[(45*i + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]));
										REQUIRE(pcpa_st_r6->tensor.cell_int[pcpa_st_r6->get_offset((int *) &index)] ==
												p_st_r6->tensor.cell_int[p_st_r6->get_offset((int *) &index)]);
									}
								}
							}
						}
					}
				}

				REQUIRE(pcpa_by_r1->cell_type	   == p_by_r1->cell_type);
				REQUIRE(pcpb_db_r6->cell_type	   == p_db_r6->cell_type);
				REQUIRE(pcpa_by_r3->rank		   == p_by_r3->rank);
				REQUIRE(pcpb_db_r1->rank		   == p_db_r1->rank);
				REQUIRE(pcpa_by_r6->range.dim[0]   == p_by_r6->range.dim[0]);
				REQUIRE(pcpa_by_r3->range.dim[2]   == p_by_r3->range.dim[2]);
				REQUIRE(pcpb_db_r1->range.dim[3]   == p_db_r1->range.dim[3]);
				REQUIRE(pcpb_db_r6->size		   == 0);
				REQUIRE(pcpa_by_r3->size		   == 0);
				REQUIRE(pcpb_db_r1->num_attributes == p_db_r1->num_attributes);
				REQUIRE(pcpa_by_r6->num_attributes == p_by_r6->num_attributes);

				REQUIRE(pcpa_by_r1->total_bytes	   == p_by_r1->total_bytes - (uintptr_t) pcpa_by_r1->align_128bit(p_by_r1->size));
				REQUIRE(pcpa_by_r3->total_bytes	   == p_by_r3->total_bytes - (uintptr_t) pcpa_by_r3->align_128bit(p_by_r3->size));
				REQUIRE(pcpa_by_r6->total_bytes	   == p_by_r6->total_bytes - (uintptr_t) pcpa_by_r6->align_128bit(p_by_r6->size));
				REQUIRE(pcpb_db_r1->total_bytes	   == p_db_r1->total_bytes - (uintptr_t) pcpb_db_r1->align_128bit(8*p_db_r1->size));
				REQUIRE(pcpb_db_r3->total_bytes	   == p_db_r3->total_bytes - (uintptr_t) pcpb_db_r3->align_128bit(8*p_db_r3->size));
				REQUIRE(pcpb_db_r6->total_bytes	   == p_db_r6->total_bytes - (uintptr_t) pcpb_db_r6->align_128bit(8*p_db_r6->size));

				REQUIRE(!pcpa_by_r1->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpa_by_r3->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpa_by_r6->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_db_r1->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_db_r3->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_db_r6->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(pcpb_db_r3->find_attribute(123), ""));
				REQUIRE(!strcmp(pcpb_db_r3->find_attribute(456), ""));

				REQUIRE(!strcmp(pcpa_by_r3->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcpa_by_r3->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcpa_by_r3->find_attribute(358), "told by an idiot.."));

				check_and_close_jazz_block(pcpb_db_r1);
				check_and_close_jazz_block(pcpa_by_r1);

				check_and_close_jazz_block(pcpb_db_r3);
				check_and_close_jazz_block(pcpa_by_r3);

				check_and_close_jazz_block(pcpb_db_r6);
				check_and_close_jazz_block(pcpa_by_r6);

				REQUIRE(pcpb_by_r1->cell_type	   == p_by_r1->cell_type);
				REQUIRE(pcpb_st_r6->cell_type	   == p_st_r6->cell_type);
				REQUIRE(pcpb_by_r3->rank		   == p_by_r3->rank);
				REQUIRE(pcpb_st_r1->rank		   == p_st_r1->rank);
				REQUIRE(pcpb_st_r6->range.dim[0]   == p_st_r6->range.dim[0]);
				REQUIRE(pcpb_by_r3->range.dim[2]   == p_by_r3->range.dim[2]);
				REQUIRE(pcpb_st_r1->range.dim[3]   == p_st_r1->range.dim[3]);
				REQUIRE(pcpb_st_r1->num_attributes == 2);
				REQUIRE(pcpb_st_r3->num_attributes == p_st_r3->num_attributes);
				REQUIRE(pcpb_st_r6->num_attributes == p_st_r6->num_attributes);
				REQUIRE(pcpb_by_r1->num_attributes == 6);
				REQUIRE(pcpb_by_r3->num_attributes == p_by_r3->num_attributes);
				REQUIRE(pcpb_by_r6->num_attributes == p_by_r6->num_attributes);

				REQUIRE(pcpb_st_r1->total_bytes ==
						p_st_r1->total_bytes
						- (uintptr_t) pcpb_st_r1->align_128bit(4*(p_st_r1->size))
						+ (uintptr_t) pcpb_st_r1->align_128bit(4*(pcpb_st_r1->size)));
				REQUIRE(pcpb_st_r3->total_bytes ==
						p_st_r3->total_bytes
						- (uintptr_t) pcpb_st_r3->align_128bit(4*(p_st_r3->size))
						+ (uintptr_t) pcpb_st_r3->align_128bit(4*(pcpb_st_r3->size)));
				REQUIRE(pcpb_st_r6->total_bytes ==
						p_st_r6->total_bytes
						- (uintptr_t) pcpb_st_r6->align_128bit(4*(p_st_r6->size))
						+ (uintptr_t) pcpb_st_r6->align_128bit(4*(pcpb_st_r6->size)));
				REQUIRE(pcpb_by_r1->total_bytes ==
						p_by_r1->total_bytes + pcpb_by_r1->p_string_buffer()->buffer_size - 4 + 2*(6 -1)*sizeof(int)
						- (uintptr_t) pcpb_by_r1->align_128bit(p_by_r1->size)
						+ (uintptr_t) pcpb_by_r1->align_128bit(pcpb_by_r1->size));
				REQUIRE(pcpb_by_r3->total_bytes ==
						p_by_r3->total_bytes
						- (uintptr_t) pcpb_by_r3->align_128bit(p_by_r3->size)
						+ (uintptr_t) pcpb_by_r3->align_128bit(pcpb_by_r3->size));
				REQUIRE(pcpb_by_r6->total_bytes ==
						p_by_r6->total_bytes
						- (uintptr_t) pcpb_by_r6->align_128bit(p_by_r6->size)
						+ (uintptr_t) pcpb_by_r6->align_128bit(pcpb_by_r6->size));

				REQUIRE(!pcpb_by_r1->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_by_r3->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_by_r6->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_st_r1->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_st_r3->p_string_buffer()->alloc_failed);
				REQUIRE(!pcpb_st_r6->p_string_buffer()->alloc_failed);

				REQUIRE(!strcmp(pcpb_st_r1->find_attribute(123), ""));
				REQUIRE(!strcmp(pcpb_st_r1->find_attribute(456), ""));

				REQUIRE(!strcmp(pcpb_by_r1->find_attribute(921), "is heard nomore ..."));
				REQUIRE(!strcmp(pcpb_by_r1->find_attribute(313), "It's a tale.."));
				REQUIRE(!strcmp(pcpb_by_r1->find_attribute(358), "told by an idiot.."));

				check_and_close_jazz_block(pcpb_st_r1);
				check_and_close_jazz_block(pcpb_by_r1);

				check_and_close_jazz_block(pcpb_st_r3);
				check_and_close_jazz_block(pcpb_by_r3);

				check_and_close_jazz_block(pcpb_st_r6);
				check_and_close_jazz_block(pcpb_by_r6);

				int index_o[6];
				int i_i = 0, i_b = 0;

				for (int i_o = 0; i_o < 107; i_o++) {
					if (p_bf_r1->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						REQUIRE(pcpb_by_r1->tensor.cell_byte[pcpb_by_r1->get_offset((int *) &index)] == 7 + 2*i_o);

						i_b++;
					}
					if (i_i < p_if_r1->range.filter.length && p_if_r1->tensor.cell_int[i_i] == i_o) {
						index[0]   = i_i;
						index_o[0] = i_o;

						REQUIRE(!strcmp(pcpb_st_r1->get_string((int *) &index), month[i_o % 12]));
						REQUIRE(pcpb_st_r1->tensor.cell_int[pcpb_st_r1->get_offset((int *) &index)] ==
								p_st_r1->tensor.cell_int[p_st_r1->get_offset((int *) &index_o)]);

						i_i++;
					}
				}

				i_i = 0, i_b = 0;
				for (int i_o = 0; i_o < 17; i_o++) {
					index_o[0] = i_o;
					if (p_bf_r3->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						for (int j = 0; j < 9; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 3; k++) {
								index[2] = index_o[2] = k;

								REQUIRE(pcpb_by_r3->tensor.cell_byte[pcpb_by_r3->get_offset((int *) &index)] == 7*i_o + 5*j + 3*k);
							}
						}

						i_b++;
					}
					if (i_i < p_if_r3->range.filter.length && p_if_r3->tensor.cell_int[i_i] == i_o) {
						index[0] = i_i;

						for (int j = 0; j < 9; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 3; k++) {
								index[2] = index_o[2] = k;

								REQUIRE(!strcmp(pcpb_st_r3->get_string((int *) &index), month[(7*i_o + 5*j + 3*k) % 12]));
								REQUIRE(pcpb_st_r3->tensor.cell_int[pcpb_st_r3->get_offset((int *) &index)] ==
										p_st_r3->tensor.cell_int[p_st_r3->get_offset((int *) &index_o)]);
							}
						}

						i_i++;
					}
				}

				i_i = 0, i_b = 0;
				for (int i_o = 0; i_o < 2; i_o++) {
					index_o[0] = i_o;
					if (p_bf_r6->tensor.cell_bool[i_o]) {
						index[0] = i_b;

						for (int j = 0; j < 3; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 2; k++) {
								index[2] = index_o[2] = k;
								for (int u = 0; u < 5; u++) {
									index[3] = index_o[3] = u;
									for (int v = 0; v < 2; v++) {
										index[4] = index_o[4] = v;
										for (int w = 0; w < 7; w++) {
											index[5] = index_o[5] = w;

											REQUIRE(pcpb_by_r6->tensor.cell_byte[pcpb_by_r6->get_offset((int *) &index)] ==
													45*i_o + 34*j + 23*k + 12*u + 6*v + 3*w);
										}
									}
								}
							}
						}

						i_b++;
					}
					if (i_i < p_if_r6->range.filter.length && p_if_r6->tensor.cell_int[i_i] == i_o) {
						index[0] = i_i;

						for (int j = 0; j < 3; j++) {
							index[1] = index_o[1] = j;
							for (int k = 0; k < 2; k++) {
								index[2] = index_o[2] = k;
								for (int u = 0; u < 5; u++) {
									index[3] = index_o[3] = u;
									for (int v = 0; v < 2; v++) {
										index[4] = index_o[4] = v;
										for (int w = 0; w < 7; w++) {
											index[5] = index_o[5] = w;

											REQUIRE(!strcmp(pcpb_st_r6->get_string((int *) &index),
															month[(45*i_o + 34*j + 23*k + 12*u + 6*v + 3*w) % 12]));
											REQUIRE(pcpb_st_r6->tensor.cell_int[pcpb_st_r6->get_offset((int *) &index)] ==
													p_st_r6->tensor.cell_int[p_st_r6->get_offset((int *) &index_o)]);
										}
									}
								}
							}
						}
						i_i++;
					}
				}
			}

			free_jazz_block(pcpa_db_r1);
			REQUIRE(pcpa_db_r1 == nullptr);

			free_jazz_block(pcpa_db_r3);
			REQUIRE(pcpa_db_r3 == nullptr);

			free_jazz_block(pcpa_db_r6);
			REQUIRE(pcpa_db_r6 == nullptr);

			free_jazz_block(pcpa_st_r1);
			REQUIRE(pcpa_st_r1 == nullptr);

			free_jazz_block(pcpa_st_r3);
			REQUIRE(pcpa_st_r3 == nullptr);

			free_jazz_block(pcpa_st_r6);
			REQUIRE(pcpa_st_r6 == nullptr);

			free_jazz_block(pcpa_by_r1);
			REQUIRE(pcpa_by_r1 == nullptr);

			free_jazz_block(pcpa_by_r3);
			REQUIRE(pcpa_by_r3 == nullptr);

			free_jazz_block(pcpa_by_r6);
			REQUIRE(pcpa_by_r6 == nullptr);

			free_jazz_block(pcpb_db_r1);
			REQUIRE(pcpb_db_r1 == nullptr);

			free_jazz_block(pcpb_db_r3);
			REQUIRE(pcpb_db_r3 == nullptr);

			free_jazz_block(pcpb_db_r6);
			REQUIRE(pcpb_db_r6 == nullptr);

			free_jazz_block(pcpb_st_r1);
			REQUIRE(pcpb_st_r1 == nullptr);

			free_jazz_block(pcpb_st_r3);
			REQUIRE(pcpb_st_r3 == nullptr);

			free_jazz_block(pcpb_st_r6);
			REQUIRE(pcpb_st_r6 == nullptr);

			free_jazz_block(pcpb_by_r1);
			REQUIRE(pcpb_by_r1 == nullptr);

			free_jazz_block(pcpb_by_r3);
			REQUIRE(pcpb_by_r3 == nullptr);

			free_jazz_block(pcpb_by_r6);
			REQUIRE(pcpb_by_r6 == nullptr);
		}

		free_jazz_block((pJazzBlock &) p_if_r1);
		REQUIRE(p_if_r1 == nullptr);

		free_jazz_block((pJazzBlock &) p_if_r3);
		REQUIRE(p_if_r3 == nullptr);

		free_jazz_block((pJazzBlock &) p_if_r6);
		REQUIRE(p_if_r6 == nullptr);

		free_jazz_block((pJazzBlock &) p_bf_r1);
		REQUIRE(p_bf_r1 == nullptr);

		free_jazz_block((pJazzBlock &) p_bf_r3);
		REQUIRE(p_bf_r3 == nullptr);

		free_jazz_block((pJazzBlock &) p_bf_r6);
		REQUIRE(p_bf_r6 == nullptr);

		free_jazz_block(p_db_r1);
		REQUIRE(p_db_r1 == nullptr);

		free_jazz_block(p_db_r3);
		REQUIRE(p_db_r3 == nullptr);

		free_jazz_block(p_db_r6);
		REQUIRE(p_db_r6 == nullptr);

		free_jazz_block(p_st_r1);
		REQUIRE(p_st_r1 == nullptr);

		free_jazz_block(p_st_r3);
		REQUIRE(p_st_r3 == nullptr);

		free_jazz_block(p_st_r6);
		REQUIRE(p_st_r6 == nullptr);

		free_jazz_block(p_by_r1);
		REQUIRE(p_by_r1 == nullptr);

		free_jazz_block(p_by_r3);
		REQUIRE(p_by_r3 == nullptr);

		free_jazz_block(p_by_r6);
		REQUIRE(p_by_r6 == nullptr);
	}
}


SCENARIO("Testing threading functions") {
	WHEN("We check basic assumptions, we get expected results") {
		REQUIRE(JBK._keepr_lock_ == 0);

		int lock = JBK._keepr_lock_.fetch_add(1, std::memory_order_relaxed);

		REQUIRE(lock == 0);
		REQUIRE(JBK._keepr_lock_ == 1);

		JBK._keepr_lock_ = 0;

		JBK.enter_reading();
		REQUIRE(JBK._keepr_lock_ == 1);

		JBK.enter_reading();
		REQUIRE(JBK._keepr_lock_ == 2);

		JBK.enter_reading();
		REQUIRE(JBK._keepr_lock_ == 3);

		JBK.leave_reading();
		REQUIRE(JBK._keepr_lock_ == 2);

		JBK.leave_reading();
		REQUIRE(JBK._keepr_lock_ == 1);

		JBK.leave_reading();
		REQUIRE(JBK._keepr_lock_ == 0);

		JBK.enter_writing();
		REQUIRE(JBK._keepr_lock_ == -JAZZ_LOCK_WEIGHT_OF_WRITE);

		JBK.leave_writing();
		REQUIRE(JBK._keepr_lock_ == 0);
	}

	PSB.writer();

	for (int i = 0; i < 64; i++) {
		REQUIRE(PSB.reader(i) == 0);
	}

	WHEN("We run a 240x100 readers and 16x10 writers sequentially and no errors happen.") {
		for (int i = 0; i < 256; i++) {
			if ((i % 16) == 0)
				unsafe_writer(nullptr);
			else
				unsafe_reader(nullptr);
		}
		REQUIRE(PSB.writers == 16);
		REQUIRE(PSB.readers == 240);
		REQUIRE(PSB.reads_ok == 24000);
		REQUIRE(PSB.thread_errors == 0);
	}

//#define LONG_THREAD_TEST

#ifndef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a short thread test. Define LONG_THREAD_TEST for the long test.") {
		bool failed = false;

		pthread_t th_id[32];
		for (int i = 0; i < 32; i++) {
			if ((i % 16) == 0) {
				if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
					failed = true;
					break;
				}
			} else {
				if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}
		std::this_thread::yield();

		for (int i = 0; i < 32; i++) {
			if (pthread_join(th_id[i], nullptr) != 0){
				failed = true;
				break;
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 2);
		REQUIRE(PSB.readers == 30);
		REQUIRE(PSB.reads_ok == 30000);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif

#ifdef LONG_THREAD_TEST
	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	const int num_threads = 256,
			  num_times	  = 64;

	WHEN("We run a 240x100 readers 16x10 writers in parallel num_times times without control, errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, unsafe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, unsafe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}
			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0) {
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok < 24000*num_times);
		REQUIRE(PSB.thread_errors > 0);
	}

	PSB.writers = PSB.readers = PSB.reads_ok = PSB.thread_errors = 0;

	WHEN("We run a 240x1000 readers 16x10 writers in parallel num_times times with control and no errors happen.") {
		bool failed = false;

		for (int times = 0; times < num_times; times++) {
			pthread_t th_id[num_threads];
			for (int i = 0; i < num_threads; i++) {
				if ((i % 16) == 0) {
					if (pthread_create(&th_id[i], nullptr, safe_writer, nullptr) != 0) {
						failed = true;
						break;
					}
				} else {
					if (pthread_create(&th_id[i], nullptr, safe_reader, nullptr) != 0) {
						failed = true;
						break;
					}
				}

			}
			std::this_thread::yield();

			for (int i = 0; i < num_threads; i++) {
				if (pthread_join(th_id[i], nullptr) != 0){
					failed = true;
					break;
				}
			}
		}

		REQUIRE(!failed);

		REQUIRE(PSB.writers == 16*num_times);
		REQUIRE(PSB.readers == 240*num_times);
		REQUIRE(PSB.reads_ok == 240000*num_times);
		REQUIRE(PSB.thread_errors == 0);
	}
#endif
}


SCENARIO("Unit Tests for JazzBlockKeepr") {

#ifdef LOG_ERRORS
	const char *log_file   {"/tmp/jazz_test_containers.log"};
	struct stat stat_struc {0};

	if (stat(log_file, &stat_struc) == 0)
		remove(log_file);

	jazz_utils::JazzLogger jll(log_file);

	JazzBlockKeepr jbk(&jll);

	jbk.log		  (LOG_INFO, "Hello JazzLogger!");
	jbk.log_printf(LOG_INFO, "2 + 2 = %d", 2 + 2);
#else
	JazzBlockKeepr jbk(nullptr);
#endif

	JazzTensorDim dim {{3, 0}};

	WHEN("I try to allocate blocks in an empty JazzBlockKeepr and fail.") {
		pJazzBlockKeeprItem p_item = jbk.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == nullptr);	// Test passes but Valgrind detects is the internal JazzBlock was not freed.
	}

	WHEN("I do simple JazzBlock allocation.") {
		pJazzBlockKeeprItem p_base;

		REQUIRE(jbk.alloc_keeprs(4));

		p_base = jbk.p_buffer_base;

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 != nullptr);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 == p_base);

		REQUIRE(!jbk.alloc_keeprs(10));

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 == p_base);

		pJazzBlockKeeprItem p_item = jbk.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == p_base);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == p_base);
		REQUIRE(jbk.p_first_free	 != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 1234567890123);
		REQUIRE(strlen(p_item->block_id.key)	== 0);

		REQUIRE(jbk.last_item_in() == p_item);

		p_item = jbk.new_jazz_block(4567890123456, p_item->p_jazz_block);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 4567890123456);
		REQUIRE(strlen(p_item->block_id.key)	== 0);

		REQUIRE(jbk.last_item_in() == p_item);

		p_item = jbk.new_jazz_block((const JazzBlockIdentifier *) ".block_442_alpha", CELL_TYPE_DOUBLE, dim.dim);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_alpha"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_alpha"));

		p_item = jbk.new_jazz_block((const JazzBlockIdentifier *) ".block_442_beta", p_item->p_jazz_block);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_beta"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_beta"));

		REQUIRE(jbk.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim)									== nullptr);
		REQUIRE(jbk.new_jazz_block(4567890123456, p_item->p_jazz_block)											== nullptr);
		REQUIRE(jbk.new_jazz_block((const JazzBlockIdentifier *) ".block_442_alpha", CELL_TYPE_DOUBLE, dim.dim) == nullptr);
		REQUIRE(jbk.new_jazz_block((const JazzBlockIdentifier *) ".block_442_beta", p_item->p_jazz_block)		== nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		p_item = jbk.last_item_in();

		REQUIRE(p_item != nullptr);

		jbk.free_jazz_block(p_item);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		p_item = jbk.last_item_in();

		REQUIRE(p_item != nullptr);

		jbk.free_jazz_block(p_item);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		p_item = jbk.last_item_in();

		REQUIRE(p_item != nullptr);

		jbk.free_jazz_block(p_item);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		p_item = jbk.last_item_in();

		REQUIRE(p_item != nullptr);

		jbk.free_jazz_block(p_item);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 4);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 == p_base);

		p_item = jbk.last_item_in();

		REQUIRE(p_item == nullptr);

		jbk.free_jazz_block(p_item);
	}

	WHEN("Fill JazzBlockKeeprs empty and half empty in all orders.") {
		pJazzBlockKeeprItem p_base, p_item[16];

		REQUIRE(jbk.alloc_keeprs(16));

		p_base = jbk.p_buffer_base;

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 == p_base);

		// Fill full, remove full same order
		for (int i = 0; i < 16; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 0; i < 16; i++) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill full, remove full inverse order
		for (int i = 0; i < 16; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 15; i >= 0; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill full, remove full middle order
		for (int i = 0; i < 16; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 15; i >= 0; i--) {
			int j = i/2;

			if (i == j) {
				jbk.free_jazz_block(p_item[i]);
			} else {
				jbk.free_jazz_block(p_item[j]);
				p_item[j] = p_item[i];
			}
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill full, remove half same order
		for (int i = 0; i < 16; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 0; i < 8; i++) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill full, remove half inverse order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 7; i >= 0; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill full, remove half middle order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}
		REQUIRE(jbk.new_jazz_block(98765432101, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 == nullptr);

		for (int i = 7; i >= 0; i--) {
			int j = i/2;

			if (i == j) {
				jbk.free_jazz_block(p_item[i]);
			} else {
				jbk.free_jazz_block(p_item[j]);
				p_item[j] = p_item[i];
			}
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Remove top 4
		for (int i = 15; i >= 12; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -4, remove half same order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 0; i < 8; i++) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -4, remove half inverse order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 7; i >= 0; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -4, remove half middle order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 7; i >= 0; i--) {
			int j = i/2;

			if (i == j) {
				jbk.free_jazz_block(p_item[i]);
			} else {
				jbk.free_jazz_block(p_item[j]);
				p_item[j] = p_item[i];
			}
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Remove next 4
		for (int i = 11; i >= 8; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -8, remove half same order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 0; i < 8; i++) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -8, remove half inverse order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 7; i >= 0; i--) {
			jbk.free_jazz_block(p_item[i]);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		// Fill -8, remove half middle order
		for (int i = 0; i < 8; i++) {
			p_item[i] = jbk.new_jazz_block(12345678901*i, CELL_TYPE_INTEGER, dim.dim);
			REQUIRE(p_item[i] != nullptr);
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 != nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);

		for (int i = 7; i >= 0; i--) {
			int j = i/2;

			if (i == j) {
				jbk.free_jazz_block(p_item[i]);
			} else {
				jbk.free_jazz_block(p_item[j]);
				p_item[j] = p_item[i];
			}
		}

		REQUIRE(jbk.keepr_item_size	 == sizeof(JazzBlockKeeprItem));
		REQUIRE(jbk.num_allocd_items == 16);
		REQUIRE(jbk.p_buffer_base	 == p_base);
		REQUIRE(jbk.p_first_item	 == nullptr);
		REQUIRE(jbk.p_first_free	 != nullptr);
	}
}


SCENARIO("Unit Tests for JazzTree") {

	JazzTree jbt(nullptr);

	JazzTensorDim dim {{3, 0}};

	WHEN("I try to allocate blocks in an empty JazzBlockKeepr and fail.") {
		pJazzTreeItem p_item = (pJazzTreeItem) jbt.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == nullptr);	// Test passes but Valgrind detects is the internal JazzBlock was not freed.
	}

	WHEN("I do simple JazzTree allocation.") {
		pJazzTreeItem p_base, p_only;

		REQUIRE(jbt.alloc_keeprs(4));

		p_base = (pJazzTreeItem) jbt.p_buffer_base;

		REQUIRE(jbt.keepr_item_size	 == sizeof(JazzTreeItem));
		REQUIRE(jbt.num_allocd_items == 4);
		REQUIRE(jbt.p_buffer_base	 != nullptr);
		REQUIRE(jbt.p_first_item	 == nullptr);
		REQUIRE(jbt.p_first_free	 == p_base);
		REQUIRE(jbt.p_tree_root		 == nullptr);

		pJazzTreeItem p_item = (pJazzTreeItem) jbt.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == p_base);

		REQUIRE(jbt.keepr_item_size	 == sizeof(JazzTreeItem));
		REQUIRE(jbt.num_allocd_items == 4);
		REQUIRE(jbt.p_buffer_base	 == p_base);
		REQUIRE(jbt.p_first_item	 == p_base);
		REQUIRE(jbt.p_first_free	 != nullptr);
		REQUIRE(jbt.p_tree_root		 == nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 1234567890123);
		REQUIRE(strlen(p_item->block_id.key)	== 0);
		REQUIRE(p_item->p_parent				== nullptr);
		REQUIRE(p_item->p_first_child			== nullptr);
		REQUIRE(p_item->p_next_sibling			== nullptr);
		REQUIRE(p_item->num_visits				== 0);
		REQUIRE(p_item->num_wins				== 0);

		p_item = (pJazzTreeItem) jbt.new_jazz_block(4567890123456, p_item->p_jazz_block);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 4567890123456);
		REQUIRE(strlen(p_item->block_id.key)	== 0);
		REQUIRE(p_item->p_parent				== nullptr);
		REQUIRE(p_item->p_first_child			== nullptr);
		REQUIRE(p_item->p_next_sibling			== nullptr);
		REQUIRE(p_item->num_visits				== 0);
		REQUIRE(p_item->num_wins				== 0);

		p_item = (pJazzTreeItem) jbt.new_jazz_block((const JazzBlockIdentifier *) ".block_442_alpha", CELL_TYPE_DOUBLE, dim.dim);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_alpha"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_alpha"));
		REQUIRE(p_item->p_parent				== nullptr);
		REQUIRE(p_item->p_first_child			== nullptr);
		REQUIRE(p_item->p_next_sibling			== nullptr);
		REQUIRE(p_item->num_visits				== 0);
		REQUIRE(p_item->num_wins				== 0);

		p_item = (pJazzTreeItem) jbt.new_jazz_block((const JazzBlockIdentifier *) ".block_442_beta", p_item->p_jazz_block);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_beta"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_beta"));
		REQUIRE(p_item->p_parent				== nullptr);
		REQUIRE(p_item->p_first_child			== nullptr);
		REQUIRE(p_item->p_next_sibling			== nullptr);
		REQUIRE(p_item->num_visits				== 0);
		REQUIRE(p_item->num_wins				== 0);

		p_only = p_item;

		p_item->p_parent	   == p_base;
		p_item->p_first_child  == p_base;
		p_item->p_next_sibling == p_base;
		p_item->num_visits	   == 888;
		p_item->num_wins	   == 777;

		REQUIRE(jbt.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim) == nullptr);

		jbt.free_jazz_block(p_item);

		p_item = (pJazzTreeItem) jbt.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == p_only);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 1234567890123);
		REQUIRE(strlen(p_item->block_id.key)	== 0);
		REQUIRE(p_item->p_parent				== nullptr);
		REQUIRE(p_item->p_first_child			== nullptr);
		REQUIRE(p_item->p_next_sibling			== nullptr);
		REQUIRE(p_item->num_visits				== 0);
		REQUIRE(p_item->num_wins				== 0);

		for (int i = 0; i < 4; i++) {
			p_item = (pJazzTreeItem) jbt.last_item_in();
			REQUIRE(p_item != nullptr);
			jbt.free_jazz_block(p_item);
		}

		REQUIRE(jbt.keepr_item_size	 == sizeof(JazzTreeItem));
		REQUIRE(jbt.num_allocd_items == 4);
		REQUIRE(jbt.p_buffer_base	 == p_base);
		REQUIRE(jbt.p_first_item	 == nullptr);
		REQUIRE(jbt.p_first_free	 == p_base);
	}
}


SCENARIO("Testing internal AA tree functionality") {
	AATBlockQueue aaq(nullptr);

	pJazzQueueItem p_root = nullptr, p_item;
	JazzQueueItem buff[10000];
	int alloc_items = 0;

	memset(&buff, 0, sizeof(buff));

	WHEN("I do simple zero init walkthough, it works") {
		p_item = &buff[alloc_items++];

		p_item->block_id64 = 1;
		p_item->priority   = 2;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_item->times_used == 0);

		REQUIRE(p_root == p_item);
		REQUIRE(p_root->level == 1);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 2;
		p_item->priority   = 1;

		p_root = aaq.insert(p_item, p_root);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 3;
		p_item->priority   = 3;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_root != nullptr);
		REQUIRE(p_root->block_id64 == 1);
		REQUIRE(p_root->level == 2);
		REQUIRE(p_root->p_alloc_next->block_id64 == 3);
		REQUIRE(p_root->p_alloc_prev->block_id64 == 2);

		p_item = aaq.highest_priority(p_root);

		REQUIRE(p_item != nullptr);
		REQUIRE(p_item->priority == 3);
		REQUIRE(p_item->level	 == 1);

		p_item = aaq.lowest_priority(p_root);

		REQUIRE(p_item != nullptr);
		REQUIRE(p_item->priority == 1);
		REQUIRE(p_item->level	 == 1);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 4;
		p_item->priority   = 4;

		p_root = aaq.insert(p_item, p_root);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 5;
		p_item->priority   = 5;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_item->times_used == 0);

		REQUIRE(recursive_audit_aa_tree(p_root) == 5);

		REQUIRE(aaq.is_in_tree(p_root, p_root));
		p_root = aaq.remove(p_root, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 4);

		REQUIRE(aaq.is_in_tree(aaq.lowest_priority(p_root), p_root));
		p_root = aaq.remove(aaq.lowest_priority(p_root), p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 3);

		REQUIRE(aaq.is_in_tree(aaq.highest_priority(p_root), p_root));
		p_root = aaq.remove(aaq.highest_priority(p_root), p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 2);

		if (p_root->p_alloc_next == nullptr)
			p_item = (pJazzQueueItem) p_root->p_alloc_prev;
		else
			p_item = (pJazzQueueItem) p_root->p_alloc_next;

		REQUIRE(aaq.is_in_tree(p_item, p_root));
		p_root = aaq.remove(p_item, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 1);

		REQUIRE(aaq.is_in_tree(p_root, p_root));
		p_root = aaq.remove(p_root, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 0);
	}

	memset(&buff, 0x5a5a5a5a, sizeof(buff));

	WHEN("I do simple junk init walkthough, it works") {
		p_item = &buff[alloc_items++];

		p_item->block_id64 = 1;
		p_item->priority   = 2;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_item->times_used == 0x5a5a5a5a);

		REQUIRE(p_root == p_item);
		REQUIRE(p_root->level == 1);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 2;
		p_item->priority   = 1;

		p_root = aaq.insert(p_item, p_root);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 3;
		p_item->priority   = 3;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_root != nullptr);
		REQUIRE(p_root->block_id64 == 1);
		REQUIRE(p_root->level == 2);
		REQUIRE(p_root->p_alloc_next->block_id64 == 3);
		REQUIRE(p_root->p_alloc_prev->block_id64 == 2);

		p_item = aaq.highest_priority(p_root);

		REQUIRE(p_item != nullptr);
		REQUIRE(p_item->priority == 3);
		REQUIRE(p_item->level	 == 1);

		p_item = aaq.lowest_priority(p_root);

		REQUIRE(p_item != nullptr);
		REQUIRE(p_item->priority == 1);
		REQUIRE(p_item->level	 == 1);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 4;
		p_item->priority   = 4;

		p_root = aaq.insert(p_item, p_root);

		p_item = &buff[alloc_items++];

		p_item->block_id64 = 5;
		p_item->priority   = 5;

		p_root = aaq.insert(p_item, p_root);

		REQUIRE(p_item->times_used == 0x5a5a5a5a);

		REQUIRE(recursive_audit_aa_tree(p_root) == 5);

		REQUIRE(aaq.is_in_tree(p_root, p_root));
		p_root = aaq.remove(p_root, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 4);

		REQUIRE(aaq.is_in_tree(aaq.lowest_priority(p_root), p_root));
		p_root = aaq.remove(aaq.lowest_priority(p_root), p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 3);

		REQUIRE(aaq.is_in_tree(aaq.highest_priority(p_root), p_root));
		p_root = aaq.remove(aaq.highest_priority(p_root), p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 2);

		if (p_root->p_alloc_next == nullptr)
			p_item = (pJazzQueueItem) p_root->p_alloc_prev;
		else
			p_item = (pJazzQueueItem) p_root->p_alloc_next;

		REQUIRE(aaq.is_in_tree(p_item, p_root));
		p_root = aaq.remove(p_item, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 1);

		REQUIRE(aaq.is_in_tree(p_root, p_root));
		p_root = aaq.remove(p_root, p_root);

		REQUIRE(recursive_audit_aa_tree(p_root) == 0);
	}

	alloc_items = 0;

	memset(&buff, 0, sizeof(buff));

	p_root = nullptr;

	std::srand(54321);

	WHEN("I fill a 10K buffer 50K inserts and 50K deletes") {
		for (int i = 0; i < 5000; i++) {
			p_item = &buff[alloc_items++];

			p_item->block_id64 = i;
			p_item->priority   = i/10000.0 + (i % 99)/100.0 + (i % 7);

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 5000);

		for (int i = 0; i < 5000; i++) {
			long long lj = 5000;
			lj *= std::rand();
			int j = lj/RAND_MAX;

			p_item = &buff[j];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 5000 + i;
			p_item->priority   = p_item->priority*((i % 9) - 4);

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 5000);

		for (int i = 0; i < 5000; i++) {
			p_item = &buff[i];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 10000 + i;
			p_item->priority   = i;

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 5000);

		for (int i = 0; i < 5000; i++) {
			p_item = &buff[i];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 15000 + i;
			p_item->priority   = -i;

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 5000);

		for (int i = 5000; i < 10000; i++) {
			p_item = &buff[alloc_items++];

			p_item->block_id64 = 20000 + i;
			p_item->priority   = i/10000.0 + (i % 99)/100.0 + (i % 7);

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 10000);

		for (int i = 0; i < 10000; i++) {
			long long lj = 5000;
			lj *= std::rand();
			int j = lj/RAND_MAX;

			p_item = &buff[j];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 25000 + i;
			p_item->priority   = p_item->priority*((i % 9) - 4);

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 10000);

		for (int i = 0; i < 10000; i++) {
			p_item = &buff[i];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 35000 + i;
			p_item->priority   = (i % 99) - 49;

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 10000);

		for (int i = 4999; i >= 0; i--) {
			p_item = &buff[i];

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 45000 + i;
			p_item->priority   = (i % 99) - 49;

			p_root = aaq.insert(p_item, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 10000);

		for (int i = 0; i < 5000; i++) {
			do {
				long long lj = 5000;
				lj *= std::rand();
				int j = lj/RAND_MAX;

				p_item = &buff[j];
			} while (p_item->block_id64 == 0xfaded);

			if (!aaq.is_in_tree(p_item, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_item, p_root);

			p_item->block_id64 = 0xfaded;
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 5000);

		for (int i = 0; i < 1000; i++) {
			if (!aaq.is_in_tree(p_root, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_root, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 4000);

		for (int i = 0; i < 1000; i++) {
			if (!aaq.is_in_tree(aaq.highest_priority(p_root), p_root))
				REQUIRE(false);
			p_root = aaq.remove(aaq.highest_priority(p_root), p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 3000);

		for (int i = 0; i < 1000; i++) {
			if (!aaq.is_in_tree(aaq.lowest_priority(p_root), p_root))
				REQUIRE(false);
			p_root = aaq.remove(aaq.lowest_priority(p_root), p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 2000);

		for (int i = 0; i < 1000; i++) {
			if (!aaq.is_in_tree(p_root, p_root))
				REQUIRE(false);
			p_root = aaq.remove(p_root, p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 1000);

		for (int i = 0; i < 990; i++) {
			if (!aaq.is_in_tree(aaq.lowest_priority(p_root), p_root))
				REQUIRE(false);
			p_root = aaq.remove(aaq.lowest_priority(p_root), p_root);
		}

		REQUIRE(recursive_audit_aa_tree(p_root) == 10);

		for (int i = 9; i >= 0; i--) {
			REQUIRE(aaq.is_in_tree(p_root, p_root));
			p_root = aaq.remove(p_root, p_root);

			REQUIRE(recursive_audit_aa_tree(p_root) == i);
		}
		REQUIRE(p_root == nullptr);
	}
}


SCENARIO("Unit Tests for AATBlockQueue") {
#ifdef LOG_ERRORS
	const char *log_file   {"/tmp/jazz_test_containers.log"};
	struct stat stat_struc {0};

	if (stat(log_file, &stat_struc) == 0)
		remove(log_file);

	jazz_utils::JazzLogger jll(log_file);

	AATBlockQueue aaq(&jll);

	aaq.log		  (LOG_INFO, "Hello JazzLogger!");
	aaq.log_printf(LOG_INFO, "2 + 3 = %d", 2 + 3);
#else
	AATBlockQueue aaq(nullptr);
#endif

	JazzTensorDim dim {{3, 0}};

	WHEN("I try to allocate blocks in an empty AATBlockQueue and fail.") {
		pJazzQueueItem p_item = aaq.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == nullptr);	// Test passes but Valgrind detects is the internal JazzBlock was not freed.
	}

	WHEN("I do simple JazzBlock allocation.") {
		pJazzQueueItem p_base, p_lowest;

		REQUIRE(aaq.alloc_keeprs(4));

		p_base = (pJazzQueueItem) aaq.p_buffer_base;

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 != nullptr);
		REQUIRE(aaq.p_first_free	 == p_base);
		REQUIRE(aaq.p_queue_root	 == nullptr);

		REQUIRE(!aaq.alloc_keeprs(10));

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 == p_base);
		REQUIRE(aaq.p_queue_root	 == nullptr);

		pJazzQueueItem p_item = aaq.new_jazz_block(1234567890123, CELL_TYPE_INTEGER, dim.dim);

		REQUIRE(p_item == p_base);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 1234567890123);
		REQUIRE(strlen(p_item->block_id.key)	== 0);

		REQUIRE(p_item->level		  == 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		REQUIRE(aaq.get_highest_priority_item() == p_item);
		REQUIRE(aaq.get_lowest_priority_item() == p_item);

		p_item = aaq.new_jazz_block(4567890123456, p_item->p_jazz_block);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== 4567890123456);
		REQUIRE(strlen(p_item->block_id.key)	== 0);

		REQUIRE(p_item->level		  >= 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		p_item = aaq.new_jazz_block((const JazzBlockIdentifier *) ".block_442_alpha", CELL_TYPE_DOUBLE, dim.dim);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_alpha"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_alpha"));

		REQUIRE(p_item->level		  >= 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		p_item = aaq.new_jazz_block((const JazzBlockIdentifier *) ".block_442_beta", p_item->p_jazz_block);

		REQUIRE(p_item != nullptr);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_DOUBLE);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".block_442_beta"));
		REQUIRE(!strcmp(p_item->block_id.key, ".block_442_beta"));

		REQUIRE(p_item->level		  >= 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 == nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 4);

		p_lowest = aaq.get_lowest_priority_item();

		p_item = aaq.new_jazz_block((const JazzBlockIdentifier *) ".a_new_block", CELL_TYPE_FACTOR, dim.dim);

		REQUIRE(p_item == p_lowest);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_FACTOR);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".a_new_block"));
		REQUIRE(!strcmp(p_item->block_id.key, ".a_new_block"));

		REQUIRE(p_item->level		  >= 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 == nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 4);

		p_item = aaq.get_highest_priority_item();
		REQUIRE(p_item != nullptr);

		aaq.free_jazz_block(p_item);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 3);

		aaq.free_jazz_block(aaq.p_queue_root);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 2);

		p_item = aaq.get_lowest_priority_item();
		REQUIRE(p_item != nullptr);

		aaq.free_jazz_block(p_item);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 1);

		p_lowest = (pJazzQueueItem) aaq.p_first_free;

		p_item = aaq.new_jazz_block((const JazzBlockIdentifier *) ".and_again", CELL_TYPE_LONG_INTEGER, dim.dim);

		REQUIRE(p_item == p_lowest);

		REQUIRE(p_item->p_jazz_block->cell_type == CELL_TYPE_LONG_INTEGER);
		REQUIRE(p_item->p_jazz_block->size		== 3);
		REQUIRE(p_item->block_id64				== hash_block_id(".and_again"));
		REQUIRE(!strcmp(p_item->block_id.key, ".and_again"));

		REQUIRE(p_item->level		  >= 1);
		REQUIRE(p_item->times_used	  == 1);
		REQUIRE(p_item->priority	  >= 1);
		REQUIRE(p_item->time_to_build >= 0);
		REQUIRE(jazz_utils::elapsed_us(p_item->last_used) > 1);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 2);

		aaq.free_jazz_block(aaq.p_queue_root);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 != nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 1);

		aaq.free_jazz_block(aaq.p_queue_root);

		REQUIRE(aaq.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(aaq.num_allocd_items == 4);
		REQUIRE(aaq.p_buffer_base	 == p_base);
		REQUIRE(aaq.p_first_free	 != nullptr);
		REQUIRE(aaq.p_queue_root	 == nullptr);

		REQUIRE(recursive_audit_aa_tree(aaq.p_queue_root) == 0);
	}
}


SCENARIO("Unit Tests for JazzCache") {
	JazzCache jca(nullptr);

	JazzTensorDim dim {{7, 3, 2, 0}};

	GIVEN("A 25K element cache.") {
		pJazzQueueItem p_base, p_item;

		REQUIRE(jca.alloc_keeprs(25000));

		p_base = (pJazzQueueItem) jca.p_buffer_base;

		REQUIRE(jca.keepr_item_size	 == sizeof(JazzQueueItem));
		REQUIRE(jca.num_allocd_items == 25000);
		REQUIRE(jca.p_buffer_base	 != nullptr);
		REQUIRE(jca.p_first_free	 == p_base);
		REQUIRE(jca.p_queue_root	 == nullptr);

		WHEN("I insert 20K blocks in it") {
			for (int i = 0; i < 10000; i++)
				if (jca.new_jazz_block(i, CELL_TYPE_INTEGER, dim.dim) == nullptr)
					REQUIRE(false);

			JazzBlockIdentifier block_id;

			for (int i = 0; i < 10000; i++) {
				sprintf(block_id.key, "._block_%x_", i);
				if (jca.new_jazz_block(&block_id, CELL_TYPE_DOUBLE, dim.dim) == nullptr)
					REQUIRE(false);
			}

			REQUIRE(jca.keepr_item_size	 == sizeof(JazzQueueItem));
			REQUIRE(jca.num_allocd_items == 25000);
			REQUIRE(jca.p_buffer_base	 == p_base);
			REQUIRE(jca.p_first_free	 != nullptr);
			REQUIRE(jca.p_queue_root	 != nullptr);

			REQUIRE(recursive_audit_aa_tree(jca.p_queue_root) == 20000);

			THEN("I can find them all") {
				int found = 0, failed = 0, wrong = 0;
				for (int i = 0; i < 10000; i++) {
					p_item = jca.find_jazz_block(i);
					if (p_item == nullptr)
						failed++;
					else {
						if (p_item->block_id64 == i)
							found++;
						else
							wrong++;
					}
				}
				REQUIRE(found  == 10000);
				REQUIRE(failed == 0);
				REQUIRE(wrong  == 0);

				JazzBlockIdentifier block_id;

				for (int i = 0; i < 10000; i++) {
					sprintf(block_id.key, "._block_%x_", i);
					p_item = jca.find_jazz_block(&block_id);
					if (p_item == nullptr)
						failed++;
					else {
						if (!strcmp(p_item->block_id.key, block_id.key))
							found++;
						else
							wrong++;
					}
				}
				REQUIRE(found  == 20000);
				REQUIRE(failed == 0);
				REQUIRE(wrong  == 0);
			}
		}

		WHEN("I insert 50K blocks in it") {
			JazzBlockIdentifier block_id;

			for (int i = 0; i < 25000; i++) {
				if (jca.new_jazz_block(i, CELL_TYPE_INTEGER, dim.dim) == nullptr)
					REQUIRE(false);

				sprintf(block_id.key, "._block_%x_", i);
				if (jca.new_jazz_block(&block_id, CELL_TYPE_DOUBLE, dim.dim) == nullptr)
					REQUIRE(false);
			}

			REQUIRE(jca.keepr_item_size	 == sizeof(JazzQueueItem));
			REQUIRE(jca.num_allocd_items == 25000);
			REQUIRE(jca.p_buffer_base	 == p_base);
			REQUIRE(jca.p_first_free	 == nullptr);
			REQUIRE(jca.p_queue_root	 != nullptr);

			REQUIRE(recursive_audit_aa_tree(jca.p_queue_root) == 25000);

			THEN("I can find half of them") {
				int found = 0, failed = 0, wrong = 0;
				for (int i = 0; i < 25000; i++) {
					p_item = jca.find_jazz_block(i);
					if (p_item == nullptr)
						failed++;
					else {
						if (p_item->block_id64 == i)
							found++;
						else
							wrong++;
					}
				}

				JazzBlockIdentifier block_id;

				for (int i = 0; i < 25000; i++) {
					sprintf(block_id.key, "._block_%x_", i);
					p_item = jca.find_jazz_block(&block_id);
					if (p_item == nullptr)
						failed++;
					else {
						if (!strcmp(p_item->block_id.key, block_id.key))
							found++;
						else
							wrong++;
					}
				}
				REQUIRE(found  == 25000);
				REQUIRE(failed == 25000);
				REQUIRE(wrong  == 0);
			}
		}

		WHEN("I insert 50K blocks and delete the found ones, I get an empty buffer") {
			for (int i = 0; i < 25000; i++)
				if (jca.new_jazz_block(i, CELL_TYPE_INTEGER, dim.dim) == nullptr)
					REQUIRE(false);

			JazzBlockIdentifier block_id;

			for (int i = 0; i < 25000; i++) {
				sprintf(block_id.key, "._block_%x_", i);
				if (jca.new_jazz_block(&block_id, CELL_TYPE_DOUBLE, dim.dim) == nullptr)
					REQUIRE(false);
			}

			REQUIRE(jca.keepr_item_size	 == sizeof(JazzQueueItem));
			REQUIRE(jca.num_allocd_items == 25000);
			REQUIRE(jca.p_buffer_base	 == p_base);
			REQUIRE(jca.p_first_free	 == nullptr);
			REQUIRE(jca.p_queue_root	 != nullptr);

			REQUIRE(recursive_audit_aa_tree(jca.p_queue_root) == 25000);

			int found = 0, failed = 0, wrong = 0;
			for (int i = 0; i < 25000; i++) {
				p_item = jca.find_jazz_block(i);
				if (p_item == nullptr)
					failed++;
				else {
					if (p_item->block_id64 == i) {
						if (!jca.free_jazz_block(i))
							REQUIRE(false);
						found++;
					} else {
						wrong++;
					}
				}
			}

			for (int i = 0; i < 25000; i++) {
				sprintf(block_id.key, "._block_%x_", i);
				p_item = jca.find_jazz_block(&block_id);
				if (p_item == nullptr)
					failed++;
				else {
					if (!strcmp(p_item->block_id.key, block_id.key)) {
						if (!jca.free_jazz_block(&block_id))
							REQUIRE(false);
						found++;
					} else {
						wrong++;
					}
				}
			}

			REQUIRE(found  == 25000);
			REQUIRE(failed == 25000);
			REQUIRE(wrong  == 0);

			REQUIRE(jca.keepr_item_size	 == sizeof(JazzQueueItem));
			REQUIRE(jca.num_allocd_items == 25000);
			REQUIRE(jca.p_buffer_base	 == p_base);
			REQUIRE(jca.p_first_free	 != nullptr);
			REQUIRE(jca.p_queue_root	 == nullptr);

			REQUIRE(recursive_audit_aa_tree(jca.p_queue_root) == 0);
		}
	}
}


SCENARIO("Force all error conditions") {
#ifdef LOG_ERRORS
	const char *log_file   {"/tmp/jazz_test_containers.log"};
	struct stat stat_struc {0};

	if (stat(log_file, &stat_struc) == 0)
		remove(log_file);

	jazz_utils::JazzLogger jll(log_file);

	JazzBlockKeepr jbk(&jll);
	JazzTree 	   jbt(&jll);
	AATBlockQueue  aaq(&jll);
	JazzCache 	   jca(&jll);

	jbk.log(LOG_INFO, "Hello JazzBlockKeepr!");
	jbt.log(LOG_INFO, "Hello JazzTree!");
	aaq.log(LOG_INFO, "Hello AATBlockQueue!");
	jca.log(LOG_INFO, "Hello JazzCache!");
#else
	JazzBlockKeepr jbk(nullptr);
	JazzTree 	   jbt(nullptr);
	AATBlockQueue  aaq(nullptr);
	JazzCache 	   jca(nullptr);
#endif

	JazzTensorDim dim {{5, 2, 0}};

	pJazzBlock p_block = new_jazz_block(CELL_TYPE_INTEGER, dim.dim);

	REQUIRE(p_block != nullptr);

	JazzBlockIdentifier block_id;
	sprintf(block_id.key, "What???");

	REQUIRE(jca.find_jazz_block(12345) == nullptr);
	REQUIRE(jca.find_jazz_block(&block_id) == nullptr);

	jbk.destroy_keeprs();
	jbt.destroy_keeprs();
	aaq.destroy_keeprs();
	jca.destroy_keeprs();

	REQUIRE(jbk.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jbt.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(aaq.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jca.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) == nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);

	REQUIRE(jbk.new_jazz_block(123, p_block) == nullptr);
	REQUIRE(jbt.new_jazz_block(123, p_block) == nullptr);
	REQUIRE(aaq.new_jazz_block(123, p_block) == nullptr);
	REQUIRE(jca.new_jazz_block(123, p_block) == nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, p_block) == nullptr);

	block_id.key[0] = 0;
	REQUIRE(jca.find_jazz_block(&block_id) == nullptr);
	REQUIRE(!jca.free_jazz_block(&block_id));
	REQUIRE(!jca.free_jazz_block(54321));

	REQUIRE(jbk.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) == nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, p_block) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, p_block) == nullptr);

	REQUIRE(jbk.alloc_keeprs(10));
	REQUIRE(jbt.alloc_keeprs(10));
	REQUIRE(aaq.alloc_keeprs(10));
	REQUIRE(jca.alloc_keeprs(10));

	sprintf(block_id.key, "._block_");
	REQUIRE(!jca.free_jazz_block(&block_id));

	REQUIRE(jbk.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(jbt.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(aaq.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(jca.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim) != nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) != nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, CELL_TYPE_INTEGER, dim.dim) != nullptr);

	REQUIRE(jbk.new_jazz_block(123, p_block) != nullptr);
	REQUIRE(jbt.new_jazz_block(123, p_block) != nullptr);
	REQUIRE(aaq.new_jazz_block(123, p_block) != nullptr);
	REQUIRE(jca.new_jazz_block(123, p_block) != nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, p_block) != nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, p_block) != nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, p_block) != nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, p_block) != nullptr);

	REQUIRE(jbk.new_jazz_block(123, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(jbt.new_jazz_block(123, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(aaq.new_jazz_block(123, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(jca.new_jazz_block(123, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, CELL_TYPE_DOUBLE + 1, dim.dim) == nullptr);

	REQUIRE(jbk.new_jazz_block(123, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(jbt.new_jazz_block(123, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(aaq.new_jazz_block(123, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(jca.new_jazz_block(123, p_block, (pJazzFilter) p_block) == nullptr);

	REQUIRE(jbk.new_jazz_block(&block_id, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(jbt.new_jazz_block(&block_id, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(aaq.new_jazz_block(&block_id, p_block, (pJazzFilter) p_block) == nullptr);
	REQUIRE(jca.new_jazz_block(&block_id, p_block, (pJazzFilter) p_block) == nullptr);

	jbk.destroy_keeprs();
	jbt.destroy_keeprs();
	aaq.destroy_keeprs();
	jca.destroy_keeprs();

	REQUIRE(jbk.alloc_keeprs(10));
	REQUIRE(jbt.alloc_keeprs(10));
	REQUIRE(aaq.alloc_keeprs(10));
	REQUIRE(jca.alloc_keeprs(10));

	pJazzBlockKeeprItem p_item;
	pJazzQueueItem p_qitem;

	p_item = jbk.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim);
	jbk.free_jazz_block(p_item);
	jbk.free_jazz_block(p_item);
	jbt.free_jazz_block(p_item);
	aaq.free_jazz_block((pJazzQueueItem) p_item);
	jca.free_jazz_block((pJazzQueueItem) p_item);
	jbk.free_jazz_block((pJazzBlockKeeprItem) nullptr);

	p_item = jbt.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim);
	jbt.free_jazz_block(p_item);
	jbt.free_jazz_block(p_item);
	jbk.free_jazz_block(p_item);
	aaq.free_jazz_block((pJazzQueueItem) p_item);
	jca.free_jazz_block((pJazzQueueItem) p_item);
	jbt.free_jazz_block((pJazzBlockKeeprItem) nullptr);

	p_qitem = aaq.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim);
	aaq.free_jazz_block(p_qitem);
	aaq.free_jazz_block(p_qitem);
	jca.free_jazz_block(p_qitem);
	jbk.free_jazz_block((pJazzBlockKeeprItem) p_qitem);
	jbt.free_jazz_block((pJazzBlockKeeprItem) p_qitem);
	aaq.free_jazz_block((pJazzQueueItem) nullptr);

	p_qitem = jca.new_jazz_block(123, CELL_TYPE_INTEGER, dim.dim);
	jca.free_jazz_block(p_qitem);
	jca.free_jazz_block(p_qitem);
	aaq.free_jazz_block(p_qitem);
	jbk.free_jazz_block((pJazzBlockKeeprItem) p_qitem);
	jbt.free_jazz_block((pJazzBlockKeeprItem) p_qitem);
	jca.free_jazz_block((pJazzQueueItem) nullptr);

	free_jazz_block(p_block);
}
