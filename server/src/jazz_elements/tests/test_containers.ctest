/* Jazz (c) 2018 kaalam.ai (The Authors of Jazz), using (under the same license):

   1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
      exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

   2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

   		Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

	  This product includes software developed at

	   BBVA (https://www.bbva.com/)

   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/


using namespace jazz_containers;

/*

void rec_TreeDump(int level, pJazzQueueItem pT, ofstream& ofil)
{
	if (level < 20)
	{
		string s = " : ";
		int i;
		for (i = 0; i < level; i++) s = s + "  ";
		ofil << s << pT->priority << "\n";

		if (pT->p_alloc_next)  rec_TreeDump(level + 1, pT->p_alloc_next, ofil);
		if (pT->p_alloc_prev)  rec_TreeDump(level + 1, pT->p_alloc_prev, ofil);
	}
};


void TreeDump(pJazzQueueItem pT)
{
	ofstream ofil("C:\\ETC\\ModelSel\\TreeDump.txt");

	if (!ofil.is_open())
	{
		cout << " ** Output file error ** ";
	};
	rec_TreeDump(0, pT, ofil);
	ofil.close();
};


bool TestLibFunctions()
{
	cout << "TestLibFunctions():";

	pJazzQueueItem pTBuffBase = new  (nothrow) Model_InGrQS [1000000];
	if (!pTBuffBase)
	{
		cout << "\n**Alloc failed**";
		return false;
	};

	int * pDrawInt = new  (nothrow) int [1000000];
	if (!pDrawInt)
	{
		cout << "\n**Alloc failed**";
		return false;
	};

	pJazzQueueItem pN, pT;
	int i, j, k, n;
	double r;

	for (j = 0; j < 7; j++)
	{
		n = 1;for (i = 1; i <= j; i++) n = 10*n;
		cout << "\n\nTesting " << n << " elements";

		memset(pTBuffBase, 0, sizeof(Model_InGrQS)*n);
		pT = NULL;

		cout << "\nSorted pushing . . . ";
		for (i = 0; i < n; i++)
		{
			pN = &pTBuffBase[i];pN->priority = i;
			pT = insert(pN, pT);
		}
		cout << "(tree level " << pT->level << ")";

		cout << "\nSorted reading . . . ";
		for (i = n - 1; i >= 0; i--)
		{
			pN = HighestPriority(pT);
			if (!pN || pN->priority != i) return false;
			pT = remove_hi(pN, pT);
		}

		if (pT) return false;
		cout << "(100%)";

		memset(pTBuffBase, 0, sizeof(Model_InGrQS)*n);
		pT = NULL;

		cout << "\nInverse sorted pushing . . . ";
		for (i = 0; i < n; i++)
		{
			pN = &pTBuffBase[i];pN->priority = n - 1 - i;
			pT = insert(pN, pT);
		}
		cout << "(tree level " << pT->level << ")";

		cout << "\nSorted reading . . . ";
		for (i = n - 1; i >= 0; i--)
		{
			pN = HighestPriority(pT);
			if (!pN || pN->priority != i) return false;
			pT = remove_hi(pN, pT);
		}

		if (pT) return false;
		cout << "(100%)";

		memset(pTBuffBase, 0, sizeof(Model_InGrQS)*n);
		pT = NULL;

		cout << "\nRandom pushing . . . ";
		for (i = 0; i < n; i++) pDrawInt[i] = i;
		for (i = 0; i < n; i++)
		{
			r = rand();
			r = r/RAND_MAX;
			k = int((n - 1 - i)*r);

			pN = &pTBuffBase[i];pN->priority = pDrawInt[k];
			pDrawInt[k] = pDrawInt[n - 1 - i];
			pT = insert(pN, pT);
		}
		cout << "(tree level " << pT->level << ")";

		cout << "\nSorted reading . . . ";
		for (i = n - 1; i >= 0; i--)
		{
			pN = HighestPriority(pT);
			if (!pN || pN->priority != i) return false;
			pT = remove_hi(pN, pT);
		}

		if (pT) return false;
		cout << "(100%)";

		memset(pTBuffBase, 0, sizeof(Model_InGrQS)*n);
		pT = NULL;

		cout << "\nRepeated random pushing . . . ";
		for (i = 0; i < n; i++) pDrawInt[i] = i;
		for (i = 0; i < n; i++)
		{
			r = rand();
			r = r/RAND_MAX;
			k = int((n - 1 - i)*r);

			pN = &pTBuffBase[i];pN->priority = pDrawInt[k] / 11;
			pDrawInt[k] = pDrawInt[n - 1 - i];
			pT = insert(pN, pT);
		}
		cout << "(tree level " << pT->level << ")";

		cout << "\nSorted reading . . . ";
		for (i = n - 1; i >= 0; i--)
		{
			pN = HighestPriority(pT);
			if (!pN || pN->priority != i / 11) return false;
			pT = remove_hi(pN, pT);
		}

		if (pT) return false;
		cout << "(100%)";
	}

	delete [] pTBuffBase;
	delete [] pDrawInt;

	cout << "\n\nDone.\n";
	return true;
};


bool TestLibClasses()
{
	cout << "TestLibClasses():";

	ModelBuffer mb;

	int i, j, k, n;
	double r;
	pJazzQueueItem pM;

	for (j = 3; j < 7; j++)
	{
		n = 1;for (i = 1; i <= j; i++) n = 10*n;
		cout << "\n\nTesting buffer size " << 2*n << " elements, pushed " << 12*n << " read " << 2*n;

		if (!mb.AllocModels(2*n)) return false;

		cout << "\nCombined test . . . ";

		for (i = 0; i < n/2; i++)
		{
			pM = mb.GetFreeModel();
			pM->priority = 200000000 - i;	// Intermediate priority >= 100M
			mb.PushModelToPriorityQueue(pM);
			pM = mb.GetFreeModel();
			pM->priority = 300000000 - i;	// High priority >= 200M
			mb.PushModelToPriorityQueue(pM);
			for (k = 0;k < 10; k++)
			{
				pM = mb.GetFreeModel();
				r  = rand();
				r  = r/RAND_MAX;
				pM->priority = 100*r;		// Junk priority in U(0,100)
				mb.PushModelToPriorityQueue(pM);
			}
			if (i >= 10)
			{
				pM = mb.GetHighestPriorityModel();
				if (pM->priority != 300000000 - (i -10)) return false;
			}
		}
		for (i = n/2; i < n/2 + 10; i++)
		{
			pM = mb.GetHighestPriorityModel();
			if (pM->priority != 300000000 - (i -10)) return false;
		}

		for (i = 0; i < n/2; i++)
		{
			pM = mb.GetHighestPriorityModel();
			if (pM->priority != 200000000 - i) return false;
		}

		cout << "(100%)";
	}

	cout << "\n\nDone.\n";
	return true;
};

*/

SCENARIO("Testing JazzBlock containers")
{
	REQUIRE(sizeof(JazzBlockIdentifier) == 32);
	REQUIRE(sizeof(JazzBlockId64) 		==  8);
	REQUIRE(sizeof(JazzBlockKeeprItem)  == 64);
	REQUIRE(sizeof(JazzTreeItem)		== 96);
	REQUIRE(sizeof(JazzQueueItem)		== 96);

	GIVEN("We want to test the regex")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for block id regex validation
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation from scratch")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation from scratch
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation by copying/filtering")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation by copying/filtering
			}
		}
	}
}


SCENARIO("Testing threading functions")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for threading functions
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation inside a JazzBlockKeepr")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation inside a JazzBlockKeepr
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation inside a JazzTree")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation inside a JazzTree
			}
		}
	}
}


SCENARIO("Testing internal AA tree functionality")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for internal AA tree functionality
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation inside a AATBlockQueue")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation inside a AATBlockQueue
			}
		}
	}
}


SCENARIO("Testing public AATBlockQueue methods")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for public AATBlockQueue methods
			}
		}
	}
}


SCENARIO("Testing JazzBlock creation inside a JazzCache")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for JazzBlock creation inside a JazzCache
			}
		}
	}
}


SCENARIO("Testing public JazzCache methods")
{
	GIVEN("We want to test the xyz")
	{
		WHEN("Something")
		{
			THEN("Something")
			{
//TODO: Write unit tests for public JazzCache methods
			}
		}
	}
}
