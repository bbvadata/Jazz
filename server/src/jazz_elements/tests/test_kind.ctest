/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


// #include <stl_whatever>


using namespace jazz_elements;


// Kind building utils
// -------------------

bool add_item (pBlock		 p_block,
			   int			 idx,
			   char const	*p_name,
			   int			*p_dim,
			   int			 cell_type,
			   AttributeMap &dims)
{
	ItemHeader *p_it_hea = &p_block->tensor.cell_item[idx];

	p_it_hea->cell_type = cell_type;

	int rank = 6, j;

	pStringBuffer psb = p_block->p_string_buffer();

	for (int i = MAX_TENSOR_RANK - 1; i >= 0; i--) {
		p_it_hea->dim[i] = p_dim[i];
		if (p_dim[i] == 0) {
			rank = i;
			if (!i)
				return false;
		} else {
			if (p_dim[i] < 0) {
				j = p_block->get_string_offset(psb, dims[p_dim[i]]);
				if (j == STRING_NA | j == STRING_EMPTY)
					return false;

				p_it_hea->dim[i] = -j;
			}
		}
	}

	p_it_hea->rank = rank;
	p_it_hea->name = p_block->get_string_offset(psb, p_name);

	return p_it_hea->name > STRING_EMPTY;
}


bool new_kind (pBlock		 p_block,
			   int			 num_items,
			   int			 num_strings,
			   AttributeMap	&attr)
{
	int total_bytes = sizeof(BlockHeader) + num_items*sizeof(ItemHeader) + (num_strings + attr.size())*sizeof(Name) + sizeof(StringBuffer);

	if (total_bytes >= ANSWER_LENGTH)
		return false;

	memset(p_block, 0, total_bytes);

	p_block->cell_type		= CELL_TYPE_KIND_ITEM;
	p_block->rank			= 1;
	p_block->range.dim[0]	= 1;
	p_block->size			= num_items;
	p_block->total_bytes	= total_bytes;

	p_block->set_attributes(&attr);

	return true;
}

// Tests
// -----

SCENARIO("Testing kind") {

	GIVEN("We have some kinds") {
		Answer a1, a2, a3, a4, a5;

		pKind p_kind1 = (pKind) &a1, p_kind2 = (pKind) &a2, p_kind3 = (pKind) &a3, p_kind4 = (pKind) &a4, p_kind5 = (pKind) &a5;

		Name nam_bl_type = "kind";
		Name nam_at_type = "Kind";

		Name nam_width	= "width";
		Name nam_height	= "height";
		Name nam_buffer	= "buffer";
		Name nam_title	= "title";
		Name nam_wave	= "wave";
		Name nam_frame	= "frame";

		TensorDim one_cell	= {1, 0, 0, 0, 0, 0};
		TensorDim vector_10	= {10, 0, 0, 0, 0, 0};
		TensorDim image_rgb	= {640, 480, 3, 0, 0, 0};
		TensorDim video_rgb	= {10000, 640, 480, 3, 0, 0};

		AttributeMap attr = {}, dims = {};

		attr[BLOCK_ATTRIB_BLOCKTYPE] = (pChar) &nam_bl_type;
		attr[BLOCK_ATTRIB_TYPE]		 = (pChar) &nam_at_type;

		REQUIRE(new_kind(p_kind1, 1, 3, attr));

		REQUIRE(add_item(p_kind1, 0, nam_buffer, image_rgb.dim, CELL_TYPE_BYTE, dims));

		REQUIRE(new_kind(p_kind2, 2, 5, attr));

		image_rgb.dim[0] = -640;
		dims[-640] = (const char *) &nam_width;
		image_rgb.dim[0] = -480;
		dims[-480] = (const char *) &nam_height;

		REQUIRE(add_item(p_kind2, 0, nam_buffer, image_rgb.dim, CELL_TYPE_BYTE,	  dims));
		REQUIRE(add_item(p_kind2, 1, nam_title,	 one_cell.dim,	CELL_TYPE_STRING, dims));

		REQUIRE(new_kind(p_kind3, 3, 7, attr));

		video_rgb.dim[0] = -999;
		video_rgb.dim[1] = -640;
		video_rgb.dim[2] = -480;
		dims[-999] = (const char *) &nam_frame;
		REQUIRE(add_item(p_kind3, 0, nam_buffer, video_rgb.dim, CELL_TYPE_BYTE,	  dims));

		vector_10.dim[0] = -999;
		REQUIRE(add_item(p_kind3, 1, nam_wave,	 vector_10.dim, CELL_TYPE_INTEGER, dims));
		REQUIRE(add_item(p_kind3, 2, nam_title,	 one_cell.dim,	CELL_TYPE_STRING, dims));

		REQUIRE(new_kind(p_kind4, 2, 9, attr));

		REQUIRE(add_item(p_kind4, 0, nam_buffer, video_rgb.dim, CELL_TYPE_BYTE,	  dims));
		REQUIRE(add_item(p_kind4, 1, nam_frame,	 one_cell.dim,	CELL_TYPE_STRING, dims));

		REQUIRE(new_kind(p_kind5, 2, 9, attr));

		REQUIRE(add_item(p_kind5, 0, nam_buffer, video_rgb.dim, CELL_TYPE_BYTE,	  dims));
		REQUIRE(add_item(p_kind5, 1, nam_buffer, one_cell.dim,	CELL_TYPE_STRING, dims));

		WHEN("Kind 1 passes .audit()") {
			REQUIRE(p_kind1->audit() == KIND_TYPE_KIND);

			THEN("We can check a few types") {
				REQUIRE(p_kind1->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind1->rank		  == 1);
				REQUIRE(p_kind1->range.dim[0] == 1);
				REQUIRE(p_kind1->size		  == 1);
				REQUIRE(p_kind1->has_NA		  == false);

				REQUIRE(p_kind1->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind1->tensor.cell_item[0].rank	   == 3);

				REQUIRE(!strcmp(p_kind1->get_string(p_kind1->tensor.cell_item[0].name), "buffer"));

				REQUIRE(!strcmp(p_kind1->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind1->find_attribute(BLOCK_ATTRIB_TYPE),		 "Kind"));

				REQUIRE(p_kind1->num_dimensions() == 0);

				Answer ans;

				p_kind1->dimension_names(&ans);
				REQUIRE(ans.text[0] == 0);
			}
		}

		WHEN("Kind 2 passes .audit()") {
			REQUIRE(p_kind2->audit() == KIND_TYPE_KIND);

			THEN("We can check a few types") {
				REQUIRE(p_kind2->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind2->rank		  == 1);
				REQUIRE(p_kind2->range.dim[0] == 1);
				REQUIRE(p_kind2->size		  == 2);
				REQUIRE(p_kind2->has_NA		  == false);

				REQUIRE(p_kind2->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind2->tensor.cell_item[0].rank	   == 3);

				REQUIRE(p_kind2->tensor.cell_item[1].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_kind2->tensor.cell_item[1].rank	   == 1);

				REQUIRE(!strcmp(p_kind2->get_string(p_kind2->tensor.cell_item[0].name), "buffer"));
				REQUIRE(!strcmp(p_kind2->get_string(p_kind2->tensor.cell_item[1].name), "title"));

				REQUIRE(!strcmp(p_kind2->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind2->find_attribute(BLOCK_ATTRIB_TYPE),		 "Kind"));

				REQUIRE(p_kind2->num_dimensions() == 2);

				Answer ans;

				p_kind2->dimension_names(&ans);
				REQUIRE(!strcmp(ans.text, "width,height"));
			}
		}

		WHEN("Kind 3 passes .audit()") {
			REQUIRE(p_kind3->audit() == KIND_TYPE_KIND);

			THEN("We can check a few types") {
				REQUIRE(p_kind3->cell_type	  == CELL_TYPE_KIND_ITEM);
				REQUIRE(p_kind3->rank		  == 1);
				REQUIRE(p_kind3->range.dim[0] == 1);
				REQUIRE(p_kind3->size		  == 3);
				REQUIRE(p_kind3->has_NA		  == false);

				REQUIRE(p_kind3->tensor.cell_item[0].cell_type == CELL_TYPE_BYTE);
				REQUIRE(p_kind3->tensor.cell_item[0].rank	   == 4);

				REQUIRE(p_kind3->tensor.cell_item[1].cell_type == CELL_TYPE_INTEGER);
				REQUIRE(p_kind3->tensor.cell_item[1].rank	   == 1);

				REQUIRE(p_kind3->tensor.cell_item[2].cell_type == CELL_TYPE_STRING);
				REQUIRE(p_kind3->tensor.cell_item[2].rank	   == 1);

				REQUIRE(!strcmp(p_kind3->get_string(p_kind3->tensor.cell_item[0].name), "buffer"));
				REQUIRE(!strcmp(p_kind3->get_string(p_kind3->tensor.cell_item[1].name), "wave"));
				REQUIRE(!strcmp(p_kind3->get_string(p_kind3->tensor.cell_item[2].name), "title"));

				REQUIRE(!strcmp(p_kind3->find_attribute(BLOCK_ATTRIB_BLOCKTYPE), "kind"));
				REQUIRE(!strcmp(p_kind3->find_attribute(BLOCK_ATTRIB_TYPE),		 "Kind"));

				REQUIRE(p_kind3->num_dimensions() == 3);

				Answer ans;

				p_kind3->dimension_names(&ans);
				REQUIRE(!strcmp(ans.text, "frame,width,height"));
			}
		}

		WHEN("Kind 4 fails .audit()") {
			REQUIRE(p_kind4->audit() == KIND_TYPE_NOTAKIND);

			THEN("We do nothing else") {
				REQUIRE(true);
			}
		}

		WHEN("Kind 5 fails .audit()") {
			REQUIRE(p_kind5->audit() == KIND_TYPE_NOTAKIND);

			THEN("We do nothing else") {
				REQUIRE(true);
			}
		}
	}
}

