/* Jazz (c) 2018-2022 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


using namespace jazz_main;


// Tests
// -----

SCENARIO("Testing all Containers start()/shut_down()") {

	GIVEN("The instances are constructed, but not yet started") {
		REQUIRE(TT_API.p_channels	== &CHN);
		REQUIRE(TT_API.p_volatile	== &VOL);
		REQUIRE(TT_API.p_persisted	== &PER);
	}

	REQUIRE(CHN.start()	== 0);
	REQUIRE(VOL.start()	== 0);
	REQUIRE(PER.start() == 0);

	REQUIRE(TT_API.start() == 0);

	GIVEN("The instances are started") {
		REQUIRE(base_server[TenBitsAtAddress("bash")]  == &CHN);
		REQUIRE(base_server[TenBitsAtAddress("file")]  == &CHN);
		REQUIRE(base_server[TenBitsAtAddress("http")]  == &CHN);
		REQUIRE(base_server[TenBitsAtAddress("0-mq")]  == &CHN);
		REQUIRE(base_server[TenBitsAtAddress("deque")] == &VOL);
		REQUIRE(base_server[TenBitsAtAddress("index")] == &VOL);
		REQUIRE(base_server[TenBitsAtAddress("queue")] == &VOL);
		REQUIRE(base_server[TenBitsAtAddress("tree")]  == &VOL);
		REQUIRE(base_server[TenBitsAtAddress("lmdb")]  == &PER);
		REQUIRE(base_server[TenBitsAtAddress("zqt")]   == nullptr);
	}

	REQUIRE(TT_API.shut_down() == 0);

	REQUIRE(CHN.shut_down() == 0);
	REQUIRE(VOL.shut_down() == 0);
	REQUIRE(PER.shut_down() == 0);
}

SCENARIO("Testing api.parse") {
	REQUIRE(TT_API.start() == 0);

	GIVEN("We want to test parse_locator()") {
		Locator	loc;

		loc.base[0]	  = 0xba;
		loc.entity[0] = 0xca;
		loc.key[0]	  = 0xda;
		loc.p_extra	  = (pExtraLocator) &loc;

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base/entity/key"));

		REQUIRE(strcmp(loc.base,   "base")	 == 0);
		REQUIRE(strcmp(loc.entity, "entity") == 0);
		REQUIRE(strcmp(loc.key,	   "key")	 == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base-_1/abcdefghij01234567890123456789~/ABCDEFGHIJ_1234567890abcdefghij)"));

		REQUIRE(strcmp(loc.base,   "base-_1") == 0);
		REQUIRE(strcmp(loc.entity, "abcdefghij01234567890123456789~") == 0);
		REQUIRE(strcmp(loc.key,	   "ABCDEFGHIJ_1234567890abcdefghij") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(strlen(loc.base)   == sizeof(loc.base) - 1);
		REQUIRE(strlen(loc.entity) == sizeof(loc.entity) - 1);
		REQUIRE(strlen(loc.key)	   == sizeof(loc.key) - 1);

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//base-_12/abcdefghij01234567890123456789~/ABCDEFGHIJ_1234567890abcdefghij"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//base-_1/abcdefghij01234567890123456789~2/ABCDEFGHIJ_1234567890abcdefghij"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//base-_1/abcdefghij01234567890123456789~/ABCDEFGHIJ_1234567890abcdefghij2"));

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//ase-_10/bcdefghij01234567890123456789~0/ABCDEFGHIJ_0123456789abcdefghij"));
		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base1/azAZ_-~09/AZaz_-~09]"));

		REQUIRE(strcmp(loc.base,   "base1") == 0);
		REQUIRE(strcmp(loc.entity, "azAZ_-~09") == 0);
		REQUIRE(strcmp(loc.key,	   "AZaz_-~09") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base2/azAZ_-~08/AZaz_-~08)"));

		REQUIRE(strcmp(loc.base,   "base2") == 0);
		REQUIRE(strcmp(loc.entity, "azAZ_-~08") == 0);
		REQUIRE(strcmp(loc.key,	   "AZaz_-~08") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base2b/azAZ_-~10)"));

		REQUIRE(strcmp(loc.base,   "base2b") == 0);
		REQUIRE(strcmp(loc.entity, "azAZ_-~10") == 0);
		REQUIRE(loc.key[0] == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//base3/azAZ_-~07/AZaz_-~07"));

		REQUIRE(strcmp(loc.base,   "base3") == 0);
		REQUIRE(strcmp(loc.entity, "azAZ_-~07") == 0);
		REQUIRE(strcmp(loc.key,	   "AZaz_-~07") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//base/azAZ_-~09/AZaz_-~09("));

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//base/azAZ_-~09/AZaz_-~09]]"));

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//bas e/azAZ_-~09/AZaz_-~09"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//ba'se/azAZ_-~09/AZaz_-~09"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//ba/se/azAZ_-~09/AZaz_-~09"));

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//b/e/k"));

		REQUIRE(strcmp(loc.base,   "b") == 0);
		REQUIRE(strcmp(loc.entity, "e") == 0);
		REQUIRE(strcmp(loc.key,	   "k") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//0/e/k"));

		REQUIRE(strcmp(loc.base,   "0") == 0);
		REQUIRE(strcmp(loc.entity, "e") == 0);
		REQUIRE(strcmp(loc.key,	   "k") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//b/0/k"));

		REQUIRE(strcmp(loc.base,   "b") == 0);
		REQUIRE(strcmp(loc.entity, "0") == 0);
		REQUIRE(strcmp(loc.key,	   "k") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//b/e/0"));

		REQUIRE(strcmp(loc.base,   "b") == 0);
		REQUIRE(strcmp(loc.entity, "e") == 0);
		REQUIRE(strcmp(loc.key,	   "0") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//-/e/k"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//b/-/k"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//b/e/-"));

		REQUIRE(!TT_API.parse_locator(loc, (pChar) "/b/e/k"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//b"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//b/e/"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//b/e/k/"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "///b/e/k"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "///n//b/e/k"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "//"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "/"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) "a"));
		REQUIRE(!TT_API.parse_locator(loc, (pChar) ""));

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//deque/entity/~pop_first"));

		REQUIRE(strcmp(loc.base,   "deque") == 0);
		REQUIRE(strcmp(loc.entity, "entity") == 0);
		REQUIRE(strcmp(loc.key,	   "~pop_first") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//deque/entity/key~prev"));

		REQUIRE(strcmp(loc.base,   "deque") == 0);
		REQUIRE(strcmp(loc.entity, "entity") == 0);
		REQUIRE(strcmp(loc.key,	   "key~prev") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//index/id/~si"));

		REQUIRE(strcmp(loc.base,   "index") == 0);
		REQUIRE(strcmp(loc.entity, "id") == 0);
		REQUIRE(strcmp(loc.key,	   "~si") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//queue/candidates/~5000"));

		REQUIRE(strcmp(loc.base,   "queue") == 0);
		REQUIRE(strcmp(loc.entity, "candidates") == 0);
		REQUIRE(strcmp(loc.key,	   "~5000") == 0);
		REQUIRE(loc.p_extra == nullptr);

		REQUIRE(TT_API.parse_locator(loc, (pChar) "//tree/game/node0a7ef~node0244e"));

		REQUIRE(strcmp(loc.base,   "tree") == 0);
		REQUIRE(strcmp(loc.entity, "game") == 0);
		REQUIRE(strcmp(loc.key,	   "node0a7ef~node0244e") == 0);
		REQUIRE(loc.p_extra == nullptr);
	}

	GIVEN("We want to test expand_url_encoded()") {
		char buff [4096];

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&a_stupid_string;"));

		REQUIRE(strcmp(buff, "a_stupid_string") == 0);

		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&a stupid string;"));

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&a%20stupid%20string;"));

		REQUIRE(strcmp(buff, "a stupid string") == 0);

		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "a_stupid_string;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&a_stupid_string"));

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&b_stupid_string)"));

		REQUIRE(strcmp(buff, "b_stupid_string") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&c_stupid_string]"));

		REQUIRE(strcmp(buff, "c_stupid_string") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&d_stupid_string;;"));

		REQUIRE(strcmp(buff, "d_stupid_string;") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&e_stupid_string]]"));

		REQUIRE(strcmp(buff, "e_stupid_string]") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&f_stupid_string];"));

		REQUIRE(strcmp(buff, "f_stupid_string]") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&g_stupid_string))"));

		REQUIRE(strcmp(buff, "g_stupid_string)") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&!#$&'()*+,/:;=?@[]a-z_A-Z_0-9.e+99~kk;"));

		REQUIRE(strcmp(buff, "!#$&'()*+,/:;=?@[]a-z_A-Z_0-9.e+99~kk") == 0);

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&*%2a%2A;%3b%3B]%5d%5D;"));

		REQUIRE(strcmp(buff, "***;;;]]]") == 0);

		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&*%2a%2A;%3b%3B]%5d%5;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&*%2a%2A;%3b%3B]%5d%;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&abc\t;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&abc<;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&abc>;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&abc\\;"));
		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 4096, (pChar) "&abc^;"));

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 8, (pChar) "&abc%20123;"));

		REQUIRE(strcmp(buff, "abc 123") == 0);

		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 7, (pChar) "&abc%20123;"));

		REQUIRE(TT_API.expand_url_encoded((pChar) &buff, 4, (pChar) "&abc;"));

		REQUIRE(strcmp(buff, "abc") == 0);

		REQUIRE(!TT_API.expand_url_encoded((pChar) &buff, 3, (pChar) "&abc;"));
	}

	GIVEN("We want to test parse()") {
		HttpQueryState hqs;

		hqs.l_node[0] = 'a';
		hqs.r_node[0] = 'b';
		hqs.url[0]	  = 'z';

		REQUIRE(TT_API.parse(hqs, (pChar) "///", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_JAZZ_INFO);

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(hqs.url[0]	  == 0);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///abcdefghijABCDEFGHIJ0123456789_//bb/ee/kk:nn", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "abcdefghijABCDEFGHIJ0123456789_") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.entity, "ee") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(strcmp(hqs.name,   "nn") == 0);
		REQUIRE(strcmp(hqs.url,	   "//bb/ee/kk:nn") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///abcdefghijABCDEFGHIJ0123456789_//bb/ee/kk:nn", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///abcdefghijABCDEFGHIJ0123456789_0//bb/ee/kk:nn", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//abc1234/ee/kk:nn", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "abc1234") == 0);
		REQUIRE(strcmp(hqs.entity, "ee") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(strcmp(hqs.name,   "nn") == 0);
		REQUIRE(strcmp(hqs.url,	   "//abc1234/ee/kk:nn") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///no de//abc1234/ee/kk:nn", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//abc1234/ee/kk)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//abc12345/ee/kk:nn", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base/abcdefghijABCDEFGHIJ0123456789_/kk:nn", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "abcdefghijABCDEFGHIJ0123456789_") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(strcmp(hqs.name,   "nn") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/abcdefghijABCDEFGHIJ0123456789_/kk:nn") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/abcdefghijABCDEFGHIJ0123456789_7/kk:nn", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base/entity/ABCDEFGHIJ0123456789abcdefghijk:nn", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "ABCDEFGHIJ0123456789abcdefghijk") == 0);
		REQUIRE(strcmp(hqs.name,   "nn") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/ABCDEFGHIJ0123456789abcdefghijk:nn") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/entity/ABCDEFGHIJ0123456789abcdefghijkl:nn", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base/entity/key:n123456789ABCDEFGHIJK0123456789", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.name,   "n123456789ABCDEFGHIJK0123456789") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/key:n123456789ABCDEFGHIJK0123456789") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/entity/key:n123456789ABCDEFGHIJK01234567890", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///r_node//base/entity/r_key", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "r_node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "r_key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/r_key") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "///w_node//base/entity/w_key", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "w_node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "w_key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/w_key") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///r_node//base_x/entity", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_x/entity", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///w_node//base_y/entity", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///w_node//base_y/entity", HTTP_DELETE));

		REQUIRE(strcmp(hqs.l_node, "w_node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_y") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base_y/entity") == 0);

		REQUIRE(hqs.key[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_y/entity", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_y/entity", HTTP_DELETE));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_y") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(hqs.key[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///r_node//base_x/entity/", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///w_node//base_y/entity/", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///r_node//base_x/", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///w_node//base_y/", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///r_node//base_x", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///w_node//base_y", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key:n123456789ABCDEFGHIJK0123456789", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.name,   "n123456789ABCDEFGHIJK0123456789") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_y/entity", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_y/entity", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_y/entity", HTTP_DELETE));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_y") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.key[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key.raw", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_RAW);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.raw", HTTP_DELETE));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity/key_t.text", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key_t") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_TEXT);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key_t.text", HTTP_DELETE));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key_t.Text", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key_t.TEXT", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///ndd//bbb&[1,2,3];", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "ndd") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bbb") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bbb&[1,2,3];") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb&[1,2,3];", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bbb") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bbb/[1,2,3]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "///ndd//bbb_w&[1, 2, 3];", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "ndd") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bbb_w") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bbb_w&[1, 2, 3];") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb_w&[1, 2, 3];", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bbb_w") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bbb_w/[1, 2, 3]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bb_x&[1,2,3];", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bb_x") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bb_x/[1,2,3]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bb_x&[1, 2,3];", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "bb_x") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//bb_x/[1, 2,3]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(///aaa//r_base/r_ent)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///aaa//base_s/entity/key(//r_base/r_ent)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "aaa") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.url, "//base_s/entity/key(//r_base/r_ent)") == 0);

		REQUIRE(strcmp(hqs.r_value.base, "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(hqs.r_value.key[0]	== 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity/key(//r_base/r_ent)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(hqs.r_value.key[0]	== 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(//r_base/r_ent)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(//r_base)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[///qqq//r_base2/r_ent2]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///qqq//base_s/entity2/key[//r_base2/r_ent2]", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "qqq") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base_s/entity2/key[//r_base2/r_ent2]") == 0);

		REQUIRE(strcmp(hqs.r_value.base, "r_base2") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent2") == 0);
		REQUIRE(hqs.r_value.key[0]	== 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FILTER);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity2/key[//r_base2/r_ent2]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "r_base2") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent2") == 0);
		REQUIRE(hqs.r_value.key[0]	== 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FILTER);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[//r_base2/r_ent2]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[//r_base2/]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=//r_base/r_ent/r_key]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "r_key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=///node//r_base/r_ent/r_key", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "node") == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "r_key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "///qqq//base_s3/entity2/key4=///rrr//r_base/r_ent/r_key", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "qqq") == 0);
		REQUIRE(strcmp(hqs.r_node, "rrr") == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "r_key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "r_key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "r_base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "r_ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "r_key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key:item", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key:item", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(strcmp(hqs.name,   "item") == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky.raw=//base/ent/key:item", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///qq//base/ent/key:item", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "qq") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(strcmp(hqs.name,   "item") == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy:itm", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy:itm", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(strcmp(hqs.name,   "itm") == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_NAME);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//file&/tmp/new_folder;", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//file&/tmp/new_folder", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//file&/tmp/new_folder;", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "//file//tmp/new_folder") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "file") == 0);
		REQUIRE(hqs.r_value.entity[0] == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///mmm//file&/tmp/new_folder;", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "mmm") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "//file//tmp/new_folder") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "file") == 0);
		REQUIRE(hqs.r_value.entity[0] == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_URL);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky.raw=///mmm//file&/tmp/new_folder;", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///mmm//bbb/ent/ky=///nn//file&/tmp/new_folder;", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "mmm") == 0);
		REQUIRE(strcmp(hqs.r_node, "nn") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "//file//tmp/new_folder") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "file") == 0);
		REQUIRE(hqs.r_value.entity[0] == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_URL);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "//file//tmp/new_folder") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "file") == 0);
		REQUIRE(hqs.r_value.entity[0] == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_URL);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky(//bb/ea/kk)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base/ent/ky(///n3//bb/ea/kk)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//base/ent/ky(//bb/ea/kk)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(strcmp(hqs.r_node, "nn2") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "ky") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "ea") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky.text=///nn2//base/ent/ky(//bb/ea/kk)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky(//bb/ea/kk)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "ky") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "ea") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy(//bbb/eee/kkk)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy(//bbb/eee/kkk)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "eee") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kkk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCTION);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//bash/exec/(&ls -la)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "nn") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "ls -la") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "exec") == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky.text=///nn//bash/exec/(&ls -la)", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//bash/exec/(&ls -la)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(strcmp(hqs.r_node, "nn2") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "ls -la") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "exec") == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/(&ls -la)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "ls -la") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "exec") == 0);
		REQUIRE(hqs.r_value.key[0] == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base_s/entity/key(&[1,2])", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base_s/entity/key(&[1,2])", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "nn") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bss/ent/kk=//base_s/entity/key(&[1,2])", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bss") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky[//bb/ea/kk]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky[///n3//bb/ea/kk]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//base/ent/key[//bb/ea/kk]", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(strcmp(hqs.r_node, "nn2") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "ea") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILTER);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key[//bb/ea/kk]", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "ea") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILTER);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky.raw=//base/ent/key[//bb/ea/kk]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy[//bbb/eee/kkk]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy[//bbb/eee/kkk]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(strcmp(hqs.rr_value.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.rr_value.entity, "eee") == 0);
		REQUIRE(strcmp(hqs.rr_value.key,	"kkk") == 0);
		REQUIRE(hqs.rr_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILTER);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//bash/exec/qq[&[1,2]]", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(strcmp(hqs.r_node, "nn2") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "exec") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "qq") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "exec") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "qq") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base_s/entity/key[&[1,2]]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base_s/entity/key[&[1,2]]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "nn") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bss/ent/kk=//base_s/entity/key[&[1,2]]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bss") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(strcmp(hqs.url,	   "[1,2]") == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_FILT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key.raw", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key.raw", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_RAW);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy.raw", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy.raw", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0] == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_RAW);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base/ent/key.text", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base/ent/key.text", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(strcmp(hqs.r_node, "nn") == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "key") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_TEXT);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///m//qqq/ent/ky=///m//base/ent/kyy.text", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///m//qqq/ent/ky=///m//base/ent/kyy.text", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "m") == 0);
		REQUIRE(strcmp(hqs.r_node, "m") == 0);
		REQUIRE(strcmp(hqs.base,   "qqq") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "ky") == 0);
		REQUIRE(hqs.url[0]  == 0);
		REQUIRE(hqs.name[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "base") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_TEXT);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key=//r_base/r_ent/r_key]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key=//r_base/r_ent/]", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity/key(&[1,2])", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);

		REQUIRE(strcmp(hqs.url, "[1,2]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(&[1,2])", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///qq//base_s/entity/key(&[1, 2])", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "qq") == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);

		REQUIRE(strcmp(hqs.url, "//base_s/entity/key(&[1, 2])") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity2/key[&[2,4,6]]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);

		REQUIRE(strcmp(hqs.url, "[2,4,6]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FILT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[&[2,4,6]]", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s/entity2/key[&[2, 4,6]]", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base_s") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);

		REQUIRE(strcmp(hqs.url, "[2, 4,6]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FILT_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);

		REQUIRE(strcmp(hqs.url, "//base_s3/entity2/key4=&[[2,4], [5,6]];") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base_s3") == 0);
		REQUIRE(strcmp(hqs.entity, "entity2") == 0);
		REQUIRE(strcmp(hqs.key,	   "key4") == 0);

		REQUIRE(strcmp(hqs.url, "[[2,4], [5,6]]") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=&[[2,4],[5,6]];", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn//base/ent/kky=&[[5, 7], [3,1]];", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "ent") == 0);
		REQUIRE(strcmp(hqs.key,	   "kky") == 0);

		REQUIRE(strcmp(hqs.url, "//base/ent/kky=&[[5, 7], [3,1]];") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_ASSIGN_CONST);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nn_dd//bb/entity.new", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "nn_dd") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bb") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url,	   "//bb/entity.new") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NEW_ENTITY);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn_dd//bb/entity.new", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/entityQ.new", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "entityQ") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NEW_ENTITY);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/entity.new", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base/entity/key.attribute(123)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node")	 == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key")	 == 0);

		REQUIRE(strcmp(hqs.url, "//base/entity/key.attribute(123)") == 0);

		REQUIRE(hqs.r_value.attribute == 123);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_GET_ATTRIBUTE);

		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/entity/key.attribute(123)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base2/entity/key44.attribute(-456)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base2")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key44")	 == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.r_value.attribute == -456);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_GET_ATTRIBUTE);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base2/entity/key44.attribute(-456)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=&en-us;", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key")	 == 0);
		REQUIRE(strcmp(hqs.url,	   "en-us")	 == 0);

		REQUIRE(hqs.r_value.attribute == 1234);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_SET_ATTRIBUTE);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=&en-us;", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(what)=&en-us;", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base2/entity/key44.attribute(-456", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///node//base/entity/key.attribute(5432)=&en-us;", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key")	 == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/key.attribute(5432)=&en-us;") == 0);

		REQUIRE(hqs.r_value.attribute == 5432);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_SET_ATTRIBUTE);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=en-us;", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234);", HTTP_GET));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=& en-us;", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key")	 == 0);
		REQUIRE(strcmp(hqs.url,	   " en-us") == 0);

		REQUIRE(hqs.r_value.attribute == 1234);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_SET_ATTRIBUTE);

		REQUIRE(TT_API.parse(hqs, (pChar) "///n//base/entity/key.attribute(1234)=& en-us;", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "n") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base")	 == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key")	 == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/key.attribute(1234)=& en-us;") == 0);

		REQUIRE(hqs.r_value.attribute == 1234);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_SET_ATTRIBUTE);

		REQUIRE(TT_API.parse(hqs, (pChar) "//deque/entity/~pop_first", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "deque") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "~pop_first") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//deque/entity/key~prev", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "deque") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key~prev") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//index/id/~si", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "index") == 0);
		REQUIRE(strcmp(hqs.entity, "id") == 0);
		REQUIRE(strcmp(hqs.key,	   "~si") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//queue/candidates/~5000", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "queue") == 0);
		REQUIRE(strcmp(hqs.entity, "candidates") == 0);
		REQUIRE(strcmp(hqs.key,	   "~5000") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//tree/game/node0a7ef~node0244e", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "tree") == 0);
		REQUIRE(strcmp(hqs.entity, "game") == 0);
		REQUIRE(strcmp(hqs.key,	   "node0a7ef~node0244e") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bash/exec/(&ls -la)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bash/exec/(&ls -la)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.entity, "exec") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "ls -la") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bash/exec/inst(&ls -la)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///tt//bash/exec/inst(&ls -la)", HTTP_GET));

		REQUIRE(strcmp(hqs.l_node, "tt") == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.entity, "exec") == 0);
		REQUIRE(strcmp(hqs.key,	   "inst") == 0);
		REQUIRE(strcmp(hqs.url,	   "//bash/exec/inst(&ls -la)") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bash/exec/(//lmdb/dbi/kyy)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bash/exec/(//lmdb/dbi/kyy)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.entity, "exec") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "lmdb") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "dbi") == 0);
		REQUIRE(strcmp(hqs.r_value.key, "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//bash/exec/inst(//lmdb/dbi/kyy)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bash/exec/inst(//lmdb/dbi/kyy)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "bash") == 0);
		REQUIRE(strcmp(hqs.entity, "exec") == 0);
		REQUIRE(strcmp(hqs.key,	   "inst") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base, "lmdb") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "dbi") == 0);
		REQUIRE(strcmp(hqs.r_value.key, "kyy") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/my_pipe/(&Whatever works)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//0-mq/my_pipe/(&Whatever works)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "0-mq") == 0);
		REQUIRE(strcmp(hqs.entity, "my_pipe") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "Whatever works") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/my_pipe/inst(&Whatever works)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//0-mq/my_pipe/inst(&Whatever works)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "0-mq") == 0);
		REQUIRE(strcmp(hqs.entity, "my_pipe") == 0);
		REQUIRE(strcmp(hqs.key,	   "inst") == 0);
		REQUIRE(strcmp(hqs.url, "Whatever works") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCT_CONST);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/pipe/(//tree/this/that)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//0-mq/pipe/(//tree/this/that)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "0-mq") == 0);
		REQUIRE(strcmp(hqs.entity, "pipe") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "tree") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "this") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "that") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/pipe/click(//tree/that/this)", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//0-mq/pipe/click(//tree/that/this)", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "0-mq")	== 0);
		REQUIRE(strcmp(hqs.entity, "pipe")	== 0);
		REQUIRE(strcmp(hqs.key,	   "click")	== 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(strcmp(hqs.r_value.base,   "tree") == 0);
		REQUIRE(strcmp(hqs.r_value.entity, "that") == 0);
		REQUIRE(strcmp(hqs.r_value.key,	   "this") == 0);
		REQUIRE(hqs.r_value.p_extra == nullptr);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_FUNCTION);

		REQUIRE(!TT_API.parse(hqs, (pChar) "//queue/name/~5000.new", HTTP_PUT));

		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//queue/name/~5000.new", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "queue")	== 0);
		REQUIRE(strcmp(hqs.entity, "name")	== 0);
		REQUIRE(strcmp(hqs.key,	   "~5000")	== 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NEW_ENTITY);

		REQUIRE(TT_API.parse(hqs, (pChar) "//file&/tmp/folder/;.new", HTTP_GET));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base, "file") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0]	  == 0);
		REQUIRE(strcmp(hqs.url, "//file//tmp/folder/") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NEW_ENTITY);

		REQUIRE(TT_API.parse(hqs, (pChar) "//queue/test_q/twelve~0.12", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "queue") == 0);
		REQUIRE(strcmp(hqs.entity, "test_q") == 0);
		REQUIRE(strcmp(hqs.key,	   "twelve~0.12") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);
	}

	GIVEN("We test parse() for PUT and DELETE") {
		HttpQueryState hqs;

		hqs.l_node[0] = 'a';
		hqs.r_node[0] = 'b';
		hqs.url[0]	  = 'z';

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///w_node//base/entity/w_key", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "w_node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "w_key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/w_key") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "///w_node//base/entity/w_key", HTTP_DELETE));

		REQUIRE(strcmp(hqs.l_node, "w_node") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "w_key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/w_key") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//bbb/ee/k", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "bbb") == 0);
		REQUIRE(strcmp(hqs.entity, "ee") == 0);
		REQUIRE(strcmp(hqs.key,	   "k") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		REQUIRE(TT_API.parse(hqs, (pChar) "//b/eee/kk", HTTP_DELETE));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "b") == 0);
		REQUIRE(strcmp(hqs.entity, "eee") == 0);
		REQUIRE(strcmp(hqs.key,	   "kk") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ee", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//b/eee", HTTP_DELETE));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base,   "b") == 0);
		REQUIRE(strcmp(hqs.entity, "eee") == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_NOTHING);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/abcdefg/kk:nn", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/abcdefg/kk:nn", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/abcdefg/kk:nn", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/abcdefg/kk:nn", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//file&README.md;", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "file") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//file/README.md") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nnn//file&main.c;", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "nnn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "file") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//file&main.c;") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "//file&README.md;", HTTP_DELETE));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "file") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//file/README.md") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nnn//file&main.c;", HTTP_DELETE));

		REQUIRE(strcmp(hqs.l_node, "nnn") == 0);
		REQUIRE(hqs.r_node[0] == 0);
		REQUIRE(strcmp(hqs.base, "file") == 0);
		REQUIRE(hqs.entity[0] == 0);
		REQUIRE(hqs.key[0] == 0);
		REQUIRE(strcmp(hqs.url, "//file&main.c;") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_URL);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/pipe/click(//tree/that/this)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//0-mq/pipe/click(//tree/that/this)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//0-mq/pipe/click(//tree/that/this)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//0-mq/pipe/click(//tree/that/this)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(&[1,2])", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity/key(&[1,2])", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///go//base_s/entity/key(&[1,2])", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///go//base_s/entity/key(&[1,2])", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///qqq//base_s/entity2/key[//r_base2/r_ent2]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///qqq//base_s/entity2/key[//r_base2/r_ent2]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[//r_base2/r_ent2]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[//r_base2/r_ent2]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[&[2,4,6]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s/entity2/key[&[2,4,6]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///s//base_s/entity2/key[&[2,4,6]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///s//base_s/entity2/key[&[2,4,6]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key.raw", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_RAW);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.raw", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nX//base/entity/key.raw", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "nX") == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/key.raw") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_RAW);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nX//base/entity/key.raw", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "//base/entity/key.text", HTTP_PUT));

		REQUIRE(hqs.l_node[0] == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(hqs.url[0] == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_TEXT);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.text", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		REQUIRE(TT_API.parse(hqs, (pChar) "///nX//base/entity/key.text", HTTP_PUT));

		REQUIRE(strcmp(hqs.l_node, "nX") == 0);
		REQUIRE(hqs.r_node[0] == 0);

		REQUIRE(strcmp(hqs.base,   "base") == 0);
		REQUIRE(strcmp(hqs.entity, "entity") == 0);
		REQUIRE(strcmp(hqs.key,	   "key") == 0);
		REQUIRE(strcmp(hqs.url,	   "//base/entity/key.text") == 0);

		REQUIRE(hqs.state == PSTATE_COMPLETE_OK);
		REQUIRE(hqs.apply == APPLY_TEXT);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nX//base/entity/key.text", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=//r_base/r_ent/r_key", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=///node//r_base/r_ent/r_key", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=///node//r_base/r_ent/r_key", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=///node//r_base/r_ent/r_key", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=///node//r_base/r_ent/r_key", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base/ent/key:item", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base/ent/key:item", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///q//bbb/ent/ky=//base/ent/key:item", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///q//bbb/ent/ky=//base/ent/key:item", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///z//base/ent/key:item", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///z//base/ent/key:item", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///q//bbb/ent/ky=///z//base/ent/key:item", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///q//bbb/ent/ky=///z//base/ent/key:item", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///o//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///o//qqq/ent/ky=//file&/tmp/new_folder;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=///p//file&/tmp/new_folder;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=///p//file&/tmp/new_folder;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///o//qqq/ent/ky=///p//file&/tmp/new_folder;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///o//qqq/ent/ky=///p//file&/tmp/new_folder;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky(//bb/ea/kk)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/ky(//bb/ea/kk)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base/ent/ky(//bb/ea/kk)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//base/ent/ky(//bb/ea/kk)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//bash/exec/(&ls -la)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn//bash/exec/(&ls -la)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/(&ls -la)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//bash/exec/(&ls -la)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy[//bbb/eee/kkk]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=//base/ent/kyy[//bbb/eee/kkk]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///x//qqq/ent/ky=//base/ent/kyy[//bbb/eee/kkk]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//qqq/ent/ky=///x//base/ent/kyy[//bbb/eee/kkk]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//bash/exec/qq[&[1,2]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///nn2//bash/exec/qq[&[1,2]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn2//bash/exec/qq[&[1,2]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///nn2//bash/exec/qq[&[1,2]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//bash/exec/qq[&[1,2]]", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key.raw", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=//base/ent/key.raw", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base/ent/key.raw", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=//base/ent/key.raw", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///xxx//base/ent/key.text", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn//bbb/ent/ky=///xxx//base/ent/key.text", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///xxx//base/ent/key.text", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bbb/ent/ky=///xxx//base/ent/key.text", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base_s3/entity2/key4=&[[2,4], [5,6]];", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn_dd//bb/entity.new", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///nn_dd//bb/entity.new", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bb/entity.new", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//bb/entity.new", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/entity/key.attribute(123)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///node//base/entity/key.attribute(123)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(123)", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(123)", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=&en-us;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "//base/entity/key.attribute(1234)=&en-us;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///t//base/entity/key.attribute(1234)=&en-us;", HTTP_PUT));
		REQUIRE(hqs.state == PSTATE_FAILED);

		hqs.state = PSTATE_COMPLETE_OK;
		REQUIRE(!TT_API.parse(hqs, (pChar) "///t//base/entity/key.attribute(1234)=&en-us;", HTTP_DELETE));
		REQUIRE(hqs.state == PSTATE_FAILED);
	}

	REQUIRE(TT_API.shut_down() == 0);
}


SCENARIO("Testing API struct sizes and positions") {

	REQUIRE(sizeof(HttpQueryState) == 2048);

	HttpQueryState q_state;
	Locator loc;

	strcpy(q_state.base,   "base");
	strcpy(q_state.entity, "entity");
	strcpy(q_state.key,	   "abcdefghij0123456789ABCDEFGHIJ-");

	REQUIRE(strlen(q_state.key) == sizeof(q_state.key) - 1);

	memcpy(&loc, &q_state.base, SIZE_OF_BASE_ENT_KEY);

	REQUIRE(strcmp(loc.base,   "base") == 0);
	REQUIRE(strcmp(loc.entity, "entity") == 0);
	REQUIRE(strcmp(loc.key,	   "abcdefghij0123456789ABCDEFGHIJ-") == 0);
}
