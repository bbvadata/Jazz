/* Jazz (c) 2018-2021 kaalam.ai (The Authors of Jazz), using (under the same license):

	1. Biomodelling - The AATBlockQueue class (c) Jacques Basaldúa, 2009-2012 licensed
	  exclusively for the use in the Jazz server software.

	  Copyright 2009-2012 Jacques Basaldúa

	2. BBVA - Jazz: A lightweight analytical web server for data-driven applications.

      Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

      This product includes software developed at

      BBVA (https://www.bbva.com/)

	3. LMDB, Copyright 2011-2017 Howard Chu, Symas Corp. All rights reserved.

	  Licensed under http://www.OpenLDAP.org/license.html


	  Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	  http://www.apache.org/licenses/LICENSE-2.0

	  Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/


// #include <stl_whatever>


using namespace jazz_main;


// Instancing of different containers for API testing
// --------------------------------------------------

Agency		EPI		  (&LOGGER, &CONFIG);
Bebop		BOP		  (&LOGGER, &CONFIG);
Persisted	PERSISTED (&LOGGER, &CONFIG);
Volatile	VOLATILE  (&LOGGER, &CONFIG);
Api			TT_API	  (&LOGGER, &CONFIG, &VOLATILE, &PERSISTED, &BOP, &EPI);


// Testing utilities
// -----------------

bool test_parse_const_meta (const char * p_query,
							int expected_ret,
							int expected_type = 0,
							int expected_rank = 0,
							int expected_dim0 = 0,
							int expected_dim1 = 0,
							int expected_dim2 = 0,
							int expected_dim3 = 0,
							int expected_dim4 = 0,
							int expected_dim5 = 0)
{
	Block		block_hea;
	char		buff[SAFE_URL_LENGTH];
	TensorDim	td;

	strcpy(buff, p_query);

	pChar p_buff = (pChar) &buff;

	int ret = TT_API._parse_const_meta(p_buff, &block_hea);

	REQUIRE(ret == expected_ret);

	if (expected_ret != PARSE_OK)
		return true;

	if (expected_type)
		REQUIRE(block_hea.cell_type == expected_type);

	if (expected_rank)
		REQUIRE(block_hea.rank == expected_rank);

	block_hea.get_dimensions((int *)&td.dim);

	if (expected_dim0)
		REQUIRE(td.dim[0] == expected_dim0);

	if (expected_dim1)
		REQUIRE(td.dim[1] == expected_dim1);

	if (expected_dim2)
		REQUIRE(td.dim[2] == expected_dim2);

	if (expected_dim3)
		REQUIRE(td.dim[3] == expected_dim3);

	if (expected_dim4)
		REQUIRE(td.dim[4] == expected_dim4);

	if (expected_dim5)
		REQUIRE(td.dim[5] == expected_dim5);

	return true;
}


bool test_parse_get(const char * p_query,
					int expected_ret)
{

	return true;
}


bool test_parse_put(const char * p_query,
					int expected_ret)
{

	return true;
}

// Tests
// -----

SCENARIO("Testing api types") {

	REQUIRE(sizeof(NextStateLUT) == 256);
	REQUIRE(sizeof(CharGroupLUT) == 256);
}


SCENARIO("Testing api initialization") {

	GIVEN("The instances are constructed, but not yet started") {
		REQUIRE(tenbit_double_slash == TenBitsAtAddress("//"));

		REQUIRE(TT_API.p_volatile	== &VOLATILE);
		REQUIRE(TT_API.p_persisted	== &PERSISTED);
		REQUIRE(TT_API.p_bebop		== &BOP);
		REQUIRE(TT_API.p_agency		== &EPI);

		REQUIRE(TT_API.base.size() == 0);
	}

	REQUIRE(VOLATILE.start()  == 0);
	REQUIRE(PERSISTED.start() == 0);

	REQUIRE(BOP.start() == 0);
	REQUIRE(EPI.start() == 0);

	REQUIRE(TT_API.start() == 0);

	GIVEN("The instances are started") {
		REQUIRE(TT_API.base[""]	   == &TT_API);
		REQUIRE(TT_API.base["map"] == &VOLATILE);
		REQUIRE(TT_API.base["sys"] == &PERSISTED);
	}
}


SCENARIO("Testing api.parse") {

	GIVEN("We test Api::_parse_const_meta for tensors") {
		REQUIRE(test_parse_const_meta("[11,22,33]", PARSE_OK, CELL_TYPE_INTEGER, 1, 3));
		REQUIRE(test_parse_const_meta(" [ 11, 22, 33] ", PARSE_OK, CELL_TYPE_INTEGER, 1, 3));
		REQUIRE(test_parse_const_meta("   11, 22, 33", PARSE_OK, CELL_TYPE_INTEGER, 1, 3));
		REQUIRE(test_parse_const_meta("-131072", PARSE_OK, CELL_TYPE_INTEGER, 1, 1));
		REQUIRE(test_parse_const_meta(" [ 1 1, 22, 33] ", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta(" [ 11 , 22, 33] ", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta(" [ 11, 22, 33 ] ", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[[[[[0, 0]]]]]", PARSE_OK, CELL_TYPE_INTEGER, 5, 1, 1, 1, 1, 2));
		REQUIRE(test_parse_const_meta("[[[[[0]]]]]", PARSE_OK, CELL_TYPE_INTEGER, 5, 1, 1, 1, 1, 1));

		REQUIRE(test_parse_const_meta("[[[1,2,3], [4,5,6]], [[1,-2,-3], [4,5,6]], [[1,2,3], [4,-5,-6]], [[1,2,3], [-4,-5,-6]]]",
									  PARSE_OK, CELL_TYPE_INTEGER, 3, 4, 2, 3));

		REQUIRE(test_parse_const_meta(" [ [ [ 1, 2, 3]\t ,\t [4, 5, 6] ] , [ [ 1,\t -2,\t-3], [ 4, 5, 6] ] ]\t",
									  PARSE_OK, CELL_TYPE_INTEGER, 3, 2, 2, 3));
		REQUIRE(test_parse_const_meta(" [ [ [ 1, - 2, 3]\t ,\t [4, 5, 6] ] , [ [ 1,\t -2,\t-3], [ 4, 5, 6] ] ]\t",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[[[1,2], [3,4], [-5,-6]], [[-1,22], [33,-4], [555,-66]], [[1,2], [3,4], [5,6]]]",
									  PARSE_OK, CELL_TYPE_INTEGER, 3, 3, 3, 2));

		REQUIRE(test_parse_const_meta("[[[1,2], [3,4], [-5,-6]], [[-1,22], [33,-4], [555,-66]], 9]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta( "[[[[[[1,2,3], [4,5,6]]]]]]",  PARSE_OK, CELL_TYPE_INTEGER, 6, 1, 1, 1, 1, 2, 3));
		REQUIRE(test_parse_const_meta("[[[[[[[1,2,3], [4,5,6]]]]]]]", PARSE_ERROR_TOO_DEEP));
		REQUIRE(test_parse_const_meta( "[[[[[[1,2,3], [4,5,6]]]]]",	  PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta(  "[[[[[1,2,3], [4,5,6]]]]]]",  PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta( "[[[[[[1,2,3], [4,5]]]]]]",	  PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta( "", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta( "[]", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta( "[[],2]", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta( "[1,2,3,[]]", PARSE_ERROR_INVALID_SHAPE));
		REQUIRE(test_parse_const_meta( "[1,2,3,[4]]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta( "[1,2,3,\"5\"]", PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[11,22.1,33]", PARSE_OK, CELL_TYPE_DOUBLE, 1, 3));

		REQUIRE(test_parse_const_meta("   1.1, 22, 33", PARSE_OK, CELL_TYPE_DOUBLE, 1, 3));
		REQUIRE(test_parse_const_meta("-131072.0", PARSE_OK, CELL_TYPE_DOUBLE, 1, 1));
		REQUIRE(test_parse_const_meta("[[[[[1.0]]]]]", PARSE_OK, CELL_TYPE_DOUBLE, 5, 1, 1, 1, 1, 1));

		REQUIRE(test_parse_const_meta("[[[1e1,2,3], [4,5,6]], [[1,-2,-3], [4,5,6]], [[1,2,3], [4,-5,-6]], [[1,2,3], [-4,-5,-6]]]",
									  PARSE_OK, CELL_TYPE_DOUBLE, 3, 4, 2, 3));
		REQUIRE(test_parse_const_meta("[[[1,2,3], [4,5,6]], [[1,-2,-3], [4,5,6]], [[1,2,3], [4,-5.2e-3,-6]], [[1,2,3], [-4,-5,-6]]]",
									  PARSE_OK, CELL_TYPE_DOUBLE, 3, 4, 2, 3));

		REQUIRE(test_parse_const_meta( "[[[[[[1.0,2,3], [4,5,6]]]]]]",  PARSE_OK, CELL_TYPE_DOUBLE, 6, 1, 1, 1, 1, 2, 3));
		REQUIRE(test_parse_const_meta("[[[[[[[1.0,2,3], [4,5,6]]]]]]]", PARSE_ERROR_TOO_DEEP));
		REQUIRE(test_parse_const_meta( "[[[[[[1.0,2,3], [4,5,6]]]]]",	PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta(  "[[[[[1.0,2,3], [4,5,6]]]]]]",  PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta( "[[[[[[1.0,2,3], [4,5]]]]]]",	PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta( "[[],2.3]", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta( "[1.0,2,3,[]]", PARSE_ERROR_INVALID_SHAPE));
		REQUIRE(test_parse_const_meta( "[1.0,2,3,[4]]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta("[[[1,2], [3.,4], [-5,-6]], [[-1,22], [33,-4], [555,-66]], [[1,2], [3,4], [5,6]]]",
									  PARSE_OK, CELL_TYPE_DOUBLE, 3, 3, 3, 2));

		REQUIRE(test_parse_const_meta("[[[1,2], [0.3,4], [-5,-6]], [[-1,22], [33,-4], [555,-66]], [[1,2], [3,4], [5,6]]]",
									  PARSE_OK, CELL_TYPE_DOUBLE, 3, 3, 3, 2));

		REQUIRE(test_parse_const_meta("[[[1,2], [0.3,4], [-5,-6]], [[-1,22], [33,-4], [555,-66]], 9]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta("[\"one\",\"two\",\"three\"]", PARSE_OK, CELL_TYPE_STRING, 1, 3));
		REQUIRE(test_parse_const_meta(" [ \"eleven\" , \"twelve\" , \"whatever\" ] ", PARSE_OK, CELL_TYPE_STRING, 1, 3));
		REQUIRE(test_parse_const_meta("  \"eleven\" , \"twelve\" , \"whatever\" ", PARSE_OK, CELL_TYPE_STRING, 1, 3));
		REQUIRE(test_parse_const_meta("\"-131072\"", PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta(" [ \"1 1\", \"22\", \"33\"] ", PARSE_OK, CELL_TYPE_STRING, 1, 3));
		REQUIRE(test_parse_const_meta(" [ \"11\" , \"22\", \"33] ", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[[[[[\"0\", \"0\"]]]]]", PARSE_OK, CELL_TYPE_STRING, 5, 1, 1, 1, 1, 2));
		REQUIRE(test_parse_const_meta("[[[[[\"0\"]]]]]", PARSE_OK, CELL_TYPE_STRING, 5, 1, 1, 1, 1, 1));

		REQUIRE(test_parse_const_meta("[[[\"1\",\"2\",\"3\"], [\"4\",\"5\",\"6\"]], [[\"1\",\"-2\",\"-3\"], [\"4\",\"5\",\"6\"]]]",
									  PARSE_OK, CELL_TYPE_STRING, 3, 2, 2, 3));

		REQUIRE(test_parse_const_meta(" [ [ [ \"1\" , \"2\"]\t ,\t [\"4\", \"5\"\t] ] , [ [ \"1\",\t \"-2\"\t], [ \"4\", \"5\"] ] ]\t",
									  PARSE_OK, CELL_TYPE_STRING, 3, 2, 2, 2));
		REQUIRE(test_parse_const_meta(" [ [ [ \"1\", \"-\", 3]\t ,\t [4, 5, 6] ] , [ [ 1,\t -2,\t-3], [ 4, 5, 6] ] ]\t",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[[[\"1\",\"2\"], [\"3\",\"4\"]], [[\"-1\",\"22\"], [\"33\",\"-4\"]], [[\"1\",\"2\"], [\"3\",\"4\"]]]",
									  PARSE_OK, CELL_TYPE_STRING, 3, 3, 2, 2));

		REQUIRE(test_parse_const_meta("[[[\"1\",\"2\"], [\"3\",\"4\"]], [[\"-1\",\"22\"], [\"33\",\"-4\"]], \"more\"]",
									  PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta( "[[[[[[\"a\",\"b\"], [\"c\",\"d\"]]]]]]",	   PARSE_OK, CELL_TYPE_STRING, 6, 1, 1, 1, 1, 2, 2));
		REQUIRE(test_parse_const_meta("[[[[[[[\"a\",\"b\"], [\"c\",\"d\"]]]]]]]",	   PARSE_ERROR_TOO_DEEP));
		REQUIRE(test_parse_const_meta( "[[[[[[\"a\",\"b\"], [\"c\",\"d\"]]]]]",		   PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta(  "[[[[[\"a\",\"b\"], [\"c\",\"d\"]]]]]]",	   PARSE_BRACKET_MISMATCH));
		REQUIRE(test_parse_const_meta( "[[[[[[\"a\",\"b\"], [\"c\",\"d\",\"x\"]]]]]]", PARSE_ERROR_INVALID_SHAPE));
		REQUIRE(test_parse_const_meta( "[[[[[[\"a\",\"b\",\"x\"], [\"c\",\"d\"]]]]]]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta("[[],\"2\"]",					 PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[\"1\",\"2\",\"3\",[]]",		 PARSE_ERROR_INVALID_SHAPE));
		REQUIRE(test_parse_const_meta("[\"1\",\"2\",\"3\",[\"4\"]]", PARSE_ERROR_INVALID_SHAPE));

		REQUIRE(test_parse_const_meta("[\"1\",\"2\",\"3\",4]",		 PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[\"ABCDE FGHIJ KLMNO PQRST UVW XYZ\t\"]",	PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"abcde fghij klmno pqrst uvw xyz\"]",		PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"01234 56789 -_.~\"]",						PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"! # $ & ' ( ) * + , / : ; = ? @ [ ]\"]",	PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"¡No!\"]",	PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[\"Qué?\"]",	PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[\"He said %22Hi!%22\", \"%30%31%32\", \"%48i\"]",	PARSE_OK, CELL_TYPE_STRING, 1, 3));
		REQUIRE(test_parse_const_meta("[\"He said %22Hi!%22\", \"\", \"%30%31%32\", \"%48i\"]",	PARSE_OK, CELL_TYPE_STRING, 1, 4));

		REQUIRE(test_parse_const_meta("[\"%C5%92\", \"\", \"%E2%80%B0\", \"%48i\", \": %C5%92\", \"%C5%92 :\", \": %C5%92 :\"]",
									  PARSE_OK, CELL_TYPE_STRING, 1, 7));
		REQUIRE(test_parse_const_meta("[\"%c5%92\", \"\", \"%e2%80%b0\", \"%48i\", \": %c5%92\", \"%c5%92 :\", \": %c5%92 :\"]",
									  PARSE_OK, CELL_TYPE_STRING, 1, 7));

		REQUIRE(test_parse_const_meta("[\"%2g\", \"Abc\"]", PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[\"%2\", \"Abc\"]",	PARSE_ERROR_INVALID_CHAR));
		REQUIRE(test_parse_const_meta("[\"%\", \"Abc\"]",	PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("[\": %C5%92 :\"]", PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"%C5\", \": %C5%92 :\"]", PARSE_ERROR_ENCODING));

		REQUIRE(test_parse_const_meta("[\": %e2%80%b0 :\"]", PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"%e2%80\", \": %e2%80%b0 :\"]", PARSE_ERROR_ENCODING));
		REQUIRE(test_parse_const_meta("[\"%e2\", \": %e2%80%b0 :\"]", PARSE_ERROR_ENCODING));

		REQUIRE(test_parse_const_meta("[\": %f0%92%80%bb :\"]", PARSE_OK, CELL_TYPE_STRING, 1, 1));
		REQUIRE(test_parse_const_meta("[\"%f0%92%80\", \": %f0%92%80%bb :\"]", PARSE_ERROR_ENCODING));
		REQUIRE(test_parse_const_meta("[\"%f0%92\", \": %f0%92%80%bb :\"]", PARSE_ERROR_ENCODING));
		REQUIRE(test_parse_const_meta("[\"%f0\", \": %f0%92%80%bb :\"]", PARSE_ERROR_ENCODING));
	}

	GIVEN("We test Api::_parse_const_meta for tuples") {
		REQUIRE(test_parse_const_meta("wave:[2,3,5];encoding:\"json\";volume:3.5", PARSE_OK, CELL_TYPE_TUPLE_ITEM, 1, 3));

		REQUIRE(test_parse_const_meta("wave:[2,3,5];encoding:[\"json\"];volume:[3.5]", PARSE_OK, CELL_TYPE_TUPLE_ITEM, 1, 3));

		REQUIRE(test_parse_const_meta("data:[[[[[[1.0,2,3], [4,5,6]]]]]];names:[\"one\",\"two\",\"three\"]",
									  PARSE_OK, CELL_TYPE_TUPLE_ITEM, 1, 2));

		REQUIRE(test_parse_const_meta("data:[[[[[[1.0,2,3], [4.4,5,6]]]]]];name:\"me\"]",
									  PARSE_OK, CELL_TYPE_TUPLE_ITEM, 1, 2));

		REQUIRE(test_parse_const_meta("data:[[[[[[1.0,2,3], [4.4,5,6]]]]];name:\"me\"]", PARSE_BRACKET_MISMATCH));

		REQUIRE(test_parse_const_meta("data:[[[[[[1.0,2,3], [4.4,5,6]]]]]];name::\"me\"]", PARSE_ERROR_INVALID_CHAR));
	}

	GIVEN("We test Api::_parse_const_meta for kinds") {
		REQUIRE(test_parse_const_meta("image:: red: BYTE[width, height]; green: BYTE[width, height]; blue: BYTE[width, height]",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 3));

		REQUIRE(test_parse_const_meta("image:: buff: SINGLE[width, height, 3]; title: STRING[1]; category: INTEGER[1]",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 3));

		REQUIRE(test_parse_const_meta("image:: buff: SINGLE[width, height, 3]; title: STRING; category: INTEGER",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 3));

		REQUIRE(test_parse_const_meta("image_mono640x480:: buff: SINGLE[640, 480]; description: BYTE[128]",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 2));

		REQUIRE(test_parse_const_meta("voice::wave:INTEGER[num_channels,num_samples];frames_per_Sec:INTEGER",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 2));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[3, x, 6, x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 4));

		REQUIRE(test_parse_const_meta("silly :: a:INTEGER[3, x, 6, x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("silly:: a :INTEGER[3, x, 6, x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[3, x , 6, x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[3, x, 6 , x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[[3, x], [6, x]]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_CHAR));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[3, x, 6, x, 9, x]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_OK, CELL_TYPE_KIND_ITEM, 1, 4));

		REQUIRE(test_parse_const_meta("silly:: a:INTEGER[3, x, 6, x, 9, x, 12]; b:DOUBLE[x, y]; c:STRING; d:FACTOR[y, 3]",
									  PARSE_ERROR_INVALID_SHAPE));
	}

	GIVEN("We test Api::_parse_const_data for tensors") {
	}

	GIVEN("We test Api::_parse_const_data for tuples") {
	}

	GIVEN("We test Api::_parse_const_data for kinds") {
	}

	GIVEN("We test Api::_parse_recurse (GET") {
		REQUIRE(test_parse_get("///", PARSE_OK));
		REQUIRE(test_parse_get("//sys/", PARSE_OK));
		REQUIRE(test_parse_get("//whatever/", PARSE_OK));

		REQUIRE(test_parse_get("//deque/abc.l_pop", PARSE_OK));
		REQUIRE(test_parse_get("//deque/abc.l_pop()", PARSE_OK));
		REQUIRE(test_parse_get("//deque/abc.l_pop().as_json", PARSE_OK));
		REQUIRE(test_parse_get("//deque/abc.l_pop().as_json()", PARSE_OK));

		REQUIRE(test_parse_get("//tree/game/node.parent().parent()", PARSE_OK));
		REQUIRE(test_parse_get("//tree/game/node.doit(1,2).again(\"true\")", PARSE_OK));
		REQUIRE(test_parse_get("//tree/game/node(\"yes\").doit(1,2).again(\"true\")", PARSE_OK));

		REQUIRE(test_parse_get("//my_base/fun(1,2,3)", PARSE_OK));
		REQUIRE(test_parse_get("//my_base/blk[1,2,3]", PARSE_OK));
		REQUIRE(test_parse_get("//my_base/blk[red;title]", PARSE_OK));
		REQUIRE(test_parse_get("//my_base/fun([[2,4],[6,8]])", PARSE_OK));
		REQUIRE(test_parse_get("//my_base/fun(vec:[[2,4],[6,8]];transform:\"log\")", PARSE_OK));
		REQUIRE(test_parse_get("//quack/f(//my_base/fun(vec:[[2,4],[6,8]];transform:\"log\")).as_json()", PARSE_OK));
		REQUIRE(test_parse_get("//quack/f(//my_base/fun(vec:[[2,4],[6,8]];transform:\"log\"))[red;title][1,3,5,7]", PARSE_OK));

		REQUIRE(test_parse_get("//tta/aa = //my_base/fun(1,2,3)", PARSE_OK));
		REQUIRE(test_parse_get("//tta/aa.attrib(key:[1,2], value:[\"base/a.htm\",\"en_us\"]) = //my_base/fun([[2,4],[6,8]])", PARSE_OK));
		REQUIRE(test_parse_get("//tta/aa/bb = //my_base/fun(vec:[[2,4],[6,8]];transform:\"log\")", PARSE_OK));
	}

	GIVEN("We test Api::_parse_recurse (PUT)") {
		REQUIRE(test_parse_put("//tta/aa", PARSE_OK));
		REQUIRE(test_parse_put("//tta/aa.attrib(key:[1,2], value:[\"base/a.htm\",\"en_us\"])", PARSE_OK));
		REQUIRE(test_parse_put("//tta/aa/bb", PARSE_OK));
	}
}


SCENARIO("Testing api statics") {

	GIVEN("Something") {
		WHEN("someone looks at it") {
			THEN("it breaks") {
				REQUIRE(2 > 1);
			}
		}
	}
}
